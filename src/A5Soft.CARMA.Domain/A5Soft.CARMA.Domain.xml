<?xml version="1.0"?>
<doc>
    <assembly>
        <name>A5Soft.CARMA.Domain</name>
    </assembly>
    <members>
        <member name="T:A5Soft.CARMA.Domain.BindableBase">
            <summary>
            This class implements INotifyPropertyChanged  and INotifyPropertyChanging in a 
            serialization-safe manner.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.BindableBase.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.BindableBase.NotifyPropertyChangedEnabled">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.IBindable.NotifyPropertyChangedEnabled" />
        </member>
        <member name="P:A5Soft.CARMA.Domain.BindableBase.NotifyPropertyChangingEnabled">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.IBindable.NotifyPropertyChangingEnabled" />
        </member>
        <member name="P:A5Soft.CARMA.Domain.BindableBase.BindingMode">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.IBindable.BindingMode" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.BindableBase.OnNotifyPropertyChangedEnabledChanged">
            <summary>
            Override this method to update child objects bindings.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.BindableBase.OnNotifyPropertyChangingEnabledChanged">
            <summary>
            Override this method to update child objects bindings.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.BindableBase.OnBindingModeChanged">
            <summary>
            Override this method to update child objects bindings.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.BindableBase.SuspendBindings">
            <summary>
            apply with using pattern to temporally disable binding events
            </summary>
        </member>
        <member name="E:A5Soft.CARMA.Domain.BindableBase.PropertyChanged">
            <summary>
            Implements a serialization-safe PropertyChanged event.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.BindableBase.ShouldHandlerSerialize(System.ComponentModel.PropertyChangedEventHandler)">
            <summary>
            Override this method to change the default logic for determining 
            if the event handler should be serialized
            </summary>
            <param name="value">the event handler to review</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.BindableBase.OnPropertyChanged(System.String)">
            <summary>
            Call this method to raise the PropertyChanged event for a specific property.
            </summary>
            <param name="propertyName">Name of the property that has changed.</param>
            <remarks>
            This method may be called by properties in the business  class to indicate the change in a specific property.
            </remarks>
        </member>
        <member name="M:A5Soft.CARMA.Domain.BindableBase.OnPropertiesChanged(System.String[])">
            <summary>
            Call this method to raise the PropertyChanged event for the properties specified.
            </summary>
            <param name="propertyNames">Names of the properties that has changed.</param>
            <remarks>
            This method may be called by methods in the business class to indicate the change in multiple properties.
            </remarks>
        </member>
        <member name="M:A5Soft.CARMA.Domain.BindableBase.OnUnknownPropertyChanged">
            <summary>
            Call this method to raise the PropertyChanged event for all object properties.
            </summary>
            <remarks>
            This method is automatically called by MarkDirty. It actually raises PropertyChanged for an empty string,
            which tells data binding to refresh all properties.
            </remarks>
        </member>
        <member name="E:A5Soft.CARMA.Domain.BindableBase.PropertyChanging">
            <summary>
            Implements a serialization-safe PropertyChanging event.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.BindableBase.OnUnknownPropertyChanging">
            <summary>
            Call this method to raise the PropertyChanging event for all object properties.
            </summary>
            <remarks>
            This method is automatically called by MarkDirty. It actually raises PropertyChanging for an empty string,
            which tells data binding to refresh all properties.
            </remarks>
        </member>
        <member name="M:A5Soft.CARMA.Domain.BindableBase.OnPropertyChanging(System.String)">
            <summary>
            Call this method to raise the PropertyChanging event for a specific property.
            </summary>
            <param name="propertyName">Name of the property that has Changing.</param>
            <remarks>
            This method may be called by properties in the business class to indicate the change in a specific property.
            </remarks>
        </member>
        <member name="M:A5Soft.CARMA.Domain.BindableBase.OnPropertiesChanging(System.String[])">
            <summary>
            Call this method to raise the PropertyChanging event for the properties specified.
            </summary>
            <param name="propertyNames">Names of the properties that has Changing.</param>
            <remarks>
            This method may be called by methods in the business class to indicate the change in multiple properties.
            </remarks>
        </member>
        <member name="M:A5Soft.CARMA.Domain.BindableBase.ShouldHandlerSerialize(System.ComponentModel.PropertyChangingEventHandler)">
            <summary>
            Override this method to change the default logic for determining 
            if the event handler should be serialized
            </summary>
            <param name="value">the event handler to review</param>
            <returns></returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.BindableBase.SuspendBindingsInt">
            <summary>
            apply with using pattern to temporally disable binding events
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.BindableBase.SuspendBindingsInt.#ctor(A5Soft.CARMA.Domain.BindableBase)">
            <summary>
            apply with using pattern to temporally disable binding events 
            </summary>
            <param name="forDomainObject">a domain object to disable the binding events for</param>
        </member>
        <member name="T:A5Soft.CARMA.Domain.BindingMode">
            <summary>
            Describes binding events raising mode.
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Domain.BindingMode.WinForms">
            <summary>
            Binding events mode adapted to WinForms applications.
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Domain.BindingMode.Wpf">
            <summary>
            Binding events mode adapted to WPF applications.
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Domain.BuildConfiguration">
            <summary>
            Application build configurations type (client/server).
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Domain.BuildConfiguration.Client">
            <summary>
            service implementation should only be injected for client app
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Domain.BuildConfiguration.Server">
            <summary>
            service implementation should only be injected for server app
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Domain.BuildConfiguration.Any">
            <summary>
            service implementation should be injected for any app build configuration
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.ChildChangedEventArgs.ChildObject">
            <summary>
            Gets a reference to the changed child object.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.ChildChangedEventArgs.PropertyChangedArgs">
            <summary>
            Gets the PropertyChangedEventArgs object from the  child's PropertyChanged event, if the child is
            not a collection or list.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.ChildChangedEventArgs.CollectionChangedArgs">
            <summary>
            Gets the NotifyCollectionChangedEventArgs object from the  child's CollectionChanged event,
            if the child is an ObservableCollection.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.ChildChangedEventArgs.ListChangedArgs">
            <summary>
            Gets the ListChangedEventArgs object from the child's ListChanged event, if the child is a
            collection or list.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.ChildChangedEventArgs.#ctor(System.Object,System.ComponentModel.PropertyChangedEventArgs,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="childObject">Reference to the child object that was changed.</param>
            <param name="listArgs">ListChangedEventArgs object or null.</param>
            <param name="propertyArgs">PropertyChangedEventArgs object or null.</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.ChildChangedEventArgs.#ctor(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="childObject">Reference to the child object that was changed.</param>
            <param name="propertyArgs">PropertyChangedEventArgs object or null.</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.ChildChangedEventArgs.#ctor(System.Object,System.ComponentModel.PropertyChangedEventArgs,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="childObject">Reference to the child object that was changed.</param>
            <param name="listArgs">ListChangedEventArgs object or null.</param>
            <param name="propertyArgs">PropertyChangedEventArgs object or null.</param>
        </member>
        <member name="T:A5Soft.CARMA.Domain.DefaultChildFactory`1">
            <summary>
            a default implementation for <see cref="T:A5Soft.CARMA.Domain.IChildFactory`1"/> that uses either constructor with a
            <see cref="T:A5Soft.CARMA.Domain.Rules.IValidationEngineProvider"/> or a parameterless constructor.
            </summary>
            <typeparam name="TChild"></typeparam>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DefaultChildFactory`1.#ctor">
            <summary>
            Creates a new instance of child factory.
            </summary>
            <exception cref="T:System.InvalidOperationException">if TChild has neither IValidationEngineProvider nor empty constructor</exception>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DefaultChildFactory`1.CreateNew(A5Soft.CARMA.Domain.IDomainObject,A5Soft.CARMA.Domain.Rules.IValidationEngineProvider)">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.IChildFactory`1.CreateNew(A5Soft.CARMA.Domain.IDomainObject,A5Soft.CARMA.Domain.Rules.IValidationEngineProvider)"/>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DefaultChildFactory`1.NewOrNull">
            <summary>
            if TC has either IValidationEngineProvider or empty constructor returns
            a new <see cref="T:A5Soft.CARMA.Domain.IChildFactory`1"/> instance; otherwise returns null
            </summary>
            <typeparam name="TC">a type of children to create a factory for</typeparam>
        </member>
        <member name="T:A5Soft.CARMA.Domain.DefaultServiceImplementationAttribute">
            <summary>
            Used to designate a default (remote) service or use case (interface) implementation
            that should be added to IoC container.
            </summary>  
        </member>
        <member name="M:A5Soft.CARMA.Domain.DefaultServiceImplementationAttribute.#ctor(System.Type,A5Soft.CARMA.Domain.BuildConfiguration)">
            <summary>
            add the attribute
            </summary>
            <param name="serviceInterfaceType">a type of the service interface implemented by the class</param>
            <param name="forBuildConfiguration">a configuration of the app build (client/server/any)
            that the implementation is meant for</param>
        </member>
        <member name="P:A5Soft.CARMA.Domain.DefaultServiceImplementationAttribute.ServiceInterfaceType">
            <summary>
            a type of the service interface implemented by the class
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.DefaultServiceImplementationAttribute.ForBuildConfiguration">
            <summary>
            a configuration of the app build (client/server/any) that the implementation is meant for
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DefaultServiceImplementationAttribute.GetServiceLifetime(System.Type)">
            <summary>
            Gets a service life time.
            </summary>
            <param name="implementation">a type of the service interface implementation</param>
            <exception cref="T:System.ArgumentNullException">on null <paramref name="implementation"/></exception>
            <exception cref="T:System.InvalidOperationException">if the service interface is not marked as a service</exception>
        </member>
        <member name="T:A5Soft.CARMA.Domain.DomainBindingList`1">
            <summary>
            This is the base class from which most business collections or lists will be derived.
            </summary>
            <typeparam name="TChild">Type of item contained in list.</typeparam>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.#ctor(A5Soft.CARMA.Domain.Rules.IValidationEngineProvider)">
            <summary>
            Creates a parent instance of the object.
            </summary>
            <param name="validationEngineProvider">Validation engine to use for child items.</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.#ctor(A5Soft.CARMA.Domain.IDomainObject,System.String,A5Soft.CARMA.Domain.Rules.IValidationEngineProvider)">
            <summary>
            Creates an instance of the object as a child of parent domain object.
            </summary>
            <param name="parent">a parent of the list</param>
            <param name="propertyName">a name of the parent entity property for the list</param>
            <param name="validationEngineProvider">Validation engine to use for child items.</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.#ctor(A5Soft.CARMA.Domain.DomainBindingList{`0},A5Soft.CARMA.Domain.IDomainObject,System.Func{`0,`0})">
            <summary>
            Creates a copy of the list.
            </summary>
            <param name="listToCopy">a list to copy</param>
            <param name="newParent">a (new) parent for the new list</param>
            <param name="copyChildMethod">a method to copy children</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.Initialize">
            <summary>
            Override this method to set up event handlers so user
            code in a partial class can respond to events raised by
            generated code.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.SetValidationEngine(A5Soft.CARMA.Domain.Rules.IValidationEngineProvider)">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.ITrackState.SetValidationEngine(A5Soft.CARMA.Domain.Rules.IValidationEngineProvider)" />
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainBindingList`1.A5Soft#CARMA#Domain#ITrackState#IsSelfDirty">
            <summary>
            Gets a value indicating whether this list or any child item has been changed.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainBindingList`1.IsDirty">
            <summary>
            Gets a value indicating whether this list or any child item has been changed.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainBindingList`1.A5Soft#CARMA#Domain#ITrackState#SelfContainsNewData">
            <summary>
            Returns true if any item has been added to the list or deleted from the list.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainBindingList`1.ContainsNewData">
            <summary>
            Returns true if any item has been added to the list or deleted from the list.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainBindingList`1.IsValid">
            <summary>
            Gets a value indicating whether all of the child items are in a valid state
            (have no broken validation rules).
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainBindingList`1.HasWarnings">
            <summary>
            Returns true if any child item has any warning level broken rules.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainBindingList`1.IsSavable">
            <summary>
            Returns true if this list is both dirty and valid.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.CheckRules(System.Boolean)">
            <summary>
            Forces check of all the business rules for all the child items in the list.
            </summary>
            <param name="checkRulesForChildren">whether to invoke CheckRules method
            on children of the items in the list</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.GetBrokenRulesTree(System.Boolean)">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.ITrackState.GetBrokenRulesTree(System.Boolean)" />
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainBindingList`1.NotifyPropertyChangedEnabled">
            <summary>
            Enables or disables INotifyPropertyChanged interface for the child instances.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainBindingList`1.NotifyPropertyChangingEnabled">
            <summary>
            Enables or disables INotifyPropertyChanging interface for the child instances.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainBindingList`1.BindingMode">
            <summary>
            Gets of sets a binding mode to adapt to a particular GUI framework.
            E.g. for WinForms binding schema there should be only one PropertyChanged event
            raised per range of changed properties, while for WPF binding schema an event per
            each property in range should be raised.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainBindingList`1.DeletedList">
            <summary>
            A collection containing all child objects marked for deletion.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.ContainsDeleted(`0)">
            <summary>
            Returns true if the internal deleted list contains the specified child object.
            </summary>
            <param name="item">Child object to check.</param>
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainBindingList`1.ChildFactory">
            <summary>
            Set a child factory in order to enable dynamic adding of new items (<see cref="M:A5Soft.CARMA.Domain.DomainBindingList`1.AddNewCore"/> implementation by injection).
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.CreateNewChild">
            <summary>
            Override this method to create a new child instance that is added to the collection. 
            </summary>
        </member>
        <member name="E:A5Soft.CARMA.Domain.DomainBindingList`1.RemovingItem">
            <summary>
            Implements a serialization-safe RemovingItem event.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.OnRemovingItem(`0)">
            <summary>
            Raise the RemovingItem event.
            </summary>
            <param name="removedItem">A reference to the item that is being removed.
            </param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raise the CollectionChanged event.
            </summary>
            <param name="args">event parameters</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.RemoveItem(System.Int32)">
            <summary>
            Remove the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.
            </param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.MoveItemUp(`0)">
            <summary>
            Moves an item up in the list, i.e. new index = old index - 1.
            </summary>
            <param name="item">an item to move</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.MoveItemDown(`0)">
            <summary>
            Moves an item down in the list, i.e. new index = old index + 1.
            </summary>
            <param name="item">an item to move</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.ClearItems">
            <summary>
            Clears the collection, moving all active items to the deleted list.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.AddRange(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Add a range of items to the list.
            </summary>
            <param name="range">List of items to add.</param>
            <param name="raiseResetEvent">whether to raise ListChangedType.Reset event for
            the entire range instead of ListChangedType.ItemAdded events for each item added.</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.InsertItem(System.Int32,`0)">
            <summary>
            Invoked when an item is inserted into the list.
            </summary>
            <param name="index">Index of new item.</param>
            <param name="item">Reference to new item.</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the item at the specified index with
            the specified item, first moving the original
            item to the deleted list.
            </summary>
            <param name="index">The zero-based index of the item to replace.</param>
            <param name="item">
            The new value for the item at the specified index. 
            The value can be null for reference types.
            </param>
            <remarks></remarks>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.Merge``1(System.Collections.Generic.IList{``0},System.Action{`0,``0})">
            <summary>
            merges children data from an untrusted source into the list
            </summary>
            <typeparam name="TIChild">type of child item domain interface</typeparam>
            <param name="childrenByInterface">children data from an untrusted source</param>
            <param name="mergeChild">method to merge untrusted data into a child item</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.OnAddEventHooks(`0)">
            <summary>
            Method invoked when events are hooked for a child
            object.
            </summary>
            <param name="item">Reference to child object.</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.OnRemoveEventHooks(`0)">
            <summary>
            Method invoked when events are unhooked for a child object.
            </summary>
            <param name="item">Reference to child object.</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.OnDeserialized">
            <summary>
            This method is called on a newly deserialized object after deserialization is complete.
            </summary>
        </member>
        <member name="E:A5Soft.CARMA.Domain.DomainBindingList`1.ChildChanged">
            <summary>
            Event raised when a child object has been changed.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.OnChildChanged(A5Soft.CARMA.Domain.ChildChangedEventArgs)">
            <summary>
            Raises the ChildChanged event, indicating that a child object has been changed.
            </summary>
            <param name="e">ChildChangedEventArgs object. </param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.RaiseChildChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Creates a ChildChangedEventArgs and raises the event.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.Child_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles any PropertyChanged event from a child object and echoes it up as a ChildChanged event.
            </summary>
            <param name="sender">Object that raised the event.</param>
            <param name="e">Property changed args.</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.Child_Changed(System.Object,A5Soft.CARMA.Domain.ChildChangedEventArgs)">
            <summary>
            Handles any ChildChanged event from a child object and echoes it up as a ChildChanged event.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainBindingList`1.Parent">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.IChild.Parent" />
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainBindingList`1.IsChild">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.ITrackState.IsChild" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.SetParent(A5Soft.CARMA.Domain.IDomainObject,System.String)">
            <summary>
            Used by BusinessListBase as a child object is created to tell the child object about its parent.
            </summary>
            <param name="parent">A reference to the parent collection object.</param>
            <param name="parentPropertyName">a name of the parent property for the list</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainBindingList`1.MarkAsChild">
            <summary>
            Marks the object as being a child object.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainBindingList`1.SuppressListChangedEvents">
            <summary>
            Use this object to suppress ListChangedEvents for an entire code block.
            May be nested in multiple levels for the same object.
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Domain.DomainBindingList`1.SuppressListChangedEventsClass`1">
            <summary>
            Handles the suppressing of raising ChangedEvents when altering the content of an ObservableBindingList.
            Will be instantiated by a factory property on the ObservableBindingList implementation.
            </summary>
            <typeparam name="TC">The type of the C.</typeparam>
        </member>
        <member name="T:A5Soft.CARMA.Domain.DomainEntity`1">
            <summary>
            A base class for all domain entities that have an identity (i.e. more than one entity
            of the type exists in the domain) yet have no auditing functionality.
            </summary>
            <typeparam name="T">a type of the domain entity implementation</typeparam> 
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainEntity`1.#ctor(A5Soft.CARMA.Domain.Rules.IValidationEngineProvider)">
            <summary>
            Creates a new instance of the object.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainEntity`1.#ctor(A5Soft.CARMA.Domain.DomainEntityIdentity{`0},A5Soft.CARMA.Domain.Rules.IValidationEngineProvider,System.Boolean)">
            <summary>
            Creates a new instance of the object.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainEntity`1.#ctor(`0)">
            <summary>
            Creates a copy of the domain entity.
            </summary>
            <param name="entityToCopy">an entity to copy</param>
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainEntity`1.Id">
            <summary>
            An id of the domain entity.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainEntity`1.IsNew">
            <summary>
            Returns true if this is a new object, false if it is a pre-existing object.
            </summary>
            <remarks>
            An object is considered to be new if its primary identifying (key) value 
            doesn't correspond to data in the database. In other words, if the data values
            in this particular object have not yet been saved to the database
            the object is considered to be new. Likewise, if the object's data has been deleted
            from the database then the object is considered to be new.
            </remarks>
            <returns>A value indicating if this object is new.</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainEntity`1.MarkNew">
            <summary>
            Marks the object as being a new object. This also marks the object
            as being dirty and ensures that it is not marked for deletion.
            </summary>
            <remarks>
            If you override this method, make sure to call the base
            implementation after executing your new code.
            </remarks>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainEntity`1.MarkOld(A5Soft.CARMA.Domain.DomainEntityIdentity{`0})">
            <summary>
            Marks the object as being an old (not new) object. This also
            marks the object as being unchanged (not dirty).
            </summary>
            <remarks>
            <para>
            You should call this method in the implementation of
            DataPortal_Fetch to indicate that an existing object has been
            successfully retrieved from the database.
            </para><para>
            You should call this method in the implementation of 
            DataPortal_Update to indicate that a new object has been successfully
            inserted into the database.
            </para><para>
            If you override this method, make sure to call the base
            implementation after executing your new code.
            </para>
            </remarks>
        </member>
        <member name="T:A5Soft.CARMA.Domain.DomainEntityIdentity`1">
            <summary>
            Represents domain entity instance's unique identity value within the domain entity graph.
            </summary>
            <typeparam name="T">a type of the domain entity that is identified</typeparam>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainEntityIdentity`1.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:A5Soft.CARMA.Domain.DomainEntityIdentity`1"/>.
            </summary>
            <param name="key">a (primary) key that identifies the domain entity instance</param>
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainEntityIdentity`1.Key">
            <summary>
            A (primary) key that identifies the domain entity instance.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainEntityIdentity`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainEntityIdentity`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainEntityIdentity`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:A5Soft.CARMA.Domain.DomainObject`1">
            <summary>
            a base class for all domain objects that needs to track their state
            </summary>
            <typeparam name="T">type of the domain entity implementation</typeparam>
            <remarks>inherit from this class for entities that have no identity
            (only one instance per domain, e.g. some common settings) and no auditing functionality</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.#ctor(A5Soft.CARMA.Domain.Rules.IValidationEngineProvider)">
            <summary>
            Creates a new instance of the object.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.#ctor(`0)">
            <summary>
            Creates a copy of the domain object.
            </summary>
            <param name="objectToCopy">a domain object to copy</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.Initialize">
            <summary>
            Override this method to set up event handlers so user code in a partial class
            can respond to events raised by generated code.
            If child objects are initialized, invoke RegisterChildValue method.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetValidationEngine(A5Soft.CARMA.Domain.Rules.IValidationEngineProvider)">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.ITrackState.SetValidationEngine(A5Soft.CARMA.Domain.Rules.IValidationEngineProvider)" />
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainObject`1.IsDeleted">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.ITrackState.IsDeleted" />
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainObject`1.IsDirty">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.ITrackState.IsDirty" />
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainObject`1.IsSelfDirty">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.ITrackState.IsSelfDirty" />
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainObject`1.ContainsNewData">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.ITrackState.ContainsNewData" />
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainObject`1.SelfContainsNewData">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.ITrackState.SelfContainsNewData" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.MarkNew">
            <summary>
            Marks the object as being a new object. This also marks the object
            as being dirty and ensures that it is not marked for deletion.
            </summary>
            <remarks>
            If you override this method, make sure to call the base
            implementation after executing your new code.
            </remarks>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.MarkDeleted">
            <summary>
            Marks an object for deletion. This also marks the object as being dirty.
            </summary>
            <remarks>
            You should call this method in your business logic in the  case that you want
            to have the object deleted when it is saved to the database.
            </remarks>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.MarkDirty">
            <summary>
            Marks an object as being dirty, or changed.
            </summary>
            <remarks>
            <para>
            You should call this method in your business logic any time
            the object's internal data changes. 
            </para><para>
            Marking an object as dirty does two things. First it ensures  that the object will be properly saved.
            Second, it causes to tell Windows Forms data binding that the object's data has changed
            so any bound controls will update to reflect the new values.
            </para>
            </remarks>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.MarkDirty(System.Boolean)">
            <summary>
            Marks an object as being dirty, or changed.
            </summary>
            <param name="suppressEvent">
            true to supress the PropertyChanged event that is otherwise
            raised to indicate that the object's state has changed.
            </param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.PropertyHasChanged(System.String)">
            <summary>
            Performs processing required when a property has changed.
            </summary>
            <param name="propertyName">Property that has changed.</param>
            <remarks>
            This method calls CheckRules(propertyName), MarkDirty and  OnPropertyChanged(propertyName).
            MarkDirty is called such that no event is raised for IsDirty, so only the specific
            property changed event for the current property is raised.
            </remarks>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.PropertiesHaveChanged(System.String[])">
            <summary>
            Performs processing required when a range of properties have changed.
            </summary>
            <param name="propertyNames">Property that has changed.</param>
            <remarks>
            This method calls MarkDirty once, CheckRules(propertyName) for every property
            and OnPropertiesChanged(affectedProps) once for all affected properties.
            MarkDirty is called such that no event is raised for IsDirty, so only the specific
            property changed event for the current property is raised.
            </remarks>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.CheckPropertyRules(System.String[])">
            <summary>
            Check rules for the property and notifies UI of properties that may have changed.
            </summary>
            <param name="propertyNames">The properties to check the rules for.</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.CheckObjectRules">
            <summary>
            Check object rules and notifies UI of properties that may have changed. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.CheckRules(System.Boolean)">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.ITrackState.CheckRules(System.Boolean)" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.MarkClean">
            <summary>
            Forces the object's IsDirty and ContainsNewData flags to false.
            </summary>
            <remarks>
            This method is normally called automatically and is not intended to be called manually.
            </remarks>
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainObject`1.IsSavable">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.ITrackState.IsSavable" />
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainObject`1.IsValid">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.ITrackState.IsValid" />
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainObject`1.IsSelfValid">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.ITrackState.IsSelfValid" />
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainObject`1.HasWarnings">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.ITrackState.HasWarnings" />
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainObject`1.HasSelfWarnings">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.ITrackState.HasSelfWarnings" />
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainObject`1.BrokenRules">
            <summary>
            Gets a collection of broken rules for the domain entity.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainObject`1.LockedProperties">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.ITrackState.LockedProperties" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.GetBrokenRulesTree(System.Boolean)">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.ITrackState.GetBrokenRulesTree(System.Boolean)" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.CanWriteProperty(System.String)">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.ITrackState.CanWriteProperty(System.String)" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SuspendValidation">
            <summary>
            apply with using pattern to temporally disable validation
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.Delete">
            <summary>
            Marks the object for deletion. The object will be deleted as part of the
            next save operation.
            </summary>
            <remarks>
            This method is part of the support for deferred deletion, where an object
            can be marked for deletion, but isn't actually deleted until the object
            is saved to the database. This method is called by the UI developer to
            mark the object for deletion.
            </remarks>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.DeleteChild">
            <summary>
            Called by a parent object to mark the child for deferred deletion.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainObject`1.Parent">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.IChild.Parent" />
        </member>
        <member name="P:A5Soft.CARMA.Domain.DomainObject`1.IsChild">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.ITrackState.IsChild" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetParent(A5Soft.CARMA.Domain.IDomainObject)">
            <summary>
            Used by BusinessListBase as a child object is created to tell the child object about its parent.
            </summary>
            <param name="parent">A reference to the parent collection object.</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.A5Soft#CARMA#Domain#IChildInternal#SetParent(A5Soft.CARMA.Domain.IDomainObject,System.String)">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.IChildInternal.SetParent(A5Soft.CARMA.Domain.IDomainObject,System.String)" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.MarkAsChild">
            <summary>
            Marks the object as being a child object.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetChildField``1(System.String,``0@,``0,System.Boolean)">
            <summary>
            Child field setter that shall be used to set child object fields (init or update)
            of the following types:
            1. BindableBase;
            2. ITrackState;
            3. Any other class type if its state should be tracked by hooking into its events and
            it implements INotifyPropertyChanging, NotifyPropertyChanged,  IBindingList or INotifyCollectionChanged.
            </summary>
            <typeparam name="TValue">a type of the child object</typeparam>
            <param name="fieldName">a name of the field that the property value is stored by</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="addEventHooks">whether to hook into the child object events</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.RegisterChildValue``1(``0,System.String,System.Boolean)">
            <summary>
            Registers a new (incl. initial) value of a child field.  
            </summary>
            <typeparam name="TC"></typeparam>
            <param name="childValue">a new (incl. initial) value of a child field</param>
            <param name="fieldName">a name of the field that the child value is stored by</param>
            <param name="withEvents">whether to hook into the child object events</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.UnRegisterChildValue``1(``0,System.String)">
            <summary>
            Unregisters an old value of a child field.
            Method shall be invoked before the child value is updated for those fields
            that were registered by RegisterChildValue method.  
            </summary>
            <typeparam name="TC"></typeparam>
            <param name="childValue">an old value of a child field (before it is updated)</param>
            <param name="fieldName">a name of the field that the child value is stored by</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.GetStatefulChildren">
            <summary>
            Gets an array of children that implements ITrackState and have their value set. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.AnyStatefulChildren(System.Func{A5Soft.CARMA.Domain.ITrackState,System.Boolean})">
            <summary>
            Gets a value indicating that any child, that implements ITrackState, has state defined by the predicate.
            </summary>
            <param name="predicate">a child state to find</param>
            <returns>a value indicating that any child, that implements ITrackState, has state defined by the predicate.</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.AddEventHooks``1(``0,System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="child">Child object.</param>
            <param name="fieldName">a name of a (private) field that manages child value</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.OnAddEventHooks``1(``0,System.String)">
            <summary>
            Hook child object events.
            </summary>
            <param name="child">Child object.</param>
            <param name="fieldName">a name of a (private) field that manages child value</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.RemoveEventHooks``1(``0,System.String)">
            <summary>
            For internal use only.
            </summary>
            <param name="child">Child object.</param>
            <param name="fieldName">a name of a (private) field that manages child value</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.OnRemoveEventHooks``1(``0,System.String)">
            <summary>
            Unhook child object events.
            </summary>
            <param name="child">Child object.</param>
            <param name="fieldName">a name of a (private) field that manages child value</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.OnNotifyPropertyChangingEnabledChanged">
            <summary>
            Enables or disables child binding support for INotifyPropertyChanging
            when this setting is changed for this instance of domain entity.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.OnBindingModeChanged">
            <summary>
            Enables or disables winforms binding support for INotifyPropertyChanged
            when this setting is changed for this instance of domain entity.
            (one event per property group)
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.OnNotifyPropertyChangedEnabledChanged">
            <summary>
            Enables or disables child binding support for INotifyPropertyChanged
            when this setting is changed for this instance of domain entity.
            </summary>
            <remarks>Cannot turn of INotifyPropertyChanged support for children
            that are hooked on this instance as that would likely impede internal functioning,
            e.g. loosing track of invoice items renders impossible to keep subtotals.</remarks>
        </member>
        <member name="E:A5Soft.CARMA.Domain.DomainObject`1.ChildChanged">
            <summary>
            Event raised when a child object has been changed.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.OnChildChanged(A5Soft.CARMA.Domain.ChildChangedEventArgs)">
            <summary>
            Raises the ChildChanged event, indicating that a child object has been changed.
            </summary>
            <param name="e">ChildChangedEventArgs object.</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.ChildHasChanged(System.String,System.Object,A5Soft.CARMA.Domain.ChildChangedEventArgs)">
            <summary>
            Bubbles up child change events. Override it to handle child changes.
            Call base at first, if you want to bubble events before your code executes and vice versa.
            </summary>
            <param name="fieldName">a name of the field (or property) that has changed</param>
            <param name="sender">a (child) object that raised the event</param>
            <param name="e">change event arguments</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method is called on a newly deserialized object after deserialization is complete.
            </summary>
            <param name="context">Serialization context object.</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetChildPropertyValue``1(System.String,System.String,``0@,``0,System.Boolean,System.Action)">
            <summary>
            Property setter that shall be used to set child object properties of the following types:
            1. BindableBase;
            2. ITrackState;
            3. Any other class type if its state should be tracked by hooking into its events and
            it implements INotifyPropertyChanging, NotifyPropertyChanged, IBindingList or INotifyCollectionChanged.
            </summary>
            <typeparam name="TValue">type of the child object</typeparam>
            <param name="propertyName">a name of the property</param>
            <param name="fieldName">a name of the field that the property value is stored by</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="addEventHooks">whether to hook into the child object events</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are not the same instance (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. UnRegisterChildValue for old value;
            5. Updates property value to the new one;
            6. RegisterChildValue for new value;
            7. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetLookupPropertyValue``2(System.String,``0@,``0,System.Action)">
            <summary>
            Property setter that shall be used to set ILookup properties.
            </summary>
            <typeparam name="TValue">type of the ILookup implementation</typeparam>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same, i.e. reference the same domain entity (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.String@,System.String,System.Boolean,System.Boolean,System.Action)">
            <summary>
            Property setter that shall be used to set nullable decimal properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="ignoreCase">whether to ignore case when evaluating (but NOT setting) value</param>
            <param name="trimValue">whether to trim values when evaluating and setting value</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.Char@,System.Char,System.Action)">
            <summary>
            Property setter that shall be used to set char properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.Nullable{System.Char}@,System.Nullable{System.Char},System.Action)">
            <summary>
            Property setter that shall be used to set nullable char properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.Guid@,System.Guid,System.Action)">
            <summary>
            Property setter that shall be used to set Guid properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.Nullable{System.Guid}@,System.Nullable{System.Guid},System.Action)">
            <summary>
            Property setter that shall be used to set nullable Guid properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.Int32@,System.Int32,System.Action)">
            <summary>
            Property setter that shall be used to set int properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.Nullable{System.Int32}@,System.Nullable{System.Int32},System.Action)">
            <summary>
            Property setter that shall be used to set nullable int properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.UInt32@,System.UInt32,System.Action)">
            <summary>
            Property setter that shall be used to set uint properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.Nullable{System.UInt32}@,System.Nullable{System.UInt32},System.Action)">
            <summary>
            Property setter that shall be used to set nullable uint properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.Int16@,System.Int16,System.Action)">
            <summary>
            Property setter that shall be used to set int16 properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.Nullable{System.Int16}@,System.Nullable{System.Int16},System.Action)">
            <summary>
            Property setter that shall be used to set nullable int16 properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.UInt16@,System.UInt16,System.Action)">
            <summary>
            Property setter that shall be used to set ushort properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.Nullable{System.UInt16}@,System.Nullable{System.UInt16},System.Action)">
            <summary>
            Property setter that shall be used to set nullable ushort properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.Byte@,System.Byte,System.Action)">
            <summary>
            Property setter that shall be used to set byte properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.Nullable{System.Byte}@,System.Nullable{System.Byte},System.Action)">
            <summary>
            Property setter that shall be used to set nullable byte properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.SByte@,System.SByte,System.Action)">
            <summary>
            Property setter that shall be used to set sbyte properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.Nullable{System.SByte}@,System.Nullable{System.SByte},System.Action)">
            <summary>
            Property setter that shall be used to set nullable sbyte properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.Int64@,System.Int64,System.Action)">
            <summary>
            Property setter that shall be used to set int64 properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.Nullable{System.Int64}@,System.Nullable{System.Int64},System.Action)">
            <summary>
            Property setter that shall be used to set nullable int64 properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.UInt64@,System.UInt64,System.Action)">
            <summary>
            Property setter that shall be used to set ulong properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.Nullable{System.UInt64}@,System.Nullable{System.UInt64},System.Action)">
            <summary>
            Property setter that shall be used to set nullable ulong properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.Decimal@,System.Decimal,System.Int32,System.Action)">
            <summary>
            Property setter that shall be used to set decimal properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="digits">number of significant digits to evaluate and set (using AccountingRound extension)</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.Nullable{System.Decimal}@,System.Nullable{System.Decimal},System.Int32,System.Action)">
            <summary>
            Property setter that shall be used to set nullable decimal properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="digits">number of significant digits to evaluate and set (using AccountingRound extension)</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.Double@,System.Double,System.Int32,System.Action)">
            <summary>
            Property setter that shall be used to set double properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="digits">number of significant digits to evaluate and set (using AccountingRound extension)</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.Nullable{System.Double}@,System.Nullable{System.Double},System.Int32,System.Action)">
            <summary>
            Property setter that shall be used to set nullable double properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="digits">number of significant digits to evaluate and set (using AccountingRound extension)</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.DateTime@,System.DateTime,System.Boolean,System.Action)">
            <summary>
            Property setter that shall be used to set DateTime properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="ignoreTime">whether to trim time part when evaluating and setting value</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.Nullable{System.DateTime}@,System.Nullable{System.DateTime},System.Boolean,System.Action)">
            <summary>
            Property setter that shall be used to set nullable DateTime properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="ignoreTime">whether to trim time part when evaluating and setting value</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.Boolean@,System.Boolean,System.Action)">
            <summary>
            Property setter that shall be used to set bool properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetPropertyValue(System.String,System.Nullable{System.Boolean}@,System.Nullable{System.Boolean},System.Action)">
            <summary>
            Property setter that shall be used to set nullable bool properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SetEnumPropertyValue``1(System.String,``0@,``0,System.Action)">
            <summary>
            Property setter that shall be used to set Enum properties.
            </summary>
            <param name="propertyName">a name of the property</param>
            <param name="oldValue">current field value</param>
            <param name="newValue">new field value</param>
            <param name="postProcessing">an action to be executed after the property value is set;
            if you specify the post processing action, it shall invoke PropertyHasChanged
            (or PropertiesHaveChanged)</param>
            <remarks>Does the following:
            1. Checks if the new and old values are the same (if so, returns false);
            2. Checks if the property is not locked due to the entity state (if so, raises binding event and returns false);
            3. Raises OnPropertyChanging (i.e. binding event);
            4. Updates property value to the new one;
            5. Invokes post processing action or, if it's null, raises PropertyHasChanged
            (i.e. checks rules and raises binding event).</remarks>
            <returns>true if the property has been changed, otherwise false</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.DomainObject`1.SuspendValidationInt`1">
            <summary>
            apply with using pattern to temporally disable validation
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.DomainObject`1.SuspendValidationInt`1.#ctor(`1)">
            <summary>
            apply with using pattern to temporally disable validation
            </summary>
            <param name="entity">a domain object to temporally disable validation for</param>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Extensions">
            <summary>
            Extensions for common application functionality.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Extensions.SplitCamelCase(System.String)">
            <summary>
            Returns a string split by camel case convention, e.g. TotalAmount -> Total Amount
            </summary>
            <param name="input">string to split</param>
            <returns></returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Extensions.IsNull``1(``0)">
            <summary>
            Returns a value indicating that the object (value) is null. Required due to potential operator overloadings
            that cause unpredictable behaviour of standard null == value test.
            </summary>
            <typeparam name="T">a type of the object to test</typeparam>
            <param name="value">an object to test against null</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Extensions.ReferenceEqualsTo(A5Soft.CARMA.Domain.IDomainEntityReference,A5Soft.CARMA.Domain.IDomainEntityReference)">
            <summary>
            Returns a value indicating whether the reference is to the same domain entity.
            </summary>
            <param name="reference"></param>
            <param name="referenceToCompare"></param>
            <returns>a value indicating whether the reference is to the same domain entity</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Extensions.EnsureValidIdentityFor``1(A5Soft.CARMA.Domain.DomainEntityIdentity{``0})">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if the identity specified is null.
            </summary>
            <typeparam name="T">a type of entity that is expected to be referenced</typeparam>
            <param name="id">an identity to check</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Extensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Returns true if the string value is null or empty or consists from whitespaces only.
            </summary>
            <param name="value">a string value to evaluate</param> 
        </member>
        <member name="M:A5Soft.CARMA.Domain.Extensions.ValueOrDefault``1(System.Collections.Generic.IDictionary{System.String,``0},System.String)">
            <summary>
            Gets a dictionary value by key or null, if no such key in the dictionary.
            </summary>
            <typeparam name="T">type of dictionary values</typeparam>
            <param name="dictionary">dictionary to search</param>
            <param name="key">key to find</param>
            <returns>a dictionary value by key or null, if no such key in the dictionary</returns> 
        </member>
        <member name="M:A5Soft.CARMA.Domain.Extensions.ValidatePoco``1(A5Soft.CARMA.Domain.Rules.IValidationEngineProvider,``0)">
            <summary>
            Validates a POCO value. Returns an empty collection if the value to validate is
            null or not a class or an interface.
            </summary>
            <typeparam name="T">a type of the value to validate</typeparam>
            <param name="validationEngine"></param>
            <param name="valueToValidate">value to validate</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Extensions.IsConvertableTo(System.Type,System.Type)">
            <summary>
            Gets a value indicating whether <paramref name="type"/> value can be assigned to
            <paramref name="destinationType"/> variable including implicit conversions.
            </summary>
            <param name="type"></param>
            <param name="destinationType">type to check assignability to</param>
            <returns>a value indicating whether <paramref name="type"/> value can be assigned to
            <paramref name="destinationType"/> variable including implicit conversions</returns>
            <remarks><see cref="M:System.Type.IsAssignableFrom(System.Type)"/> ignores implicit conversions</remarks>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Files.Extensions">
            <summary>
            Extension methods for handling files.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Files.Extensions.GetFileType(System.String)">
            <summary>
            Gets a type of the file for the file extension specified.
            </summary>
            <param name="fileExtension">a file extension to get a file type for</param>
            <returns>a type of the file</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Files.Extensions.GetFileMediaType(A5Soft.CARMA.Domain.Files.FileType)">
            <summary>
            Gets a file media (MIME) type.
            </summary>
            <param name="fileType">a type of the file to get the media (MIME) type for</param>
            <returns>file media (MIME) type</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Files.Extensions.GetFileExtension(A5Soft.CARMA.Domain.Files.FileType)">
            <summary>
            Gets an extension for the file of the specified type.
            </summary>
            <param name="fileType">a type of the file to get an extension for</param>
            <returns>an extension for the file (prefixed with .)</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Files.FileContent">
            <summary>
            A container class for file data and metadata.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Files.FileContent.Content">
            <summary>
            Gets a (binary) file content.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Files.FileContent.ContentType">
            <summary>
            Gets a file content MIME type as defined by IANA.
            https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Files.FileContent.FileName">
            <summary>
            Gets a name of the file.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Files.FileContent.Dispose">
            <inheritdoc />
        </member>
        <member name="T:A5Soft.CARMA.Domain.Files.FileContentType">
            <summary>
            A reference class for well known file types.
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Files.FileType">
            <summary>
            A types of files handled by the app.
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Domain.Files.FileType.Unknown">
            <summary>
            Unkown file type.
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Domain.Files.FileType.Xml">
            <summary>
            xml file
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Domain.Files.FileType.Pdf">
            <summary>
            pdf file
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Domain.Files.FileType.Doc">
            <summary>
            doc file (old word)
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Domain.Files.FileType.Docx">
            <summary>
            docx file (current word version)
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Domain.Files.FileType.Xls">
            <summary>
            xls file (old excel)
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Domain.Files.FileType.Xlsx">
            <summary>
            xlss file (current excel version)
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Domain.Files.FileType.Json">
            <summary>
            json file
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Domain.Files.FileType.Png">
            <summary>
            png image file
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Domain.Files.FileType.Tiff">
            <summary>
            tiff image file
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Domain.Files.FileType.Html">
            <summary>
            html file
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Domain.Files.FileType.Csv">
            <summary>
            csv (comma separated values) file
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Domain.Files.FileType.Rtf">
            <summary>
            rtf (rich text) file
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Domain.Files.FileType.Txt">
            <summary>
            plain text file
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Domain.Files.FileType.Zip">
            <summary>
            zip file
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Domain.Files.FileType.GZip">
            <summary>
            gzip file
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Domain.Files.FileType.Adoc">
            <summary>
            adoc file (signed document)
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Domain.IBindable">
            <summary>
            Interface implemented by bindable objects (entities and their lists)
            to ensure consistent event raising behaviour for all entities in a graph.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.IBindable.NotifyPropertyChangedEnabled">
            <summary>
            Enables or disables INotifyPropertyChanged interface for the class instance.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.IBindable.NotifyPropertyChangingEnabled">
            <summary>
            Enables or disables INotifyPropertyChanging interface for the class instance.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.IBindable.BindingMode">
            <summary>
            Gets of sets a binding mode to adapt to a particular GUI framework.
            E.g. for WinForms binding schema there should be only one PropertyChanged event
            raised per range of changed properties, while for WPF binding schema an event per
            each property in range should be raised.
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Domain.IChild">
            <summary>
            A domain object that is a child of other (parent) domain object.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.IChild.Parent">
            <summary>
            Gets a parent object if it's a child object, or null if it's a parent object.
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Domain.IChildFactory`1">
            <summary>
            Implement to enable <see cref="T:A5Soft.CARMA.Domain.DomainBindingList`1"/> to add new child items without inheritance,
            'see <see cref="P:A5Soft.CARMA.Domain.DomainBindingList`1.ChildFactory"/>.
            </summary>
            <typeparam name="TChild">a type of the child items that the factory can create</typeparam>
        </member>
        <member name="M:A5Soft.CARMA.Domain.IChildFactory`1.CreateNew(A5Soft.CARMA.Domain.IDomainObject,A5Soft.CARMA.Domain.Rules.IValidationEngineProvider)">
            <summary>
            creates a new child item
            </summary>
            <param name="parent">a parent of the list (if any)</param>
            <param name="validationEngineProvider">a validation engine provider for DI</param>
        </member>
        <member name="T:A5Soft.CARMA.Domain.IDomainEntity`1">
            <summary>
            This is the core interface implemented by all domain entity classes.
            Domain entity must have some unique identity value (primary key) that
            uniquely identifies an entity within the application database graph
            or indicates that the entity is new, not yet added to the application database graph.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.IDomainEntity`1.Id">
            <summary>
            Gets an identity object that uniquely identifies the domain entity instance
            within the application database graph or indicates that the entity is new,
            not yet added to the application database graph.
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Domain.IDomainEntityReference">
            <summary>
            Allows to compare references to domain entities. 
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.IDomainEntityReference.DomainEntityType">
            <summary>
            A type of the domain entity referenced.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.IDomainEntityReference.DomainEntityKey">
            <summary>
            A (primary) key of the domain entity referenced.
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Domain.IDomainObject">
            <summary>
            This is the core interface implemented by all domain base classes.
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Domain.ILookup`1">
            <summary>
            This is the core interface implemented by all lookup classes, i.e. rich references,
            e.g. PersonInfo instead of PersonId.
            Lookup must have some unique identity value (primary key) that
            references an entity within the application database graph.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.ILookup`1.Id">
            <summary>
            Gets an identity object that uniquely identifies the domain entity instance
            within the application database graph that is referenced by the lookup.
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Domain.INotifyChildChanged">
            <summary>
            Implemented by classes that notify when a child object has changed.
            </summary>
        </member>
        <member name="E:A5Soft.CARMA.Domain.INotifyChildChanged.ChildChanged">
            <summary>
            Event indicating that a child object has changed.
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Domain.IPersisted">
            <summary>
            Describes domain objects that are persisted,
            i.e. could be either new (not yet persisted) or old (not new, already persisted).
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.IPersisted.IsNew">
            <summary>
            Returns true if this is a new object, false if it is a pre-existing object.
            </summary>
            <remarks>
            An object is considered to be new if its primary identifying (key) value 
            doesn't correspond to data in the database. In other words, 
            if the data values in this particular object have not yet been saved to the database
            the object is considered to be new. Likewise, if the object's data has been deleted from the database
            then the object is considered to be new.
            </remarks>
            <returns>A value indicating if this object is new.</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.ITrackState">
            <summary>
            Defines the common properties required by objects that track their own state.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.ITrackState.IsValid">
            <summary>
            Returns true if the object and its child objects are currently valid, 
            false if the object or any of its child objects have broken rules or are otherwise invalid.
            </summary>
            <remarks>
            <para>
            By default this property relies on the underling ValidationRules
            object to track whether any business rules are currently broken for this object.
            </para><para>
            You can override this property to provide more sophisticated
            implementations of the behavior. 
            </para>
            </remarks>
            <returns>A value indicating if the object is currently valid.</returns>
        </member>
        <member name="P:A5Soft.CARMA.Domain.ITrackState.IsSelfValid">
            <summary>
            Returns true if the object is currently valid, false if the
            object has broken rules or is otherwise invalid.
            </summary>
            <remarks>
            <para>
            By default this property relies on the underling ValidationRules
            object to track whether any business rules are currently broken for this object.
            </para><para>
            You can override this property to provide more sophisticated
            implementations of the behavior.
            </para>
            </remarks>
            <returns>A value indicating if the object is currently valid.</returns>
        </member>
        <member name="P:A5Soft.CARMA.Domain.ITrackState.HasWarnings">
            <summary>
            Returns true if the object and its child objects have warning level broken rules
            (that do not render entity invalid, yet it's sensible to ask user for confirmation), 
            false if the object or any of its child objects have no warning level broken rules.
            </summary>
            <remarks>
            <para>
            By default this property relies on the underling ValidationRules
            object to track whether any business rules are currently broken for this object.
            </para><para>
            You can override this property to provide more sophisticated
            implementations of the behavior. 
            </para>
            </remarks>
            <returns>A value indicating if the object or its child objects have warning level broken rules</returns>
        </member>
        <member name="P:A5Soft.CARMA.Domain.ITrackState.HasSelfWarnings">
            <summary>
            Returns true if the object has warning level broken rules (that do not render entity invalid,
            yet it's sensible to ask user for confirmation), false if the object has no warning level broken rules.
            </summary>
            <remarks>
            <para>
            By default this property relies on the underling ValidationRules
            object to track whether any business rules are currently broken for this object.
            </para><para>
            You can override this property to provide more sophisticated
            implementations of the behavior.
            </para>
            </remarks>
            <returns>A value indicating if the object has warning level broken rules</returns>
        </member>
        <member name="P:A5Soft.CARMA.Domain.ITrackState.IsDirty">
            <summary>
            Returns true if this object's data, or any of its fields or child objects data, 
            has been changed.
            </summary>
            <remarks>
            <para>
            When an object's data is changed, application note of that change
            and considers the object to be 'dirty' or changed. This value is used to
            optimize data updates, since an unchanged object does not need to be
            updated into the database. All new objects are considered dirty. All objects
            marked for deletion are considered dirty.
            </para><para>
            Once an object's data has been saved to the database (inserted or updated)
            the dirty flag is cleared and the object is considered unchanged. Objects
            newly loaded from the database are also considered unchanged.
            </para>
            </remarks>
            <returns>A value indicating if this object's data has been changed.</returns>
        </member>
        <member name="P:A5Soft.CARMA.Domain.ITrackState.IsSelfDirty">
            <summary>
            Returns true if this object's data has been changed.
            </summary>
            <remarks>
            <para>
            When an object's data is changed, application makes note of that change
            and considers the object to be 'dirty' or changed. This value is used to
            optimize data updates, since an unchanged object does not need to be
            updated into the database. All new objects are considered dirty. All objects
            marked for deletion are considered dirty.
            </para><para>
            Once an object's data has been saved to the database (inserted or updated)
            the dirty flag is cleared and the object is considered unchanged. Objects
            newly loaded from the database are also considered unchanged.
            </para>
            </remarks>
            <returns>A value indicating if this object's data has been changed.</returns>
        </member>
        <member name="P:A5Soft.CARMA.Domain.ITrackState.ContainsNewData">
            <summary>
            Returns true if this object's data, or any of its child objects data, 
            has been changed.
            </summary>
            <remarks>
            In contrast to IsDirty tracks data changes for both new and old entities,
            i.e. new entity is always considered dirty, yet no data has been changed.
            </remarks>
            <returns>A value indicating if this object's or any of its child objects data has been changed.</returns>
        </member>
        <member name="P:A5Soft.CARMA.Domain.ITrackState.SelfContainsNewData">
            <summary>
            Returns true if this object's data has been changed.
            </summary>
            <remarks>
            In contrast to IsDirty tracks data changes for both new and old entities,
            i.e. new entity is always considered dirty, yet no data has been changed.
            </remarks>
            <returns>A value indicating if this object's data has been changed.</returns>
        </member>
        <member name="P:A5Soft.CARMA.Domain.ITrackState.IsDeleted">
            <summary>
            Returns true if this object is marked for deletion.
            </summary>
            <remarks>
            Application supports both immediate and deferred deletion of objects. This
            property is part of the support for deferred deletion, where an object
            can be marked for deletion, but isn't actually deleted until the object
            is saved to the database. This property indicates whether or not the
            current object has been marked for deletion. If it is true
            , the object will be deleted when it is saved to the database,
            otherwise it will be inserted or updated by the save operation.
            </remarks>
            <returns>A value indicating if this object is marked for deletion.</returns>
        </member>
        <member name="P:A5Soft.CARMA.Domain.ITrackState.IsSavable">
            <summary>
            Returns true if this object is both dirty and valid.
            </summary>
            <remarks>
            An object is considered dirty (changed) if <see cref="P:A5Soft.CARMA.Domain.ITrackState.IsDirty" /> returns true. It is
            considered valid if IsValid returns true. The IsSavable property is
            a combination of these two properties. 
            </remarks>
            <returns>A value indicating if this object is both dirty and valid.</returns>
        </member>
        <member name="P:A5Soft.CARMA.Domain.ITrackState.IsChild">
            <summary>
            Returns true if this is a child object, false if it is a root object.
            </summary>
            <remarks>
            An object should be marked as a child object unless it is the
            top most object (root object) in a domain object graph.
            </remarks>
            <returns>A value indicating if this a child object.</returns>
        </member>
        <member name="P:A5Soft.CARMA.Domain.ITrackState.LockedProperties">
            <summary>
            Gets a collection of properties that are not allowed to be written due to the current entity state.
            </summary>
            <remarks>Override this property to implement property locking logic.
            This property is meant for UI only to conditionally disable UI controls for locked properties.</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Domain.ITrackState.CanWriteProperty(System.String)">
            <summary>
            Gets a value indicating whether the current entity state allows changing the property specified.
            </summary>
            <param name="propertyName">a name of the property to check for the write access</param>
            <returns>a value indicating whether the current entity state allows changing the property specified</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.ITrackState.SetValidationEngine(A5Soft.CARMA.Domain.Rules.IValidationEngineProvider)">
            <summary>
            Sets a validation engine to use by the entity.
            Shall be invoked after deserialization if a custom validation engine is used.
            </summary>
            <param name="validationEngineProvider">a validation engine provider to use</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.ITrackState.CheckRules(System.Boolean)">
            <summary>
            Forces check of all the business rules for the entity.
            </summary>
            <param name="checkRulesForChildren">whether to invoke CheckRules method on children</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.ITrackState.GetBrokenRulesTree(System.Boolean)">
            <summary>
            Gets a hierarchical collection of currently broken rules for both an entity and all its child entities.
            </summary>
            <param name="useInstanceDescription">whether to use instance description instead of
            an entity class description (for internal use only)</param>
        </member>
        <member name="T:A5Soft.CARMA.Domain.LookupBase`1">
            <summary>
            A base class for lookups (implements equality overloads).
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.LookupBase`1.Id">
            <summary>
            An id of the referenced entity.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.LookupBase`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Domain.LookupBase`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:A5Soft.CARMA.Domain.Math.Extensions">
            <summary>
            Accounting specific math methods.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Math.Extensions.AccountingRound(System.Double,System.Int32)">
            <summary>
            Returns a double value rounded using accounting algorithm.
            </summary>
            <param name="value">the value to round</param>
            <param name="digits">the rounding order</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Round order should be between 0 and 20.</exception>
            <remarks>Implements custom AwayFromZero rounding for double values.
            Used for consistent rounding behaviour.</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Math.Extensions.AccountingRound(System.Decimal,System.Int32)">
            <summary>
            Returns a decimal value rounded using accounting algorithm.
            </summary>
            <param name="value">the value to round</param>
            <param name="digits">the rounding order</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Round order should be between 0 and 15.</exception>
            <remarks>Equivalent to Decimal.Round(value, digits, MidpointRounding.AwayFromZero).
            Used for consistent rounding behaviour.</remarks>   
        </member>
        <member name="M:A5Soft.CARMA.Domain.Math.Extensions.EqualsTo(System.Double,System.Double)">
            <summary>
            Compares double values for equality using double.Epsilon.
            </summary>
            <param name="value">the first value to compare</param>
            <param name="valueToCompare">the second value to compare</param> 
        </member>
        <member name="M:A5Soft.CARMA.Domain.Math.Extensions.EqualsTo(System.Double,System.Double,System.Double)">
            <summary>
            Compares double values for equality using the epsilon provided.
            </summary>
            <param name="value">the first value to compare</param>
            <param name="valueToCompare">the second value to compare</param>
            <param name="epsilon">the max value diff to ignore</param> 
        </member>
        <member name="M:A5Soft.CARMA.Domain.Math.Extensions.EqualsTo(System.Double,System.Double,System.Int32)">
            <summary>
            Compares double values for equality using the round order provided.
            </summary>
            <param name="value">the first value to compare</param>
            <param name="valueToCompare">the second value to compare</param>
            <param name="roundOrder">the round order applicable</param> 
        </member>
        <member name="M:A5Soft.CARMA.Domain.Math.Extensions.GreaterThan(System.Double,System.Double)">
            <summary>
            Compares double values for the first value to be greater than the second using double.Epsilon.
            </summary>
            <param name="value">the first value to compare</param>
            <param name="valueToCompare">the second value to compare</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Math.Extensions.GreaterThan(System.Double,System.Double,System.Double)">
            <summary>
            Compares double values for the first value to be greater than the second using the epsilon provided.
            </summary>
            <param name="value">the first value to compare</param>
            <param name="valueToCompare">the second value to compare</param>
            <param name="epsilon">the max value diff to ignore</param> 
        </member>
        <member name="M:A5Soft.CARMA.Domain.Math.Extensions.GreaterThan(System.Double,System.Double,System.Int32)">
            <summary>
            Compares double values for the first value to be greater than the second using the round order provided.
            </summary>
            <param name="value">the first value to compare</param>
            <param name="valueToCompare">the second value to compare</param>
            <param name="roundOrder">the round order applicable</param>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute">
            <summary>
            Allows to decorate a class with localizable values that could be used
            for entity (edit) form captions, headers and menu items for create a new instance action
            as well as help uri for the respective help file/resource topic.
            Can use it as is by setting ResourceType value in the attribute decorator
            or inherit this class and set ResourceType in the constructor.
            </summary>
            <remarks>Inherited class is obviously a different entity,
            therefore this attribute can only be used either on concrete (final) business entity (class)
            or on business entity interface used for business metadata
            (that inherits <see cref="T:A5Soft.CARMA.Domain.IDomainObject"/>).</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.#ctor">
            <summary>
            Default constructor for DisplayAttribute.  All associated string properties and methods will return <c>null</c>.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.NameForNew">
            <summary>
            Gets or sets the NameForNew attribute property, which may be a resource key string.
            <para>
            Consumers must use the <see cref="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.GetNameForNew"/> method to retrieve the UI display string.
            </para>
            </summary>
            <remarks>
            The property contains either the literal, non-localized string or the resource key
            to be used in conjunction with <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.ResourceType"/> to configure a localized
            name for display.
            <para>
            The <see cref="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.GetNameForNew"/> method will return either the literal, non-localized
            string or the localized string when <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.ResourceType"/> has been specified.
            </para>
            </remarks>
            <value>
            NameForNew is generally used as a caption or header for an UI form bound to the member
            bearing this attribute.  A <c>null</c> or empty string is legal, and consumers must allow for that.
            </value>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.NameForOld">
            <summary>
            Gets or sets the NameForOld attribute property, which may be a resource key string.
            <para>
            Consumers must use the <see cref="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.GetNameForOld"/> method to retrieve the UI display string.
            </para>
            </summary>
            <remarks>
            The property contains either the literal, non-localized string or the resource key
            to be used in conjunction with <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.ResourceType"/> to configure a localized
            description for display.
            <para>
            The <see cref="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.GetNameForOld"/> method will return either the literal, non-localized
            string or the localized string when <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.ResourceType"/> has been specified.
            </para>
            </remarks>
            <value>
            NameForOld is generally used as a caption or header for an UI form bound to the member
            bearing this attribute.  A <c>null</c> or empty string is legal, and consumers must allow for that.
            </value>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.HelpUri">
            <summary>
            Gets or sets the HelpUri attribute property, which may be a resource key string.
            <para>
            Consumers must use the <see cref="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.GetHelpUri"/> method to retrieve
            the URI to help file/resource topic.
            </para>
            </summary>
            <remarks>
            The property contains either the literal, non-localized string or the resource key
            to be used in conjunction with <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.ResourceType"/> to configure a localized
            description for display.
            <para>
            The <see cref="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.GetHelpUri"/> method will return either the literal, non-localized
            string or the localized string when <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.ResourceType"/> has been specified.
            </para>
            </remarks>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.ResourceType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> that contains the resources for 
            <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.NameForNew"/>,, <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.NameForOld"/> and <see cref="!:NameForCreateNew"/>.
            Using <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.ResourceType"/> along with these Key properties, allows
            the <see cref="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.GetNameForNew"/>, <see cref="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.GetNameForOld"/>
            and <see cref="!:GetNameForCreateNew"/> methods to return localized values.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.GetNameForNew">
            <summary>
            Gets the UI display string for NameForNew.
            <para>
            This can be either a literal, non-localized string provided to <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.NameForNew"/>
            or the localized string found when <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.ResourceType"/> has been specified
            and <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.NameForNew"/> represents a resource key within that resource type.
            </para>
            </summary>
            <returns>
            When <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.ResourceType"/> has not been specified, the value of
            <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.NameForNew"/> will be returned.
            <para>
            When <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.ResourceType"/> has been specified and <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.NameForNew"/>
            represents a resource key within that resource type, then the localized value will be returned.
            </para>
            <para>
            Can return <c>null</c> and will not fall back onto other values, as it's more likely for the
            consumer to want to fall back onto the property name.
            </para>
            </returns>
            <exception cref="T:System.InvalidOperationException">
            After setting both the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.ResourceType"/> property and the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.NameForNew"/>
            property, but a public static property with a name matching the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.NameForNew"/>
            value couldn't be found  on the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.ResourceType"/>.
            </exception>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.GetNameForOld">
            <summary>
            Gets the UI display string for NameForOld.
            <para>
            This can be either a literal, non-localized string provided to <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.NameForOld"/>
            or the localized string found when <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.ResourceType"/> has been specified
            and <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.NameForOld"/> represents a resource key within that resource type.
            </para>
            </summary>
            <returns>
            When <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.ResourceType"/> has not been specified, the value of
            <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.NameForOld"/> will be returned.
            <para>
            When <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.ResourceType"/> has been specified and <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.NameForOld"/>
            represents a resource key within that resource type, then the localized value will be returned.
            </para>
            </returns>
            <exception cref="T:System.InvalidOperationException">
            After setting both the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.ResourceType"/> property and the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.NameForOld"/>
            property, but a public static property with a name matching the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.NameForOld"/>
            value couldn't be found on the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.ResourceType"/>.
            </exception>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.GetHelpUri">
            <summary>
            Gets a (localized) help URI for respective help file/resource topic about the entity.
            <para>
            This can be either a literal, non-localized string provided to <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.HelpUri"/>
            or the localized string found when <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.ResourceType"/> has been specified
            and <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.HelpUri"/> represents a resource key within that resource type.
            </para>
            </summary>
            <returns>
            When <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.ResourceType"/> has not been specified, the value of
            <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.HelpUri"/> will be returned.
            <para>
            When <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.ResourceType"/> has been specified and <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.HelpUri"/>
            represents a resource key within that resource type, then the localized value will be returned.
            </para>
            <para>
            Can return <c>null</c> and will not fall back onto other values, as it's more likely for the
            consumer to want to fall back onto the property name.
            </para>
            </returns>
            <exception cref="T:System.InvalidOperationException">
            After setting both the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.ResourceType"/> property and the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.HelpUri"/>
            property, but a public static property with a name matching the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.HelpUri"/>
            value couldn't be found  on the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.ClassDescriptionAttribute.ResourceType"/>.
            </exception>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Metadata.DataAnnotations.DefaultMetadataProvider">
            <summary>
            Default implementation of IMetadataProvider using validation attributes.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.DefaultMetadataProvider.GetEntityMetadata(System.Type)">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IMetadataProvider.GetEntityMetadata(System.Type)" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.DefaultMetadataProvider.GetEntityMetadata``1">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IMetadataProvider.GetEntityMetadata(System.Type)" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.DefaultMetadataProvider.GetUseCaseMetadata(System.Type)">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IMetadataProvider.GetUseCaseMetadata(System.Type)" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.DefaultMetadataProvider.GetUseCaseMetadata``1">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IMetadataProvider.GetUseCaseMetadata(System.Type)" />
        </member>
        <member name="T:A5Soft.CARMA.Domain.Metadata.DataAnnotations.EntityMetadata">
            <summary>
             a metadata description for entity type using DataAnnotations attributes
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.EntityMetadata.EntityType">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.Metadata.IEntityMetadata.EntityType" />
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.EntityMetadata.Properties">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.Metadata.IEntityMetadata.Properties" />
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.EntityMetadata.PropertyNames">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.Metadata.IEntityMetadata.PropertyNames" />
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.EntityMetadata.Methods">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.Metadata.IEntityMetadata.Methods" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.EntityMetadata.GetPropertyMetadata(System.String)">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IEntityMetadata.GetPropertyMetadata(System.String)" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.EntityMetadata.GetDisplayNameForNew">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IEntityMetadata.GetDisplayNameForNew" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.EntityMetadata.GetDisplayNameForOld">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IEntityMetadata.GetDisplayNameForOld" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.EntityMetadata.GetHelpUri">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IEntityMetadata.GetHelpUri" />
        </member>
        <member name="T:A5Soft.CARMA.Domain.Metadata.DataAnnotations.IgnorePropertyMetadataAttribute">
            <summary>
            Marker attribute for (technical) properties that shall not be included within the entity metadata.
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Metadata.DataAnnotations.LocalizableString">
            <summary>
            A helper class for providing a localizable string property.  
            This class is currently compiled in both System.Web.dll and System.ComponentModel.DataAnnotations.dll.
            See: https://github.com/microsoft/referencesource/blob/master/System.ComponentModel.DataAnnotations/DataAnnotations/LocalizableString.cs
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.LocalizableString.#ctor(System.String)">
            <summary>
            Constructs a localizable string, specifying the property name associated
            with this item.  The <paramref name="propertyName"/> value will be used
            within any exceptions thrown as a result of localization failures.
            </summary>
            <param name="propertyName">The name of the property being localized.  This name
            will be used within exceptions thrown as a result of localization failures.</param>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.LocalizableString.Value">
            <summary>
            Gets or sets the value of this localizable string.  This value can be
            either the literal, non-localized value, or it can be a resource name
            found on the resource type supplied to <see cref="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.LocalizableString.GetLocalizableValue"/>.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.LocalizableString.ResourceType">
            <summary>
            Gets or sets the resource type to be used for localization.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.LocalizableString.ClearCache">
            <summary>
            Clears any cached values, forcing <see cref="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.LocalizableString.GetLocalizableValue"/> to
            perform evaluation.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.LocalizableString.GetLocalizableValue">
            <summary>
            Gets the potentially localized value.
            </summary>
            <remarks>
            If <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.LocalizableString.ResourceType"/> has been specified and <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.LocalizableString.Value"/> is not
            null, then localization will occur and the localized value will be returned.
            <para>
            If <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.LocalizableString.ResourceType"/> is null then <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.LocalizableString.Value"/> will be returned
            as a literal, non-localized string.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if localization fails.  This can occur if <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.LocalizableString.ResourceType"/> has been
            specified, <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.LocalizableString.Value"/> is not null, but the resource could not be
            accessed.  <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.LocalizableString.ResourceType"/> must be a public class, and <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.LocalizableString.Value"/>
            must be the name of a public static string property that contains a getter.
            </exception>
            <returns>
            Returns the potentially localized value.
            </returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Metadata.DataAnnotations.MethodDescriptionAttribute">
            <summary>
            Allows to decorate a class method with localizable values that could be used
            for action button tooltip.
            Can use it as is by setting ResourceType value in the attribute decorator
            or inherit this class and set ResourceType in the constructor.
            </summary>
            <remarks>Methods on business entities are used for (internal) business calculations
            only, as any interaction with "external world" is managed by use cases.
            Therefore method descriptions can only be applied to class methods (incl. inherited).
            They cannot be defined on business interfaces as their implementation
            are subject to the platform used (in rich entity models for winforms vs. javascript for web).</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.MethodDescriptionAttribute.#ctor">
            <summary>
            Default constructor for DisplayAttribute.  All associated string properties and methods will return <c>null</c>.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.MethodDescriptionAttribute.Name">
            <summary>
            Gets or sets the Name attribute property, which may be a resource key string.
            <para>
            Consumers must use the <see cref="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.MethodDescriptionAttribute.GetName"/> method to retrieve the UI display string.
            </para>
            </summary>
            <remarks>
            The property contains either the literal, non-localized string or the resource key
            to be used in conjunction with <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.MethodDescriptionAttribute.ResourceType"/> to configure a localized
            name for display.
            <para>
            The <see cref="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.MethodDescriptionAttribute.GetName"/> method will return either the literal, non-localized
            string or the localized string when <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.MethodDescriptionAttribute.ResourceType"/> has been specified.
            </para>
            </remarks>
            <value>
            Name is generally used as a tooltip for a button that invokes the method
            bearing this attribute.  A <c>null</c> or empty string is legal, and consumers must allow for that.
            </value>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.MethodDescriptionAttribute.ResourceType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> that contains the resources for <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.MethodDescriptionAttribute.Name"/>.
            Using <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.MethodDescriptionAttribute.ResourceType"/> along with these Key properties, allows
            the <see cref="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.MethodDescriptionAttribute.GetName"/> method to return localized values.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.MethodDescriptionAttribute.GetName">
            <summary>
            Gets the UI display string for Name.
            <para>
            This can be either a literal, non-localized string provided to <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.MethodDescriptionAttribute.Name"/>
            or the localized string found when <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.MethodDescriptionAttribute.ResourceType"/> has been specified
            and <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.MethodDescriptionAttribute.Name"/> represents a resource key within that resource type.
            </para>
            </summary>
            <returns>
            When <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.MethodDescriptionAttribute.ResourceType"/> has not been specified, the value of
            <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.MethodDescriptionAttribute.Name"/> will be returned.
            <para>
            When <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.MethodDescriptionAttribute.ResourceType"/> has been specified and <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.MethodDescriptionAttribute.Name"/>
            represents a resource key within that resource type, then the localized value will be returned.
            </para>
            <para>
            Can return <c>null</c> and will not fall back onto other values, as it's more likely for the
            consumer to want to fall back onto the property name.
            </para>
            </returns>
            <exception cref="T:System.InvalidOperationException">
            After setting both the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.MethodDescriptionAttribute.ResourceType"/> property and the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.MethodDescriptionAttribute.Name"/>
            property, but a public static property with a name matching the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.MethodDescriptionAttribute.Name"/>
            value couldn't be found  on the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.MethodDescriptionAttribute.ResourceType"/>.
            </exception>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Metadata.DataAnnotations.MethodMetadata">
            <summary>
            Default implementation of IMethodMetadata using DisplayAttribute.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.MethodMetadata.EntityType">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.Metadata.IMethodMetadata.EntityType" />
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.MethodMetadata.Name">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.Metadata.IMethodMetadata.Name" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.MethodMetadata.GetDisplayName">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IMethodMetadata.GetDisplayName" />
        </member>
        <member name="T:A5Soft.CARMA.Domain.Metadata.DataAnnotations.PropertyMetadata">
            <summary>
            Default implementation of IPropertyMetadata using DisplayAttribute.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.PropertyMetadata.EntityType">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata.EntityType" />
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.PropertyMetadata.Name">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata.Name" />
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.PropertyMetadata.IsReadOnly">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata.IsReadOnly" />
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.PropertyMetadata.PropertyType">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata.PropertyType" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.PropertyMetadata.GetDisplayName">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata.GetDisplayName" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.PropertyMetadata.GetDisplayShortName">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata.GetDisplayShortName" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.PropertyMetadata.GetDisplayDescription">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata.GetDisplayDescription" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.PropertyMetadata.GetDisplayPrompt">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata.GetDisplayPrompt" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.PropertyMetadata.GetDisplayGroupName">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata.GetDisplayGroupName" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.PropertyMetadata.GetDisplayOrder">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata.GetDisplayOrder" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.PropertyMetadata.GetDisplayAutoGenerate(System.Boolean)">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata.GetDisplayAutoGenerate(System.Boolean)" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.PropertyMetadata.GetAutoGenerateFilter(System.Boolean)">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata.GetAutoGenerateFilter(System.Boolean)" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.PropertyMetadata.GetValue(System.Object)">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata.GetValue(System.Object)" />
        </member>
        <member name="T:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute">
            <summary>
            Allows to decorate a use case class (or interface) with localizable values that could be used
            for button title, confirmation question, success message
            as well as help uri for the respective help file/resource topic.
            Can use it as is by setting ResourceType value in the attribute decorator
            or inherit this class and set ResourceType in the constructor.
            </summary>
            <remarks>Inherited class is obviously a different entity,
            therefore this attribute can only be used either on concrete (final)
            use case (class) or on use case interface (used for business metadata).</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.#ctor">
            <summary>
            Default constructor.  All associated string properties and methods will return <c>null</c>.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ButtonTitle">
            <summary>
            Gets or sets the ButtonTitle attribute property, which may be a resource key string.
            <para>
            Consumers must use the <see cref="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.GetButtonTitle"/> method to retrieve the UI display string.
            </para>
            </summary>
            <remarks>
            The property contains either the literal, non-localized string or the resource key
            to be used in conjunction with <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> to configure a localized
            name for display.
            <para>
            The <see cref="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.GetButtonTitle"/> method will return either the literal, non-localized
            string or the localized string when <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> has been specified.
            </para>
            </remarks>
            <value>
            ButtonTitle is generally used as a title or tooltip for an UI button that invokes the use case.
            A <c>null</c> or empty string is legal, and consumers must allow for that.
            </value>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.MenuTitle">
            <summary>
            Gets or sets the MenuTitle attribute property, which may be a resource key string.
            <para>
            Consumers must use the <see cref="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.GetMenuTitle"/> method to retrieve the UI display string.
            </para>
            </summary>
            <remarks>
            The property contains either the literal, non-localized string or the resource key
            to be used in conjunction with <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> to configure a localized
            name for display.
            <para>
            The <see cref="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.GetMenuTitle"/> method will return either the literal, non-localized
            string or the localized string when <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> has been specified.
            </para>
            </remarks>
            <value>
            MenuTitle is generally used as a title for an UI (context or main) menu that invokes the use case.
            A <c>null</c> or empty string is legal, and consumers must allow for that.
            </value>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ConfirmationQuestion">
            <summary>
            Gets or sets the ConfirmationQuestion attribute property, which may be a resource key string.
            <para>
            Consumers must use the <see cref="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.GetConfirmationQuestion"/> method to retrieve the UI display string.
            </para>
            </summary>
            <remarks>
            The property contains either the literal, non-localized string or the resource key
            to be used in conjunction with <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> to configure a localized
            description for display.
            <para>
            The <see cref="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.GetConfirmationQuestion"/> method will return either the literal, non-localized
            string or the localized string when <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> has been specified.
            </para>
            </remarks>
            <value>
            ConfirmationQuestion is generally used as a text for an UI conform dialog form.
            A <c>null</c> or empty string is legal, and consumers must allow for that.
            </value>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.SuccessMessage">
            <summary>
            Gets or sets the SuccessMessage attribute property, which may be a resource key string.
            <para>
            Consumers must use the <see cref="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.GetSuccessMessage"/> method to retrieve the UI display string.
            </para>
            </summary>
            <remarks>
            The property contains either the literal, non-localized string or the resource key
            to be used in conjunction with <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> to configure a localized
            description for display.
            <para>
            The <see cref="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.GetSuccessMessage"/> method will return either the literal, non-localized
            string or the localized string when <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> has been specified.
            </para>
            </remarks>
            <value>
            SuccessMessage is generally used as a text for a success notification in UI.
            A <c>null</c> or empty string is legal, and consumers must allow for that.
            </value>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.HelpUri">
            <summary>
            Gets or sets the HelpUri attribute property, which may be a resource key string.
            <para>
            Consumers must use the <see cref="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.GetHelpUri"/> method to retrieve
            the URI to help file/resource topic.
            </para>
            </summary>
            <remarks>
            The property contains either the literal, non-localized string or the resource key
            to be used in conjunction with <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> to configure a localized
            description for display.
            <para>
            The <see cref="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.GetHelpUri"/> method will return either the literal, non-localized
            string or the localized string when <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> has been specified.
            </para>
            </remarks>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> that contains the resources for 
            <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ButtonTitle"/>,, <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ConfirmationQuestion"/> and <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.SuccessMessage"/>.
            Using <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> along with these Key properties, allows
            the <see cref="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.GetButtonTitle"/>, <see cref="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.GetConfirmationQuestion"/>
            and <see cref="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.GetSuccessMessage"/> methods to return localized values.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.GetButtonTitle">
            <summary>
            Gets the UI display string for ButtonTitle.
            <para>
            This can be either a literal, non-localized string provided to <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ButtonTitle"/>
            or the localized string found when <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> has been specified
            and <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ButtonTitle"/> represents a resource key within that resource type.
            </para>
            </summary>
            <returns>
            When <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> has not been specified, the value of
            <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ButtonTitle"/> will be returned.
            <para>
            When <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> has been specified and <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ButtonTitle"/>
            represents a resource key within that resource type, then the localized value will be returned.
            </para>
            <para>
            Can return <c>null</c> and will not fall back onto other values, as it's more likely for the
            consumer to want to fall back onto the property name.
            </para>
            </returns>
            <exception cref="T:System.InvalidOperationException">
            After setting both the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> property and the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ButtonTitle"/>
            property, but a public static property with a name matching the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ButtonTitle"/>
            value couldn't be found  on the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/>.
            </exception>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.GetMenuTitle">
            <summary>
            Gets the UI display string for MenuTitle.
            <para>
            This can be either a literal, non-localized string provided to <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.MenuTitle"/>
            or the localized string found when <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> has been specified
            and <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.MenuTitle"/> represents a resource key within that resource type.
            </para>
            </summary>
            <returns>
            When <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> has not been specified, the value of
            <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.MenuTitle"/> will be returned.
            <para>
            When <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> has been specified and <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.MenuTitle"/>
            represents a resource key within that resource type, then the localized value will be returned.
            </para>
            <para>
            Can return <c>null</c> and will not fall back onto other values, as it's more likely for the
            consumer to want to fall back onto the property name.
            </para>
            </returns>
            <exception cref="T:System.InvalidOperationException">
            After setting both the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> property and the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.MenuTitle"/>
            property, but a public static property with a name matching the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.MenuTitle"/>
            value couldn't be found  on the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/>.
            </exception>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.GetConfirmationQuestion">
            <summary>
            Gets the UI display string for ConfirmationQuestion.
            <para>
            This can be either a literal, non-localized string provided to <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ConfirmationQuestion"/>
            or the localized string found when <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> has been specified
            and <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ConfirmationQuestion"/> represents a resource key within that resource type.
            </para>
            </summary>
            <returns>
            When <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> has not been specified, the value of
            <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ConfirmationQuestion"/> will be returned.
            <para>
            When <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> has been specified and <see cref="!:NameForOld"/>
            represents a resource key within that resource type, then the localized value will be returned.
            </para>
            </returns>
            <exception cref="T:System.InvalidOperationException">
            After setting both the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> property and the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ConfirmationQuestion"/>
            property, but a public static property with a name matching the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ConfirmationQuestion"/>
            value couldn't be found on the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/>.
            </exception>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.GetSuccessMessage">
            <summary>
            Gets the UI display string for SuccessMessage.
            <para>
            This can be either a literal, non-localized string provided to <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.SuccessMessage"/>
            or the localized string found when <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> has been specified
            and <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.SuccessMessage"/> represents a resource key within that resource type.
            </para>
            </summary>
            <returns>
            When <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> has not been specified, the value of
            <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.SuccessMessage"/> will be returned.
            <para>
            When <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> has been specified and <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.SuccessMessage"/>
            represents a resource key within that resource type, then the localized value will be returned.
            </para>
            <para>
            Can return <c>null</c> and will not fall back onto other values, as it's more likely for the
            consumer to want to fall back onto the property name.
            </para>
            </returns>
            <exception cref="T:System.InvalidOperationException">
            After setting both the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> property and the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.SuccessMessage"/>
            property, but a public static property with a name matching the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.SuccessMessage"/>
            value couldn't be found on the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/>.
            </exception>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.GetHelpUri">
            <summary>
            Gets a (localized) help URI for respective help file/resource topic about the entity.
            <para>
            This can be either a literal, non-localized string provided to <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.HelpUri"/>
            or the localized string found when <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> has been specified
            and <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.HelpUri"/> represents a resource key within that resource type.
            </para>
            </summary>
            <returns>
            When <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> has not been specified, the value of
            <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.HelpUri"/> will be returned.
            <para>
            When <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> has been specified and <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.HelpUri"/>
            represents a resource key within that resource type, then the localized value will be returned.
            </para>
            <para>
            Can return <c>null</c> and will not fall back onto other values, as it's more likely for the
            consumer to want to fall back onto the property name.
            </para>
            </returns>
            <exception cref="T:System.InvalidOperationException">
            After setting both the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/> property and the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.HelpUri"/>
            property, but a public static property with a name matching the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.HelpUri"/>
            value couldn't be found  on the <see cref="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseDescriptionAttribute.ResourceType"/>.
            </exception>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseMetadata">
            <summary>
             a metadata description for use case (type) using DataAnnotations attributes
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseMetadata.UseCaseType">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.UseCaseType" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseMetadata.GetButtonTitle">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetButtonTitle" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseMetadata.GetMenuTitle">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetMenuTitle" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseMetadata.GetConfirmationQuestion">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetConfirmationQuestion" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseMetadata.GetHelpUri">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetHelpUri" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.DataAnnotations.UseCaseMetadata.GetSuccessMessage">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetSuccessMessage" />
        </member>
        <member name="T:A5Soft.CARMA.Domain.Metadata.IEntityMetadata">
            <summary>
            Common interface for entity (class) metadata localization provider.
            </summary>
            <remarks>Entity could be commonly described in:
            1) Web edit form header or winforms/WPF form caption for a new entity instance;
            2) Web edit form header or winforms/WPF form caption for an existing entity instance being edited;
            3) Menu item for a new instance of the entity or a tooltip for a button (in all types of interfaces);
            4) (Contextual) menu item for editing an entity or a tooltip for a button (in all types of interfaces);
            5) (Contextual) menu item for deleting an entity or a tooltip for a button (in all types of interfaces).
            Paras 4 and 5 are actually actions (use cases), therefore not a part of entity metadata.
            While creating a new instance (para 3) of an entity usually is not a use case
            (does not require specific actions except for invoking constructor).</remarks>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.IEntityMetadata.EntityType">
            <summary>
            Gets a type of the entity described.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.IEntityMetadata.Properties">
            <summary>
            Gets a collection of metadata descriptions for entity properties.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.IEntityMetadata.PropertyNames">
            <summary>
            Gets an array of all the property names.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.IEntityMetadata.Methods">
            <summary>
            Gets a collection of metadata descriptions for entity methods.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.IEntityMetadata.GetPropertyMetadata(System.String)">
            <summary>
            Gets a <see cref="T:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata"/> instance for the property specified
            (null if no metadata for the property).
            </summary>
            <param name="propertyName">a name of the property to get the metadata for</param>
            <returns>a <see cref="T:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata"/> instance for the property specified
            (null if no metadata for the property)</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.IEntityMetadata.GetDisplayNameForNew">
            <summary>
            Gets a localized value that is used for display in the UI
            for a new instance of the entity (typically used as a form caption/header).
            </summary>
            <returns>a localized value that is used for display in the UI</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.IEntityMetadata.GetDisplayNameForOld">
            <summary>
            Gets a localized value that is used to display a description in the UI
            for an old entity instance (typically used as a form caption/header).
            </summary>
            <returns>a localized value that is used for display in the UI</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.IEntityMetadata.GetHelpUri">
            <summary>
            Gets an URI for help file and topic for the entity.
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Metadata.IMetadataProvider">
            <summary>
            Common interface for metadata providers (services) for use in dependency injection.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.IMetadataProvider.GetEntityMetadata(System.Type)">
            <summary>
            Gets metadata for the entity type specified.
            </summary>
            <param name="entityType">a type of the entity to get metadata for</param>
            <returns>metadata for the entity type specified</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.IMetadataProvider.GetEntityMetadata``1">
            <summary>
            Gets metadata for the entity type specified.
            </summary>
            <typeparam name="T">a type of the entity to get metadata for</typeparam>
            <returns>metadata for the entity type specified</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.IMetadataProvider.GetUseCaseMetadata(System.Type)">
            <summary>
            Gets metadata for the use case type specified.
            </summary>
            <param name="useCaseType">a type of the use case to get metadata for</param>
            <returns>metadata for the use case type specified</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.IMetadataProvider.GetUseCaseMetadata``1">
            <summary>
            Gets metadata for the use case type specified.
            </summary>
            <typeparam name="T">a type of the use case to get metadata for</typeparam>
            <returns>metadata for the use case type specified</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Metadata.IMethodMetadata">
            <summary>
            Common interface for entity (class) method metadata localization provider.
            </summary>
            <remarks>Entity methods could be commonly described in the tooltips of respective buttons.
            The action buttons themselves are usually visualized as icons for both
            desktop and web apps.</remarks>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.IMethodMetadata.EntityType">
            <summary>
            Gets the type of the entity that the method belongs to.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.IMethodMetadata.Name">
            <summary>
            Gets the name of this method.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.IMethodMetadata.GetDisplayName">
            <summary>
            Gets a localized value that is used for display in the UI
            (typically used as button tooltips).
            </summary>
            <returns>a localized value that is used for display in the UI</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata">
            <summary>
            Common interface for property metadata localization provider.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata.EntityType">
            <summary>
            Gets the type of the entity that the property belongs to.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata.Name">
            <summary>
            Gets the name of this property.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata.IsReadOnly">
            <summary>
            Gets a value that indicates whether the property has a public setter.  
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata.PropertyType">
            <summary>
            Gets the type of this property (value).
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata.GetDisplayName">
            <summary>
            Gets a localized value that is used for display in the UI (typically used as the field label).
            </summary>
            <returns>a localized value that is used for display in the UI</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata.GetDisplayShortName">
            <summary>
            Gets a localized value that is used for the grid column label.
            </summary>
            <returns>a localized value that is used for the grid column label</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata.GetDisplayDescription">
            <summary>
            Gets a localized value that is used to display a description in the UI
            (typically used as a tooltip or description UI element).
            </summary>
            <returns>a localized value that is used to display a description in the UI</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata.GetDisplayPrompt">
            <summary>
            Gets a localized value that will be used to set the watermark for prompts in the UI.
            </summary>
            <returns>a localized value that will be used to set the watermark for prompts in the UI</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata.GetDisplayGroupName">
            <summary>
            Gets a localized value that is used to group fields in the UI.
            </summary>
            <returns>a localized value that is used to group fields in the UI</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata.GetDisplayOrder">
            <summary>
            Gets the order weight of the column (field).
            </summary>
            <returns></returns>
            <remarks>Columns (fields) are sorted in increasing order based on the order value.
            Columns (fields) without this DisplayAttribute (or without DisplayAttribute.Order value set)
            have an order value of 10000. This value lets explicitly-ordered fields be displayed before
            and after the fields that do not have a specified order.
            Negative values are valid and can be used to position a column before all non-negative columns.</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata.GetDisplayAutoGenerate(System.Boolean)">
            <summary>
            Gets a value that indicates whether UI should be generated automatically in order to display this field.
            </summary>
            <param name="defaultValue">a default value if the property does not have a DisplayAttribute
            or DisplayAttribute.AutoGenerateField is not set</param>
            <returns>a value that indicates whether UI should be generated automatically in order to display this field</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata.GetAutoGenerateFilter(System.Boolean)">
            <summary>
            Gets a value that indicates whether filtering UI is automatically displayed for this field.
            </summary>
            <param name="defaultValue">a default value if the property does not have a DisplayAttribute
            or DisplayAttribute.AutoGenerateFilter is not set</param>
            <returns>a value that indicates whether filtering UI is automatically displayed for this field</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.IPropertyMetadata.GetValue(System.Object)">
            <summary>
            Gets a property value for the entity instance.
            </summary>
            <param name="instance">the entity instance to get a property value for</param>
            <returns>a property value for the entity instance</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata">
            <summary>
            Common interface for use case (class or interface) metadata localization provider.
            </summary>
            <remarks>Use case (method) could be commonly described in the respective buttons
            (as button title or tooltip for action icons).
            Use case (method) is also commonly associated with a conformation question and/or 
            success message.</remarks>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.UseCaseType">
            <summary>
            Gets the type of the use case that the metadata is for.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetButtonTitle">
            <summary>
            Gets a localized value that is used for display a button title (or a tooltip for action icons) 
            for the use case in the UI.
            </summary>
            <returns>a localized value that is used for display in the UI</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetMenuTitle">
            <summary>
            Gets a localized value that is used for display a (main or context) menu title for the use case in the UI.
            </summary>
            <returns>a localized value that is used for display in the UI</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetConfirmationQuestion">
            <summary>
            Gets a localized value that is used to display a confirm dialog (before the use case is invoked).
            </summary>
            <returns>a localized value that is used to display a confirm dialog (before the use case is invoked)</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetSuccessMessage">
            <summary>
            Gets a localized value that is used to display a success message
            (to be shown after the use case is successfuly invoked).
            </summary>
            <returns>a localized value that is used to display a success message</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetHelpUri">
            <summary>
            Gets an URI for help file and topic for the use case.
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Orm.Extensions">
            <summary>
            Methods for maping <see cref="T:A5Soft.CARMA.Domain.DomainEntityIdentity`1"/> and database key values.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Orm.Extensions.ToIdentity``1(System.Nullable{System.Int32})">
            <summary>
            Converts the primitive key value to <see cref="T:A5Soft.CARMA.Domain.DomainEntityIdentity`1"/>
            </summary>
            <typeparam name="T">a type of the <see cref="T:A5Soft.CARMA.Domain.DomainEntity`1"/> that the key is meant to identify</typeparam>
            <returns>a <see cref="T:A5Soft.CARMA.Domain.DomainEntityIdentity`1"/> for the key value</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Orm.Extensions.ToIdentity``1(System.Nullable{System.Int64})">
            <summary>
            Converts the primitive key value to <see cref="T:A5Soft.CARMA.Domain.DomainEntityIdentity`1"/>
            </summary>
            <typeparam name="T">a type of the <see cref="T:A5Soft.CARMA.Domain.DomainEntity`1"/> that the key is meant to identify</typeparam>
            <returns>a <see cref="T:A5Soft.CARMA.Domain.DomainEntityIdentity`1"/> for the key value</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Orm.Extensions.ToIdentity``1(System.Nullable{System.Guid})">
            <summary>
            Converts the primitive key value to <see cref="T:A5Soft.CARMA.Domain.DomainEntityIdentity`1"/>
            </summary>
            <typeparam name="T">a type of the <see cref="T:A5Soft.CARMA.Domain.DomainEntity`1"/> that the key is meant to identify</typeparam>
            <returns>a <see cref="T:A5Soft.CARMA.Domain.DomainEntityIdentity`1"/> for the key value</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Orm.Extensions.ToIdentity``1(System.Guid)">
            <summary>
            Converts the primitive key value to <see cref="T:A5Soft.CARMA.Domain.DomainEntityIdentity`1"/>
            </summary>
            <typeparam name="T">a type of the <see cref="T:A5Soft.CARMA.Domain.DomainEntity`1"/> that the key is meant to identify</typeparam>
            <returns>a <see cref="T:A5Soft.CARMA.Domain.DomainEntityIdentity`1"/> for the key value</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Orm.Extensions.ToIdentity``1(System.String)">
            <summary>
            Converts the primitive key value to <see cref="T:A5Soft.CARMA.Domain.DomainEntityIdentity`1"/>
            </summary>
            <typeparam name="T">a type of the <see cref="T:A5Soft.CARMA.Domain.DomainEntity`1"/> that the key is meant to identify</typeparam>
            <returns>a <see cref="T:A5Soft.CARMA.Domain.DomainEntityIdentity`1"/> for the key value</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Orm.Extensions.AsInteger``1(A5Soft.CARMA.Domain.DomainEntityIdentity{``0})">
            <summary>
            Converts the <see cref="T:A5Soft.CARMA.Domain.DomainEntityIdentity`1"/> to a primitive key value used by a database.
            </summary>
            <typeparam name="T">a type of the <see cref="T:A5Soft.CARMA.Domain.DomainEntity`1"/> that the key is meant to identify</typeparam>
            <returns>a primitive key value for a database</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Orm.Extensions.AsNullableInteger``1(A5Soft.CARMA.Domain.DomainEntityIdentity{``0})">
            <summary>
            Converts the <see cref="T:A5Soft.CARMA.Domain.DomainEntityIdentity`1"/> to a primitive key value used by a database.
            </summary>
            <typeparam name="T">a type of the <see cref="T:A5Soft.CARMA.Domain.DomainEntity`1"/> that the key is meant to identify</typeparam>
            <returns>a primitive key value for a database</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Orm.Extensions.AsLong``1(A5Soft.CARMA.Domain.DomainEntityIdentity{``0})">
            <summary>
            Converts the <see cref="T:A5Soft.CARMA.Domain.DomainEntityIdentity`1"/> to a primitive key value used by a database.
            </summary>
            <typeparam name="T">a type of the <see cref="T:A5Soft.CARMA.Domain.DomainEntity`1"/> that the key is meant to identify</typeparam>
            <returns>a primitive key value for a database</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Orm.Extensions.AsNullableLong``1(A5Soft.CARMA.Domain.DomainEntityIdentity{``0})">
            <summary>
            Converts the <see cref="T:A5Soft.CARMA.Domain.DomainEntityIdentity`1"/> to a primitive key value used by a database.
            </summary>
            <typeparam name="T">a type of the <see cref="T:A5Soft.CARMA.Domain.DomainEntity`1"/> that the key is meant to identify</typeparam>
            <returns>a primitive key value for a database</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Orm.Extensions.AsGuid``1(A5Soft.CARMA.Domain.DomainEntityIdentity{``0})">
            <summary>
            Converts the <see cref="T:A5Soft.CARMA.Domain.DomainEntityIdentity`1"/> to a primitive key value used by a database.
            </summary>
            <typeparam name="T">a type of the <see cref="T:A5Soft.CARMA.Domain.DomainEntity`1"/> that the key is meant to identify</typeparam>
            <returns>a primitive key value for a database</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Orm.Extensions.AsNullableGuid``1(A5Soft.CARMA.Domain.DomainEntityIdentity{``0})">
            <summary>
            Converts the <see cref="T:A5Soft.CARMA.Domain.DomainEntityIdentity`1"/> to a primitive key value used by a database.
            </summary>
            <typeparam name="T">a type of the <see cref="T:A5Soft.CARMA.Domain.DomainEntity`1"/> that the key is meant to identify</typeparam>
            <returns>a primitive key value for a database</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Orm.Extensions.IsValidKey(System.String)">
            <summary>
            Gets a value indicating whether the value is a (potentially) valid primary key.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Orm.Extensions.IsValidKey(System.Int32)">
            <summary>
            Gets a value indicating whether the value is a (potentially) valid primary key.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Orm.Extensions.IsValidKey(System.Nullable{System.Int32})">
            <summary>
            Gets a value indicating whether the value is a (potentially) valid primary key.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Orm.Extensions.IsValidKey(System.Int64)">
            <summary>
            Gets a value indicating whether the value is a (potentially) valid primary key.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Orm.Extensions.IsValidKey(System.Nullable{System.Int64})">
            <summary>
            Gets a value indicating whether the value is a (potentially) valid primary key.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Orm.Extensions.IsValidKey(System.Guid)">
            <summary>
            Gets a value indicating whether the value is a (potentially) valid primary key.
            </summary>
            <param name="value"></param> 
        </member>
        <member name="M:A5Soft.CARMA.Domain.Orm.Extensions.IsValidKey(System.Nullable{System.Guid})">
            <summary>
            Gets a value indicating whether the value is a (potentially) valid primary key.
            </summary>
            <param name="value"></param> 
        </member>
        <member name="T:A5Soft.CARMA.Domain.Reflection.Extensions">
            <summary>
            Extensions for common reflection tasks.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Reflection.Extensions.GetCustomAttributesWithInheritance``1(System.Reflection.PropertyInfo)">
            <summary>
            Gets a list of custom attributes of type TAttribute for the property specified.
            Includes attributes defined for the same property by the ancestor classes and interfaces.
            </summary>
            <typeparam name="TAttribute">a type of the custom attribute to get</typeparam>
            <param name="baseProp"></param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Reflection.Extensions.GetCustomAttributeWithInheritance``1(System.Reflection.PropertyInfo)">
            <summary>
            Gets a first custom attribute of type TAttribute for the property specified.
            Includes attributes defined for the same property by the ancestor classes and interfaces.
            </summary>
            <typeparam name="TAttribute">a type of the custom attribute to get</typeparam>
            <param name="baseProp"></param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Reflection.Extensions.GetCustomAttributesWithInheritance``1(System.Type)">
            <summary>
            Gets a list of custom attributes of type TAttribute for the (class or interface) type specified.
            Includes attributes defined by the ancestor classes and interfaces.
            </summary>
            <typeparam name="TAttribute">a type of the custom attribute to get</typeparam>
            <param name="type"></param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Reflection.Extensions.GetPublicProperties``1">
            <summary>
            Gets public instance properties for a class or interface.
            Solves GetProperties() for interfaces problem.
            </summary>
            <typeparam name="T">a type to get public properties for</typeparam>
            <returns>public instance properties for a class or interface</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Reflection.Extensions.GetPublicProperties``1(System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            Gets public instance properties for a class or interface.
            Solves GetProperties() for interfaces problem.
            </summary>
            <typeparam name="T">a type to get public properties for</typeparam>
            <param name="filter">a property filter method</param>
            <returns>public instance properties for a class or interface</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Reflection.Extensions.GetPublicProperties(System.Type)">
            <summary>
            Gets public instance properties for a class or interface.
            Solves GetProperties() for interfaces problem.
            </summary>
            <param name="forType">a type to get public properties for</param>
            <returns>public instance properties for a class or interface</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Reflection.Extensions.GetPublicProperties(System.Type,System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            Gets public instance properties for a class or interface.
            Solves GetProperties() for interfaces problem.
            </summary>
            <param name="forType">a type to get public properties for</param>
            <param name="filter">a property filter method</param>
            <returns>public instance properties for a class or interface</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Reflection.Extensions.GetEnumDisplayName``1(``0)">
            <summary>
            Gets a localized name of an enum value. (see <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name"/>)
            </summary>
            <typeparam name="TEnum">type of enum (could be nullable)</typeparam>
            <param name="value"></param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Reflection.Extensions.GetEnumDisplayShortName``1(``0)">
            <summary>
            Gets a localized short name of an enum value. (see <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName"/>)
            </summary>
            <typeparam name="TEnum">type of enum (could be nullable)</typeparam>
            <param name="value"></param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Reflection.Extensions.GetEnumDisplayDescription``1(``0)">
            <summary>
            Gets a localized description of an enum value. (see <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description"/>)
            </summary>
            <typeparam name="TEnum">type of enum (could be nullable)</typeparam>
            <param name="value"></param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Reflection.Extensions.GetEnumDescription``1(``0)">
            <summary>
            Gets a localized description of an enum value. (see <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description"/>)
            </summary>
            <typeparam name="TEnum">type of enum (could be nullable)</typeparam>
            <param name="value"></param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Reflection.Extensions.GetEnumDataSource``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a localized dataSource for the enum values.
            </summary>
            <typeparam name="TEnum">type of enum</typeparam>
            <param name="values"></param>
        </member>
        <member name="T:A5Soft.CARMA.Domain.RemovingItemEventArgs">
            <summary>
            Contains event data for the RemovingItem
            event.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.RemovingItemEventArgs.RemovingItem">
            <summary>
            Gets a reference to the item that was removed from the list.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.RemovingItemEventArgs.#ctor(System.Object)">
            <summary>
            Create an instance of the object.
            </summary>
            <param name="removingItem">
            A reference to the item that was removed from the list.
            </param>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.BrokenRule">
            <summary>
            Stores details about a specific broken business rule.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.BrokenRule.#ctor(System.String,System.String,System.String,A5Soft.CARMA.Domain.Rules.RuleSeverity)">
            <summary>
            creates a new BrokenRule instance
            </summary>
            <param name="ruleName">name of the rule</param>
            <param name="property">property affected by the rule</param>
            <param name="description">description of the broken rule (error message)</param>
            <param name="severity">severity of the broken rule</param>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.BrokenRule.RuleName">
            <summary>
            Provides access to the name of the broken rule.
            </summary>
            <value>The name of the rule.</value>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.BrokenRule.Description">
            <summary>
            Provides access to the description of the broken rule (error message).
            </summary>
            <value>The description of the broken rule (error message).</value>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.BrokenRule.Property">
            <summary>
            Provides access to the property affected by the broken rule.
            </summary>
            <value>The property affected by the rule.</value>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.BrokenRule.Severity">
            <summary>
            Gets the severity of the broken rule.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.BrokenRule.ToString">
            <summary>
            Gets a string representation for this object.
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.BrokenRules">
            <summary>
            A collection of currently broken rules.
            </summary>
            <remarks>
            This collection is readonly and can be safely made available
            to code outside the business object such as the UI. This allows
            external code, such as a UI, to display the list of broken rules
            to the user.
            </remarks>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.BrokenRules.ErrorCount">
            <summary>
            Gets the number of broken rules in the collection that have a severity of Error.
            </summary>
            <value>An integer value.</value>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.BrokenRules.WarningCount">
            <summary>
            Gets the number of broken rules in the collection that have a severity of Warning.
            </summary>
            <value>An integer value.</value>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.BrokenRules.InformationCount">
            <summary>
            Gets the number of broken rules in the collection that have a severity of Information.
            </summary>
            <value>An integer value.</value>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.BrokenRules.GetFirstBrokenRule(System.String,A5Soft.CARMA.Domain.Rules.RuleSeverity)">
            <summary>
            Returns the first <see cref="T:A5Soft.CARMA.Domain.Rules.BrokenRule"/> object corresponding to the specified property
            and severity.
            </summary>
            <param name="property">The name of the property affected by the rule.</param>
            <param name="severity">The severity of broken rule to return.</param>
            <returns>
            The first BrokenRule object corresponding to the specified property, or null
            if there are no rules defined for the property.
            </returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.BrokenRules.ToString">
            <summary>
            Returns the text of all broken rule descriptions, each separated by a <see cref="P:System.Environment.NewLine" />.
            </summary>
            <returns>The text of all broken rule descriptions.</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.BrokenRules.ToString(A5Soft.CARMA.Domain.Rules.RuleSeverity)">
            <summary>
            Returns the text of all broken rule descriptions for a specific severity, each
            separated by a <see cref="P:System.Environment.NewLine" />.
            </summary>
            <param name="severity">The severity of rules to  include in the result.</param>
            <returns>The text of all broken rule descriptions matching the specified severtiy.</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.BrokenRules.ToString(System.String)">
            <summary>
            Returns the text of all broken rule descriptions.
            </summary>
            <param name="separator">String to place between each broken rule description.
            </param>
            <returns>The text of all broken rule descriptions.</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.BrokenRules.ToString(System.String,A5Soft.CARMA.Domain.Rules.RuleSeverity)">
            <summary>
            Returns the text of all broken rule descriptions for a specific severity.
            </summary>
            <param name="separator">String to place between each broken rule description. </param>
            <param name="severity">The severity of rules to include in the result.</param>
            <returns>The text of all broken rule descriptions matching the specified severtiy.</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.BrokenRules.ToString(System.String,A5Soft.CARMA.Domain.Rules.RuleSeverity,System.String)">
            <summary>
            Returns the text of all broken rule descriptions for a specific severity and property.
            </summary>
            <param name="separator"> String to place between each broken rule description. </param>
            <param name="severity">The severity of rules to include in the result.</param>
            <param name="propertyName">Property name</param>
            <returns>The text of all broken rule descriptions  matching the specified severtiy.</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.BrokenRules.ToArray">
            <summary>
            Returns a string array containing all broken rule descriptions.
            </summary>
            <returns>The text of all broken rule descriptions.</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.BrokenRules.ToArray(A5Soft.CARMA.Domain.Rules.RuleSeverity)">
            <summary>
            Returns a string array containing all broken rule descriptions matching the specified severity.
            </summary>
            <param name="severity">The severity of rules to include in the result.</param>
            <returns>The text of all broken rule descriptions matching the specified severity.</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.BrokenRulesCollection">
            <summary>
            Encapsulates a list of <see cref="T:A5Soft.CARMA.Domain.Rules.BrokenRule"/> as a result of POCO or custom validation.
            See <see cref="M:A5Soft.CARMA.Domain.Extensions.ValidatePoco``1(A5Soft.CARMA.Domain.Rules.IValidationEngineProvider,``0)"/>.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.BrokenRulesCollection.#ctor(System.Collections.Generic.List{A5Soft.CARMA.Domain.Rules.BrokenRule})">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.BrokenRulesCollection.#ctor(A5Soft.CARMA.Domain.Rules.BrokenRule)">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.BrokenRulesCollection.#ctor(System.String,System.String,A5Soft.CARMA.Domain.Rules.RuleSeverity)">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.BrokenRulesCollection.#ctor">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.BrokenRulesCollection.AddCustomBrokenRule(System.String,System.String,A5Soft.CARMA.Domain.Rules.RuleSeverity)">
            <summary>
            Adds a custom broken rule to the collection.
            </summary>
            <param name="property">property affected by the rule (if any)</param>
            <param name="description">description of the broken rule (localized error message, required)</param>
            <param name="severity">severity of the broken rule</param>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.BrokenRulesManager`1">
            <summary>
            A broken rules manager for a business entity.
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.BrokenRulesTreeNode">
            <summary>
            A hierarchical collection of currently broken rules for both an entity and all its child entities.
            </summary>
            <remarks>
            This collection is readonly and can be safely made available
            to code outside the business object such as the UI. This allows
            external code, such as a UI, to display the list of broken rules
            to the user.
            </remarks>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.BrokenRulesTreeNode.#ctor(System.String,A5Soft.CARMA.Domain.Rules.BrokenRule[])">
            <summary>
            Creates a new broken rule tree node for an entity.
            </summary>
            <param name="entityDisplayName">a (localized) name of the entity</param>
            <param name="brokenRules">a collection of the broken rules for the entity</param>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.BrokenRulesTreeNode.EntityDisplayName">
            <summary>
            Gets a (localized) name of the entity that is described by the node.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.BrokenRulesTreeNode.AddBrokenRulesForChild(A5Soft.CARMA.Domain.Rules.BrokenRulesTreeNode)">
            <summary>
            Adds a child node for a child entity broken rules.
            </summary>
            <param name="brokenRules">child entity broken rules</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.BrokenRulesTreeNode.Count(A5Soft.CARMA.Domain.Rules.RuleSeverity)">
            <summary>
            Gets a count of broken rules of the specified severity.
            </summary>
            <param name="severity">severity of the broken rules to count</param>
            <returns>a count of broken rules of the specified severity</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.BrokenRulesTreeNode.ToString">
            <summary>
            Gets a description of all broken rules with the severity Error using Environment.NewLine
            as a line separator. 
            </summary>
            <returns>a description of all broken rules with the severity Error using Environment.NewLine
            as a line separator</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.BrokenRulesTreeNode.ToString(A5Soft.CARMA.Domain.Rules.RuleSeverity)">
            <summary>
            Gets a description of all broken rules with the severity specified
            using Environment.NewLine as a line separator.
            </summary>
            <param name="severity">severity of the broken rules to get a description for</param>
            <returns>a description of all broken rules with the severity specified
            using Environment.NewLine as a line separator</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.BrokenRulesTreeNode.ToString(System.String)">
            <summary>
            Gets a description of all broken rules with the severity Error
            using the specified separator as line separator.
            </summary>
            <param name="separator">a line separator to use</param>
            <returns>a description of all broken rules with the severity Error
            using the specified separator as line separator</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.BrokenRulesTreeNode.ToString(A5Soft.CARMA.Domain.Rules.RuleSeverity,System.String)">
            <summary>
            Gets a description of all broken rules with the severity specified
            using the specified separator as line separator.
            </summary>
            <param name="severity">severity of the broken rules to get a description for</param>
            <param name="separator">a line separator to use</param>
            <returns>a description of all broken rules with the severity specified
            using the specified separator as line separator</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.AtLeastOneRequiredAttributeBase">
            <summary>
            A base class for at least one property required rule.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.AtLeastOneRequiredAttributeBase.#ctor(System.String)">
            <summary>
            Creates a new instance of AtLeastOneRequired rule.
            </summary>
            <param name="referenceProperty">a name of the other property</param>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.AtLeastOneRequiredAttributeBase.ReferenceProperty">
            <summary>
            Gets a name of the other property to check.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.AtLeastOneRequiredAttributeBase.DependsOnOtherProperties">
            <inheritdoc />
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.AtLeastOneRequiredAttributeBase.IsKeyReference">
            <summary>
            Gets or sets a value indicating whether the property value is a reference (primary key) of a domain entity.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.AtLeastOneRequiredAttributeBase.AllowNegative">
            <summary>
            Gets or sets a value indicating whether negative numeric property value is valid.
            Only applicable for numeric properties. Default is false.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.AtLeastOneRequiredAttributeBase.SignificantDigits">
            <summary>
            Gets or sets significant digits when evaluating numeric property value.
            Only applicable for numeric properties. Default is 2.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.AtLeastOneRequiredAttributeBase.EntityInstanceRequired">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.AtLeastOneRequiredAttributeBase.GetErrorDescripton(System.Object,System.Object,System.Type,System.String,System.Collections.Generic.Dictionary{System.String,System.ValueTuple{System.Object,System.String}})">
            <inheritdoc/>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.AtLeastOneRequiredAttributeBase.GetLocalizedErrorMessageFor(System.String,System.String)">
            <summary>
            Implement this method to get a localized error message for current culture.
            </summary>
            <param name="localizedPropName">a localized name of the property that is invalid</param>
            <param name="localizedOtherPropName">a localized name of the other property that is invalid</param>
            <returns>a localized error message for current culture</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.DateSanityAttributeBase">
            <summary>
            A base class for date sanity rule, i.e. not in future and not too far in past (20 years or more).
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.DateSanityAttributeBase.#ctor(A5Soft.CARMA.Domain.Rules.RuleSeverity)">
            <summary>
            Date sanity rule, i.e. not in future and not too far in past (20 years or more).
            </summary>
            <param name="severity">Rule severity, default - <see cref="F:A5Soft.CARMA.Domain.Rules.RuleSeverity.Warning"/>.</param>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.DateSanityAttributeBase.NullIsAlwaysValid">
            <inheritdoc/>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.DateSanityAttributeBase.SupportedValueTypes">
            <inheritdoc/>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.DateSanityAttributeBase.GetErrorDescripton(System.Object,System.Object,System.Type,System.String,System.Collections.Generic.Dictionary{System.String,System.ValueTuple{System.Object,System.String}})">
            <inheritdoc/>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.DateSanityAttributeBase.GetTooOldLocalizedErrorMessageFor(System.String)">
            <summary>
            Implement this method to get a localized error message if the value is too old for current culture.
            </summary>
            <param name="localizedPropName">a localized name of the property that is invalid</param>
            <returns>a localized error message for current culture</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.DateSanityAttributeBase.GetInFutureLocalizedErrorMessageFor(System.String)">
            <summary>
            Implement this method to get a localized error message if the value is in future for current culture.
            </summary>
            <param name="localizedPropName">a localized name of the property that is invalid</param>
            <returns>a localized error message for current culture</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.EmailAddressAttributeBase">
            <summary>
            A base class for email rule.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.EmailAddressAttributeBase.#ctor">
            <summary>
            Email validation rule
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.EmailAddressAttributeBase.AllowMultipleAddresses">
            <summary>
            Gets or sets a value indicating whether multiple email addresses can be specified delimited by ;.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.EmailAddressAttributeBase.NullIsAlwaysValid">
            <inheritdoc/>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.EmailAddressAttributeBase.SupportedValueTypes">
            <inheritdoc/>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.EmailAddressAttributeBase.GetErrorDescripton(System.Object,System.Object,System.Type,System.String,System.Collections.Generic.Dictionary{System.String,System.ValueTuple{System.Object,System.String}})">
            <inheritdoc/>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.EmailAddressAttributeBase.GetLocalizedErrorMessageFor(System.String)">
            <summary>
            Implement this method to get a localized error message for current culture.
            </summary>
            <param name="localizedPropName">a localized name of the property that is invalid</param>
            <returns>a localized error message for current culture</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.EntityRuleAttributeBase">
            <summary>
            A base class for an entity rule, i.e. a rule that is designed for
            a specific domain entity, not a particular property.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.EntityRuleAttributeBase.#ctor">
            <inheritdoc />
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.EntityRuleAttributeBase.VisibleToGenericEngine">
            <summary>
            Whether the rule should be evaluated by a generic data annotations engine
            (that is not aware of rule severity)
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.EntityRuleAttributeBase.RequiresValidationContext">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.EntityRuleAttributeBase.GetValidationResult(System.Object,A5Soft.CARMA.Domain.Metadata.IPropertyMetadata,System.Collections.Generic.IEnumerable{A5Soft.CARMA.Domain.Metadata.IPropertyMetadata})">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.IPropertyValidationAttribute.GetValidationResult(System.Object,A5Soft.CARMA.Domain.Metadata.IPropertyMetadata,System.Collections.Generic.IEnumerable{A5Soft.CARMA.Domain.Metadata.IPropertyMetadata})" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.EntityRuleAttributeBase.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.EntityRuleAttributeBase.GetValidationResult(System.Object)">
            <summary>
            Implement the method to do actual validation.
            </summary>
            <param name="instance">Domain object instance to validate.</param>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.EqualToAttributeBase">
            <summary>
            A base class for (property) values equal rule.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.EqualToAttributeBase.#ctor(System.String)">
            <summary>
            (property) values equal rule
            </summary>
            <param name="referenceProperty">a name of the other property</param>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.EqualToAttributeBase.ReferenceProperty">
            <summary>
            Gets a name of the other property to check.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.EqualToAttributeBase.SignificantDigits">
            <summary>
            Gets or sets significant digits when evaluating numeric property value.
            Only applicable for numeric properties. Default is 2.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.EqualToAttributeBase.StringComparison">
            <summary>
            Gets or sets a string comparision method.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.EqualToAttributeBase.DependsOnOtherProperties">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.IDependsOnProperties.DependsOnProperties" />
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.EqualToAttributeBase.EntityInstanceRequired">
            <inheritdoc />
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.EqualToAttributeBase.SupportedValueTypes">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.EqualToAttributeBase.GetErrorDescripton(System.Object,System.Object,System.Type,System.String,System.Collections.Generic.Dictionary{System.String,System.ValueTuple{System.Object,System.String}})">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.EqualToAttributeBase.GetLocalizedErrorMessageFor(System.String,System.String)">
            <summary>
            Implement this method to get a localized error message for current culture.
            </summary>
            <param name="localizedPropName">a localized name of the property that is invalid</param>
            <param name="localizedOtherPropName">a localized name of the other property that is invalid</param>
            <returns>a localized error message for current culture</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.ExactLengthAttributeBase">
            <summary>
            A base class for exact string length validation.
            </summary> 
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.ExactLengthAttributeBase.#ctor(System.Int32,A5Soft.CARMA.Domain.Rules.RuleSeverity)">
            <summary>
             exact string length rule
            </summary>
            <param name="length">string length (that is valid)</param>
            <param name="severity">a value indicating severity of broken rule</param>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.ExactLengthAttributeBase.RequiredLength">
            <summary>
            Gets a required string length (that is valid).
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.ExactLengthAttributeBase.NullIsAlwaysValid">
            <inheritdoc/>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.ExactLengthAttributeBase.SupportedValueTypes">
            <inheritdoc/>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.ExactLengthAttributeBase.GetErrorDescripton(System.Object,System.Object,System.Type,System.String,System.Collections.Generic.Dictionary{System.String,System.ValueTuple{System.Object,System.String}})">
            <inheritdoc/>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.ExactLengthAttributeBase.GetLocalizedErrorMessageFor(System.String)">
            <summary>
            Implement this method to get a localized error message for current culture.
            </summary>
            <param name="localizedPropName">a localized name of the property that is invalid</param>
            <returns>a localized error message for current culture</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.Extensions">
            <summary>
            Extension methods for data annotation attributes.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.Extensions.GetPropertyDisplayName(System.ComponentModel.DataAnnotations.ValidationContext,System.String)">
            <summary>
            Gets a localized display name for the property if it is defined by <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/>
            (either directly for the property or by the ancestors or interfaces). Returns property name
            if no <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/> defined.
            </summary>
            <param name="validationContext">validation context</param>
            <param name="otherPropertyName">a name of the other (not <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.MemberName"/>)
            property to get a localized display name for</param>
            <returns>a localized display name for the property or property name
            if no <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/> defined</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="validationContext"/> is null</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="validationContext"/> has no
            <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectType"/> set</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="otherPropertyName"/> is null or empty and
            <paramref name="validationContext"/> has no <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.MemberName"/> set</exception>
            <exception cref="T:System.InvalidOperationException">no such property for the type</exception>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.FileExtensionAttributeBase">
            <summary>
            A base class for (allowed) file extension rule.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.FileExtensionAttributeBase.#ctor(A5Soft.CARMA.Domain.Files.FileType[])">
            <summary>
            (allowed) file extension rule
            </summary>
            <param name="allowedTypes">a list of allowed file types</param>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.FileExtensionAttributeBase.AllowedTypes">
            <summary>
            Gets a list of allowed file types.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.FileExtensionAttributeBase.NullIsAlwaysValid">
            <inheritdoc/>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.FileExtensionAttributeBase.SupportedValueTypes">
            <inheritdoc/>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.FileExtensionAttributeBase.GetErrorDescripton(System.Object,System.Object,System.Type,System.String,System.Collections.Generic.Dictionary{System.String,System.ValueTuple{System.Object,System.String}})">
            <inheritdoc/>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.FileExtensionAttributeBase.GetLocalizedErrorMessageFor(System.String,System.String)">
            <summary>
            Implement this method to get a localized error message for current culture.
            </summary>
            <param name="extension">a file extension that is invalid</param>
            <param name="validExtensions">valid file extensions</param>
            <returns>a localized error message for current culture</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.GreaterThanAttributeBase">
            <summary>
            A base class for (property) values greater than rule.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.GreaterThanAttributeBase.#ctor(System.String)">
            <summary>
            Property value is greater than <see cref="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.GreaterThanAttributeBase.ReferenceProperty"/> value rule.
            </summary>
            <param name="referenceProperty">a name of the other property</param>
            <remarks>For <see langword="null"/> values rule is not applied, i.e. always returns valid result.</remarks>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.GreaterThanAttributeBase.ReferenceProperty">
            <summary>
            Gets a name of the other property to check.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.GreaterThanAttributeBase.SignificantDigits">
            <summary>
            Gets or sets significant digits when evaluating numeric property value.
            Only applicable for numeric properties. Default is 2.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.GreaterThanAttributeBase.EvaluateTime">
            <summary>
            Gets or sets a value indicating whether a time component of a <see cref="T:System.DateTime"/>
            values should be evaluated.
            Only applicable for <see cref="T:System.DateTime"/> properties. Default is false.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.GreaterThanAttributeBase.EqualValuesAreValid">
            <summary>
            Gets or sets value indicating whether equal property values are valid as well.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.GreaterThanAttributeBase.DependsOnOtherProperties">
            <inheritdoc />
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.GreaterThanAttributeBase.EntityInstanceRequired">
            <inheritdoc />
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.GreaterThanAttributeBase.NullIsAlwaysValid">
            <inheritdoc />
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.GreaterThanAttributeBase.SupportedValueTypes">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.GreaterThanAttributeBase.GetErrorDescripton(System.Object,System.Object,System.Type,System.String,System.Collections.Generic.Dictionary{System.String,System.ValueTuple{System.Object,System.String}})">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.GreaterThanAttributeBase.GetLocalizedErrorMessageFor(System.String,System.String)">
            <summary>
            Implement this method to get a localized error message for current culture.
            </summary>
            <param name="localizedPropName">a localized name of the property that is invalid</param>
            <param name="localizedOtherPropName">a localized name of the other property that is invalid</param>
            <returns>a localized error message for current culture</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MaxFileSizeAttributeBase">
            <summary>
            A base class for max file size rule.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MaxFileSizeAttributeBase.#ctor(System.Int32,A5Soft.CARMA.Domain.Rules.RuleSeverity)">
            <summary>
            Max file size rule.
            </summary>
            <param name="maxSizeMB">max allowed file size (MB)</param>
            <param name="severity">a severity of the rule</param>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MaxFileSizeAttributeBase.MaxSizeMB">
            <summary>
            Gets a max allowed file size (MB).
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MaxFileSizeAttributeBase.NullIsAlwaysValid">
            <inheritdoc />
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MaxFileSizeAttributeBase.SupportedValueTypes">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MaxFileSizeAttributeBase.GetErrorDescripton(System.Object,System.Object,System.Type,System.String,System.Collections.Generic.Dictionary{System.String,System.ValueTuple{System.Object,System.String}})">
            <inheritdoc/>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MaxFileSizeAttributeBase.GetLocalizedErrorMessageFor(System.Decimal)">
            <summary>
            Implement this method to get a localized error message for current culture.
            </summary>
            <param name="actualSizeMB">file size that is invalid (too large)</param>
            <returns>a localized error message for current culture</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MaxLengthAttributeBase">
            <summary>
            A base class for max string length validation.
            </summary> 
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MaxLengthAttributeBase.#ctor(System.Int32,A5Soft.CARMA.Domain.Rules.RuleSeverity)">
            <summary>
             max string length rule
            </summary>
            <param name="maximumLength">maximum string length</param>
            <param name="severity">a value indicating severity of broken rule</param>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MaxLengthAttributeBase.MaxLength">
            <summary>
            Gets a max allowed string length.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MaxLengthAttributeBase.NullIsAlwaysValid">
            <inheritdoc/>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MaxLengthAttributeBase.SupportedValueTypes">
            <inheritdoc/>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MaxLengthAttributeBase.GetErrorDescripton(System.Object,System.Object,System.Type,System.String,System.Collections.Generic.Dictionary{System.String,System.ValueTuple{System.Object,System.String}})">
            <inheritdoc/>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MaxLengthAttributeBase.GetLocalizedErrorMessageFor(System.String)">
            <summary>
            Implement this method to get a localized error message for current culture.
            </summary>
            <param name="localizedPropName">a localized name of the property that is invalid</param>
            <returns>a localized error message for current culture</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MaxValueAttributeBase">
            <summary>
            A base class for maximal numeric value validation.
            </summary> 
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MaxValueAttributeBase.#ctor(System.Double,System.Int32,A5Soft.CARMA.Domain.Rules.RuleSeverity)">
            <summary>
            max decimal (double, float) value validation
            </summary>
            <param name="maxValue">max allowed value</param>
            <param name="digits">significant digits to compare double or decimal values (default - 2)</param>
            <param name="severity">a value indicating severity of broken rule</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MaxValueAttributeBase.#ctor(System.Int32,A5Soft.CARMA.Domain.Rules.RuleSeverity)">
            <summary>
            max int value validation
            </summary>
            <param name="maxValue">max allowed value</param>
            <param name="severity">a value indicating severity of broken rule</param>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MaxValueAttributeBase.ExpectedIntValue">
            <summary>
            Gets a value indicating wheteher an integer value is expected (otherwise decimal, double or float).
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MaxValueAttributeBase.MaxIntValue">
            <summary>
            Gets a max allowed integer value.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MaxValueAttributeBase.MaxDblValue">
            <summary>
            Gets a max allowed double (decimal, float) value.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MaxValueAttributeBase.Digits">
            <summary>
            Gets significant digits to compare double or decimal values.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MaxValueAttributeBase.NullIsAlwaysValid">
            <inheritdoc/>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MaxValueAttributeBase.SupportedValueTypes">
            <inheritdoc/>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MaxValueAttributeBase.GetErrorDescripton(System.Object,System.Object,System.Type,System.String,System.Collections.Generic.Dictionary{System.String,System.ValueTuple{System.Object,System.String}})">
            <inheritdoc/>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MaxValueAttributeBase.GetLocalizedErrorMessageFor(System.String)">
            <summary>
            Implement this method to get a localized error message for current culture.
            </summary>
            <param name="localizedPropName">a localized name of the property that is invalid</param>
            <returns>a localized error message for current culture</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MinLengthAttributeBase">
            <summary>
            A base class for min string length validation.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MinLengthAttributeBase.#ctor(System.Int32,A5Soft.CARMA.Domain.Rules.RuleSeverity)">
            <summary>
             min string length rule
            </summary>
            <param name="minLength">min string length</param>
            <param name="severity">a value indicating severity of broken rule</param>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MinLengthAttributeBase.MinLength">
            <summary>
            Gets a min allowed string length.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MinLengthAttributeBase.NullIsAlwaysValid">
            <inheritdoc/>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MinLengthAttributeBase.SupportedValueTypes">
            <inheritdoc/>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MinLengthAttributeBase.GetErrorDescripton(System.Object,System.Object,System.Type,System.String,System.Collections.Generic.Dictionary{System.String,System.ValueTuple{System.Object,System.String}})">
            <inheritdoc/>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MinLengthAttributeBase.GetLocalizedErrorMessageFor(System.String)">
            <summary>
            Implement this method to get a localized error message for current culture.
            </summary>
            <param name="localizedPropName">a localized name of the property that is invalid</param>
            <returns>a localized error message for current culture</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MinValueAttributeBase">
            <summary>
            A base class for minimal numeric value validation.
            </summary> 
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MinValueAttributeBase.#ctor(System.Double,System.Int32,A5Soft.CARMA.Domain.Rules.RuleSeverity)">
            <summary>
            min decimal (double, float) value validation
            </summary>
            <param name="minValue">min allowed value</param>
            <param name="digits">significant digits to compare double or decimal values (default - 2)</param>
            <param name="severity">a value indicating severity of broken rule</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MinValueAttributeBase.#ctor(System.Int32,A5Soft.CARMA.Domain.Rules.RuleSeverity)">
            <summary>
            min int value validation
            </summary>
            <param name="minValue">min allowed value</param>
            <param name="severity">a value indicating severity of broken rule</param>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MinValueAttributeBase.ExpectedIntValue">
            <summary>
            Gets a value indicating wheteher an integer value is expected (otherwise decimal, double or float).
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MinValueAttributeBase.MinIntValue">
            <summary>
            Gets a min allowed integer value.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MinValueAttributeBase.MinDblValue">
            <summary>
            Gets a min allowed double (decimal, float) value.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MinValueAttributeBase.Digits">
            <summary>
            Gets significant digits to compare double or decimal values.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MinValueAttributeBase.NullIsAlwaysValid">
            <inheritdoc/>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MinValueAttributeBase.SupportedValueTypes">
            <inheritdoc/>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MinValueAttributeBase.GetErrorDescripton(System.Object,System.Object,System.Type,System.String,System.Collections.Generic.Dictionary{System.String,System.ValueTuple{System.Object,System.String}})">
            <inheritdoc/>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.MinValueAttributeBase.GetLocalizedErrorMessageFor(System.String)">
            <summary>
            Implement this method to get a localized error message for current culture.
            </summary>
            <param name="localizedPropName">a localized name of the property that is invalid</param>
            <returns>a localized error message for current culture</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase">
            <summary>
            A base class for property rules, i.e. for rules that are applied to a property.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase.#ctor">
            <inheritdoc/>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase.Severity">
            <summary>
            Gets a value indicating severity of broken rule. Default - Error.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase.EnabledPropertyName">
            <summary>
            Gets or sets a name of the bool switch property that controls
            whether the rule is enabled for an entity.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase.DependsOnProperties">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.IDependsOnProperties.DependsOnProperties" />
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase.RequiresValidationContext">
            <inheritdoc />
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase.DependsOnOtherProperties">
            <summary>
            Override the property if the validation rules requeries other property values.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase.SupportedValueTypes">
            <summary>
            Override the property to return types of the property values supported by the rule
            (if a limited set is supported). Return null or empty array if there are no limitations (default).
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase.EntityInstanceRequired">
            <summary>
            Override the property if you need an instance of the evaluated entity for the rule.
            Default - false.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase.SupportedEntityType">
            <summary>
            Override the property to return a type of the entity supported by the rule.
            Return null if there are no entity type limitations (default).
            </summary>
            <remarks>Only relevant if <see cref="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase.EntityInstanceRequired"/>.</remarks>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase.NullIsAlwaysValid">
            <summary>
            Override the property if you do not wish to evaluate null values.
            I.e. if null values are always valid. Default - false.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase.GetValidationResult(System.Object,A5Soft.CARMA.Domain.Metadata.IPropertyMetadata,System.Collections.Generic.IEnumerable{A5Soft.CARMA.Domain.Metadata.IPropertyMetadata})">
            <summary>
            Returns a broken rule if the business rule for the entity instance is broken.
            Otherwise - returns null.
            </summary>
            <param name="instance">an instance of the entity to check the rule for</param>
            <param name="propInfo">the metadata of the property to check the rule for</param>
            <param name="relatedProps">the metadata of the properties that are affected (if any)</param>
            <returns>a broken rule if the business rule for the entity instance is broken,
            otherwise - null.</returns>
            <remarks>Only override this method if you need to access relatedProps for
            validation or error description</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase.GetValidationResult(System.Object,System.Object,System.Type,System.String,System.Collections.Generic.Dictionary{System.String,System.ValueTuple{System.Object,System.String}})">
            <summary>
            Override the method to perform actual validation if the rule can produce
            different severity broken rules.
            </summary>
            <param name="value">a value of the property to validate</param>
            <param name="entityInstance">an entity instance to validate</param>
            <param name="entityType">a type of the entity instance to validate
            (because if entityInstance is null, no way to get its type)</param>
            <param name="propertyDisplayName">a display name of the property to use in an error description</param>
            <param name="otherProperties">other properties that the validation rule depends on
            (if any), see <see cref="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase.DependsOnOtherProperties"/></param>
            <returns>a <see cref="T:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase.BrokenRuleResult"/> - if the property value is invalid;
            null - if the property value is valid.</returns>
            <remarks>Either <see cref="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase.GetValidationResult(System.Object,A5Soft.CARMA.Domain.Metadata.IPropertyMetadata,System.Collections.Generic.IEnumerable{A5Soft.CARMA.Domain.Metadata.IPropertyMetadata})"/> or <see cref="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase.GetErrorDescripton(System.Object,System.Object,System.Type,System.String,System.Collections.Generic.Dictionary{System.String,System.ValueTuple{System.Object,System.String}})"/>
            should be overriden by the rule implementation.</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase.GetErrorDescripton(System.Object,System.Object,System.Type,System.String,System.Collections.Generic.Dictionary{System.String,System.ValueTuple{System.Object,System.String}})">
            <summary>
            Override the method to perform actual validation if the rule only produces
            broken rules of the severity specified by <see cref="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase.Severity"/> property.
            </summary>
            <param name="value">a value of the property to validate</param>
            <param name="entityInstance">an entity instance to validate</param>
            <param name="entityType">a type of the entity instance to validate
            (because if entityInstance is null, no way to get its type)</param>
            <param name="propertyDisplayName">a display name of the property to use in an error description</param>
            <param name="otherProperties">other properties that the validation rule depends on
            (if any), see <see cref="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase.DependsOnOtherProperties"/></param>
            <returns>a broken rule description - if the property value is invalid;
            null or empty string - if the property value is valid.</returns>
            <remarks>Either <see cref="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase.GetValidationResult(System.Object,A5Soft.CARMA.Domain.Metadata.IPropertyMetadata,System.Collections.Generic.IEnumerable{A5Soft.CARMA.Domain.Metadata.IPropertyMetadata})"/> or <see cref="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase.GetErrorDescripton(System.Object,System.Object,System.Type,System.String,System.Collections.Generic.Dictionary{System.String,System.ValueTuple{System.Object,System.String}})"/>
            should be overriden by the rule implementation.</remarks>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase.BrokenRuleResult">
            <summary>
            A minimal broken rule result to support both <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)"/>
            and <see cref="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.IPropertyValidationAttribute.GetValidationResult(System.Object,A5Soft.CARMA.Domain.Metadata.IPropertyMetadata,System.Collections.Generic.IEnumerable{A5Soft.CARMA.Domain.Metadata.IPropertyMetadata})"/> methods.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase.BrokenRuleResult.#ctor(System.String,A5Soft.CARMA.Domain.Rules.RuleSeverity)">
            <summary>
            A minimal broken rule result to support both <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)"/>
            and <see cref="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.IPropertyValidationAttribute.GetValidationResult(System.Object,A5Soft.CARMA.Domain.Metadata.IPropertyMetadata,System.Collections.Generic.IEnumerable{A5Soft.CARMA.Domain.Metadata.IPropertyMetadata})"/> methods.
            </summary>
            <param name="description">description for <see cref="P:A5Soft.CARMA.Domain.Rules.BrokenRule.Description"/> and
            <see cref="P:System.ComponentModel.DataAnnotations.ValidationResult.ErrorMessage"/> properties</param>
            <param name="severity">value for <see cref="P:A5Soft.CARMA.Domain.Rules.BrokenRule.Severity"/> property</param>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase.BrokenRuleResult.Description">
            <summary>
            A description for <see cref="P:A5Soft.CARMA.Domain.Rules.BrokenRule.Description"/> and <see cref="P:System.ComponentModel.DataAnnotations.ValidationResult.ErrorMessage"/>
            properties.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.PropertyRuleAttributeBase.BrokenRuleResult.Severity">
            <summary>
            A value for <see cref="P:A5Soft.CARMA.Domain.Rules.BrokenRule.Severity"/> property.
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.RequiredAttributeBase">
            <summary>
            A base class for required rule.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.RequiredAttributeBase.#ctor">
            <inheritdoc />
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.RequiredAttributeBase.IsKeyReference">
            <summary>
            Gets or sets a value indicating whether the property value is a reference (primary key) of a domain entity.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.RequiredAttributeBase.AllowEmptyStrings">
            <summary>
            Gets or sets a value indicating whether an empty string is valid.
            Only applicable for string properties. Default is false.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.RequiredAttributeBase.AllowNegative">
            <summary>
            Gets or sets a value indicating whether negative numeric property value is valid.
            Only applicable for numeric properties. Default is false.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.RequiredAttributeBase.SignificantDigits">
            <summary>
            Gets or sets significant digits when evaluating numeric property value.
            Only applicable for numeric properties. Default is 2.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.RequiredAttributeBase.GetErrorDescripton(System.Object,System.Object,System.Type,System.String,System.Collections.Generic.Dictionary{System.String,System.ValueTuple{System.Object,System.String}})">
            <inheritdoc/>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.RequiredAttributeBase.GetLocalizedErrorMessageFor(System.String)">
            <summary>
            Implement this method to get a localized error message for current culture.
            </summary>
            <param name="localizedPropName">a localized name of the property that is invalid</param>
            <returns>a localized error message for current culture</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.UrlAttributeBase">
            <summary>
            A base class for url value rule.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.UrlAttributeBase.#ctor">
            <summary>
            url format rule
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.UrlAttributeBase.NullIsAlwaysValid">
            <inheritdoc/>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.UrlAttributeBase.SupportedValueTypes">
            <inheritdoc/>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.UrlAttributeBase.GetErrorDescripton(System.Object,System.Object,System.Type,System.String,System.Collections.Generic.Dictionary{System.String,System.ValueTuple{System.Object,System.String}})">
            <inheritdoc/>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.CommonRules.UrlAttributeBase.GetLocalizedErrorMessageFor(System.String)">
            <summary>
            Implement this method to get a localized error message for current culture.
            </summary>
            <param name="localizedPropName">a localized name of the property that is invalid</param>
            <returns>a localized error message for current culture</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.DataAnnotations.DefaultValidationEngine">
            <summary>
            A default implementation of validation engine using validation attributes.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.DefaultValidationEngine.EntityMetadata">
            <inheritdoc cref="P:A5Soft.CARMA.Domain.Rules.IValidationEngine.EntityMetadata" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.DefaultValidationEngine.GetBrokenRules(System.Object,System.String)">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Rules.IValidationEngine.GetBrokenRules(System.Object,System.String)" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.DefaultValidationEngine.GetBrokenRules(System.Object,System.String,System.Boolean)">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Rules.IValidationEngine.GetBrokenRules(System.Object,System.String,System.Boolean)" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.DefaultValidationEngine.GetBrokenRules(System.Object)">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Rules.IValidationEngine.GetBrokenRules(System.Object)" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.DefaultValidationEngine.GetAllBrokenRules(System.Object)">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Rules.IValidationEngine.GetAllBrokenRules(System.Object)" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.DefaultValidationEngine.GetDependentPropertyNames(System.String)">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Rules.IValidationEngine.GetDependentPropertyNames(System.String)" />
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.DataAnnotations.DefaultValidationEngineProvider">
            <summary>
            Default implementation of validation engine provider using validation attributes.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.DefaultValidationEngineProvider.GetValidationEngine(System.Type)">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Rules.IValidationEngineProvider.GetValidationEngine(System.Type)" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.DefaultValidationEngineProvider.GetValidationEngine``1">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Rules.IValidationEngineProvider.GetValidationEngine``1" />
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.DataAnnotations.EntityValidationRule">
            <summary>
            Default implementation of entity validation rule using validation attributes.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.EntityValidationRule.GetValidationResult(System.Object,A5Soft.CARMA.Domain.Metadata.IEntityMetadata)">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Rules.IEntityValidationRule.GetValidationResult(System.Object,A5Soft.CARMA.Domain.Metadata.IEntityMetadata)" />
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.DataAnnotations.IDependsOnProperties">
            <summary>
            Should be used with ValidationAttribute if the validation of the property depends on other properties.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.DataAnnotations.IDependsOnProperties.DependsOnProperties">
            <summary>
            Gets names of the properties that the validation depends on.
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.DataAnnotations.IEntityValidationAttribute">
            <summary>
            A base interface for validation attributes that implement entity level validation with severity.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.IEntityValidationAttribute.GetValidationResult(System.Object,A5Soft.CARMA.Domain.Metadata.IEntityMetadata)">
            <summary>
            Returns a broken rule if the business rule for the entity instance is broken.
            Otherwise - returns null.
            </summary>
            <param name="instance">an instance of the entity to check the rule for</param>
            <param name="entityInfo">the metadata of the entity to check the rule for</param>
            <returns>a broken rule if the business rule for the entity instance is broken,
            otherwise - null.</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.DataAnnotations.IPropertyValidationAttribute">
            <summary>
            A base interface for validation attributes that implement property level validation with severity.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.IPropertyValidationAttribute.GetValidationResult(System.Object,A5Soft.CARMA.Domain.Metadata.IPropertyMetadata,System.Collections.Generic.IEnumerable{A5Soft.CARMA.Domain.Metadata.IPropertyMetadata})">
            <summary>
            Returns a broken rule if the business rule for the entity instance is broken.
            Otherwise - returns null.
            </summary>
            <param name="instance">an instance of the entity to check the rule for</param>
            <param name="propInfo">the metadata of the property to check the rule for</param>
            <param name="relatedProps">the metadata of the properties that are affected (if any)</param>
            <returns>a broken rule if the business rule for the entity instance is broken,
            otherwise - null.</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.DataAnnotations.PropertyValidationRule">
            <summary>
            Default implementation of property validation rules using ValidationAttribute.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.PropertyValidationRule.#ctor(System.ComponentModel.DataAnnotations.ValidationAttribute)">
            <summary>
            constructor
            </summary>
            <param name="attribute">validation attribute</param>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.PropertyValidationRule.GetValidationResult(System.Object,A5Soft.CARMA.Domain.Metadata.IPropertyMetadata,System.Collections.Generic.IEnumerable{A5Soft.CARMA.Domain.Metadata.IPropertyMetadata})">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Rules.IPropertyValidationRule.GetValidationResult(System.Object,A5Soft.CARMA.Domain.Metadata.IPropertyMetadata,System.Collections.Generic.IEnumerable{A5Soft.CARMA.Domain.Metadata.IPropertyMetadata})" />
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.DataAnnotations.PropertyValidationRule.GetRelatedProperties">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Rules.IPropertyValidationRule.GetRelatedProperties" />
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.IEntityValidationRule">
            <summary>
            Common interface for entity level business rules.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.IEntityValidationRule.GetValidationResult(System.Object,A5Soft.CARMA.Domain.Metadata.IEntityMetadata)">
            <summary>
            Returns a broken rule if the business rule for the entity instance is broken.
            Otherwise - returns null.
            </summary>
            <param name="instance">an instance of the entity to check the rule for</param>
            <param name="entityInfo">the metadata of the entity to check the rule for</param>
            <returns>a broken rule if the business rule for the entity instance is broken,
            otherwise - null.</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.IPropertyValidationRule">
            <summary>
            Common interface for property validation business rules.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.IPropertyValidationRule.GetValidationResult(System.Object,A5Soft.CARMA.Domain.Metadata.IPropertyMetadata,System.Collections.Generic.IEnumerable{A5Soft.CARMA.Domain.Metadata.IPropertyMetadata})">
            <summary>
            Returns a broken rule if the business rule for the entity instance is broken.
            Otherwise - returns null.
            </summary>
            <param name="instance">an instance of the entity to check the rule for</param>
            <param name="propInfo">the metadata of the property to check the rule for</param>
            <param name="relatedProps">the metadata of the properties that are affected (if any)</param>
            <returns>a broken rule if the business rule for the entity instance is broken,
            otherwise - null.</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.IPropertyValidationRule.GetRelatedProperties">
            <summary>
            Gets a list of properties (their names) which values are used by the validation rule (if any).
            </summary>
            <returns>a list of properties (their names) which values are used by the validation rule (if any)</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.IValidationEngine">
            <summary>
            Common interface for validation engines.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Domain.Rules.IValidationEngine.EntityMetadata">
            <summary>
            Gets a metadata for the entity that is the target of the validation engine.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.IValidationEngine.GetBrokenRules(System.Object,System.String)">
            <summary>
            Checks business rules for the property specified (excluding dependent properties)
            and returns a list of broken rules. (empty list, if no broken rules)
            </summary>
            <param name="instance">an instance of the entity to check the rules for</param>
            <param name="propName">a property (name) to check the rules for</param>
            <returns>a list of broken rules (empty list, if no broken rules)</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.IValidationEngine.GetBrokenRules(System.Object,System.String,System.Boolean)">
            <summary>
            Checks business rules for the property specified and returns a list of broken rules.
            (empty list, if no broken rules)
            </summary>
            <param name="instance">an instance of the entity to check the rules for</param>
            <param name="propName">a property (name) to check the rules for</param>
            <param name="includeDependentProps">whether to check dependent properties as well</param>
            <returns>a list of broken rules (empty list, if no broken rules)</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.IValidationEngine.GetBrokenRules(System.Object)">
            <summary>
            Checks entity level business rules and returns a list of broken rules.
            (empty list, if no broken rules)
            </summary>
            <param name="instance">an instance of the entity to check the rules for</param>
            <returns>a list of broken rules (empty list, if no broken rules)</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.IValidationEngine.GetAllBrokenRules(System.Object)">
            <summary>
            Checks all business rules for the entity instance and returns a list of broken rules.
            (empty list, if no broken rules)
            </summary>
            <param name="instance">an instance of the entity to check the rules for</param>
            <returns>a list of broken rules (empty list, if no broken rules)</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.IValidationEngine.GetDependentPropertyNames(System.String)">
            <summary>
            Gets a list of properties (their names) which validation depends
            on the value of the property specified.
            </summary>
            <param name="propName">a name of the property to get dependent properties for</param>
            <returns>a list of properties (their names) which validation depends
            on the value of the property specified</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.IValidationEngineProvider">
            <summary>
            Common interface for validation providers (services) for use in dependency injection.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.IValidationEngineProvider.GetValidationEngine(System.Type)">
            <summary>
            Gets a validation engine for the entity type specified.
            </summary>
            <param name="entityType">a type of the entity to get a validation engine for</param>
            <returns>validation engine for the entity type specified</returns>
        </member>
        <member name="M:A5Soft.CARMA.Domain.Rules.IValidationEngineProvider.GetValidationEngine``1">
            <summary>
            Gets a validation engine for the entity type specified.
            </summary>
            <typeparam name="T">a type of the entity to get a validation engine for</typeparam>
            <returns>validation engine for the entity type specified</returns>
        </member>
        <member name="T:A5Soft.CARMA.Domain.Rules.RuleSeverity">
            <summary>
            Values for validation rule severities.
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Domain.Rules.RuleSeverity.Error">
            <summary>
            Represents a serious  business rule violation
            that should cause an object to be considered invalid.
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Domain.Rules.RuleSeverity.Warning">
            <summary>
            Represents a business rule  violation that should be displayed to the user,
            yet should not make an object invalid.
            </summary>
            <remarks>Should cause dialog "Are you sure?"</remarks>
        </member>
        <member name="F:A5Soft.CARMA.Domain.Rules.RuleSeverity.Information">
            <summary>
            Represents a business rule result that should be displayed to the user, but which is less
            severe than a warning.
            </summary>
            <remarks>Should NOT cause dialog "Are you sure?", only display field labels.</remarks>
        </member>
        <member name="T:A5Soft.CARMA.Domain.ServiceAttribute">
            <summary>
            Used to designate a service interface that should be added to IoC container.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Domain.ServiceAttribute.#ctor(A5Soft.CARMA.Domain.ServiceLifetime)">
            <summary>
            Default constructor for ServiceAttribute.
            </summary>
            <param name="lifetime">a lifetime of the service within an IoC container</param>
        </member>
        <member name="P:A5Soft.CARMA.Domain.ServiceAttribute.Lifetime">
            <summary>
            Gets a lifetime of the use case within a IoC container. Default is Transient.
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Domain.ServiceLifetime">
            <summary>
            Defines use case life time in a DI container.
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Domain.ServiceLifetime.Transient">
            <summary>
            created every time a use case is injected or requested
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Domain.ServiceLifetime.Scoped">
            <summary>
            Created per scope.
            In a web application, every web request creates a new separated service scope.
            That means scoped use cases are generally created per web request.
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Domain.ServiceLifetime.Singleton">
            <summary>
            Created per DI container.
            That generally means that they are created only one time per application
            and then used for whole the application life time.
            </summary>
        </member>
    </members>
</doc>
