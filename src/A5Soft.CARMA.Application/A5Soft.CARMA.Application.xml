<?xml version="1.0"?>
<doc>
    <assembly>
        <name>A5Soft.CARMA.Application</name>
    </assembly>
    <members>
        <member name="T:A5Soft.CARMA.Application.ApplicationServiceInfo">
            <summary>
            Basic info about an application service for DI.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.ApplicationServiceInfo.#ctor(System.Type)">
            <summary>
            Creates a new <see cref="T:A5Soft.CARMA.Application.ApplicationServiceInfo"/> instance for the app service type specified.
            </summary>
            <param name="implementationType">the app service type to get info about</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.ApplicationServiceInfo.#ctor(A5Soft.CARMA.Domain.IExternalServiceDescriptor)">
            <summary>
            Creates a new <see cref="T:A5Soft.CARMA.Application.ApplicationServiceInfo"/> instance for the external service specified.
            </summary>
            <param name="externalService">an external service to get info about</param>
        </member>
        <member name="P:A5Soft.CARMA.Application.ApplicationServiceInfo.InterfaceType">
            <summary>
            a type of the service (interface)
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.ApplicationServiceInfo.ImplementationType">
            <summary>
            a service (interface) implementation
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.ApplicationServiceInfo.Lifetime">
            <summary>
            a service life time (scope)
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.ApplicationServiceInfo.AllowMultiple">
            <summary>
            whether there could be multiple implementations of this application service
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.ApplicationServiceInfo.IsDuplicateFor(A5Soft.CARMA.Application.ApplicationServiceInfo)">
            <summary>
            Gets a value indicating whether this service is an implementation of the same service as the other one.
            </summary>
            <param name="otherService">the other service</param>
            <returns>a value indicating whether this service is an implementation of the same service as the other one</returns>
        </member>
        <member name="T:A5Soft.CARMA.Application.Authorization.AuthenticationStateProviderBase">
            <summary>
            a base class for <see cref="T:A5Soft.CARMA.Application.Authorization.IAuthenticationStateProvider"/> implementations.
            </summary>
        </member>
        <member name="E:A5Soft.CARMA.Application.Authorization.AuthenticationStateProviderBase.IdentityChanged">
            <inheritdoc cref="E:A5Soft.CARMA.Application.Authorization.IAuthenticationStateProvider.IdentityChanged"/>
        </member>
        <member name="M:A5Soft.CARMA.Application.Authorization.AuthenticationStateProviderBase.GetIdentityAsync">
            <inheritdoc cref="M:A5Soft.CARMA.Application.Authorization.IAuthenticationStateProvider.GetIdentityAsync"/>
        </member>
        <member name="M:A5Soft.CARMA.Application.Authorization.AuthenticationStateProviderBase.NotifyIdentityChangedAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc cref="M:A5Soft.CARMA.Application.Authorization.IAuthenticationStateProvider.NotifyIdentityChangedAsync(System.Security.Claims.ClaimsIdentity)"/>
        </member>
        <member name="P:A5Soft.CARMA.Application.Authorization.AuthenticationStateProviderBase.RevalidationInterval">
            <summary>
            Gets the interval between revalidation attempts.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.Authorization.AuthenticationStateProviderBase.ValidateIdentityAsync(System.Security.Claims.ClaimsIdentity,System.Threading.CancellationToken)">
            <summary>
            Determines whether the <see cref="T:System.Security.Claims.ClaimsIdentity"/> for the current user is still valid.
            </summary>
            <param name="identity">The current <see cref="T:System.Security.Claims.ClaimsIdentity"/>.</param>
            <param name="ct">A <see cref="T:System.Threading.CancellationToken"/> to observe while performing the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that resolves as true if the <paramref name="identity"/> is still valid,
            or false if it is not.</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.Authorization.AuthenticationStateProviderBase.TryGetIdentityFromEnvironmentAsync">
            <summary>
            Tries to get the current user identity from the app environment (e.g. cookie).
            </summary>
            <returns>current user identity (if any) from the app environment</returns>
            <remarks>Never throw exceptions, return null if failed</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.Authorization.AuthenticationStateProviderBase.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:A5Soft.CARMA.Application.Authorization.Default.AuthorizationBaseAttribute">
            <summary>
            Authorization attribute for default authorization implementation.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.Authorization.Default.AuthorizationBaseAttribute.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.Authorization.Default.AuthorizationBaseAttribute.IsAuthorized(System.Type,System.Security.Claims.ClaimsIdentity,A5Soft.CARMA.Application.ILogger,System.Boolean)">
            <summary>
            Returns true if the user identified by the identity is authorized to invoke use case of useCaseType
            without parameters (i.e. whether the user is authorized to invoke a use case at least for some parameters);
            otherwise returns false or throws a not authorized exception if specified by the parameter throwOnUnauthorized. 
            </summary>
            <param name="useCaseType">a type of the use case that is authorized</param>
            <param name="identity">user identity</param>
            <param name="throwOnUnauthorized">whether to throw an application specific not authorized exception
            if the user is not authorized</param>
            <param name="logger">a logger to use for authorization warnings</param>
            <returns></returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.Authorization.Default.AuthorizationBaseAttribute.Authorize(System.Security.Claims.ClaimsIdentity,System.Type,A5Soft.CARMA.Application.ILogger,System.Boolean)">
            <summary>
            Override this method to implement actual authorization for a use case without parameters
            (i.e. whether the user is authorized to invoke a use case at least for some parameters)
            </summary>
            <param name="identity">user identity (guaranteed not null and authenticated)</param>
            <param name="useCaseType">a type of the use case that is authorized</param>
            <param name="throwOnUnauthorized">whether to throw an application specific not authorized exception
            if the user is not authorized</param>
            <param name="logger">a logger to use for authorization warnings</param>
            <returns>true if the user is authorized; false otherwise</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.Authorization.Default.AuthorizationBaseAttribute.ThrowNotAuthenticatedException">
            <summary>
            Override this method to throw an application specific not authenticated exception.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.Authorization.Default.AuthorizationBaseAttribute.UseCaseType">
            <summary>
            Override this method to 
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Application.Authorization.Default.DefaultAuthorizationProvider">
            <summary>
            Default implementation of IAuthorizationProvider using authorization attributes.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.Authorization.Default.DefaultAuthorizationProvider.GetAuthorizer(System.Type)">
            <inheritdoc cref="M:A5Soft.CARMA.Application.Authorization.IAuthorizationProvider.GetAuthorizer(System.Type)" />
        </member>
        <member name="M:A5Soft.CARMA.Application.Authorization.Default.DefaultAuthorizationProvider.GetAuthorizer``1">
            <inheritdoc cref="M:A5Soft.CARMA.Application.Authorization.IAuthorizationProvider.GetAuthorizer(System.Type)" />
        </member>
        <member name="P:A5Soft.CARMA.Application.Authorization.Default.UseCaseAuthorizer.UseCaseType">
            <inheritdoc cref="P:A5Soft.CARMA.Application.Authorization.IUseCaseAuthorizer.UseCaseType" />
        </member>
        <member name="M:A5Soft.CARMA.Application.Authorization.Default.UseCaseAuthorizer.IsAuthorized(System.Security.Claims.ClaimsIdentity,System.Boolean)">
            <inheritdoc cref="M:A5Soft.CARMA.Application.Authorization.IUseCaseAuthorizer.IsAuthorized(System.Security.Claims.ClaimsIdentity,System.Boolean)" />
        </member>
        <member name="T:A5Soft.CARMA.Application.Authorization.IAuthenticationStateProvider">
            <summary>
            interface for a service that manages current user state
            </summary>                      
        </member>
        <member name="M:A5Soft.CARMA.Application.Authorization.IAuthenticationStateProvider.GetIdentityAsync">
            <summary>
            Asynchronously gets a <see cref="T:System.Security.Claims.ClaimsIdentity"/> for the current user.
            </summary>
            <returns>A task that, when resolved, gives a <see cref="T:System.Security.Claims.ClaimsIdentity"/> for the current user.</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.Authorization.IAuthenticationStateProvider.NotifyIdentityChangedAsync(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Raises the <see cref="E:A5Soft.CARMA.Application.Authorization.IAuthenticationStateProvider.IdentityChanged"/> event.
            </summary>
            <param name="updatedIdentity">An updated <see cref="T:System.Security.Claims.ClaimsIdentity"/>.</param>
        </member>
        <member name="E:A5Soft.CARMA.Application.Authorization.IAuthenticationStateProvider.IdentityChanged">
            <summary>
            An event that provides notification when the <see cref="T:System.Security.Claims.ClaimsIdentity"/>
            has changed. For example, this event may be raised if a user logs in or out.
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Application.Authorization.IdentityChangedHandler">
            <summary>
            A handler for the <see cref="E:A5Soft.CARMA.Application.Authorization.AuthenticationStateProviderBase.IdentityChanged"/> event.
            </summary>
            <param name="task">A <see cref="T:System.Threading.Tasks.Task"/> that supplies the updated <see cref="T:System.Security.Claims.ClaimsIdentity"/>.</param>
        </member>
        <member name="T:A5Soft.CARMA.Application.Authorization.IAuthorizationProvider">
            <summary>
            A base interface for authorization (engine) providers.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.Authorization.IAuthorizationProvider.GetAuthorizer(System.Type)">
            <summary>
            Gets an authorizer for the use case type specified.
            </summary>
            <param name="useCaseType">use case type to get an authorizer for</param>
            <returns>an authorizer for the use case type specified</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.Authorization.IAuthorizationProvider.GetAuthorizer``1">
            <summary>
            Gets an authorizer for the use case type specified.
            </summary>
            <typeparam name="T">use case type to get an authorizer for</typeparam>
            <returns>an authorizer for the use case type specified</returns>
        </member>
        <member name="T:A5Soft.CARMA.Application.Authorization.IUseCaseAuthorizer">
            <summary>
            A base interface for authorization (engine) method for a particular use case type..
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.Authorization.IUseCaseAuthorizer.UseCaseType">
            <summary>
            Gets a type of a use case that the authorizer is for.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.Authorization.IUseCaseAuthorizer.IsAuthorized(System.Security.Claims.ClaimsIdentity,System.Boolean)">
            <summary>
            Returns true if the user identified by the identity is authorized to invoke use case
            (i.e. whether the user is authorized to invoke a use case at least for some parameters);
            otherwise returns false or throws a not authorized exception if specified by the parameter throwOnUnauthorized. 
            </summary>
            <param name="identity">user identity</param>
            <param name="throwOnUnauthorized">whether to throw an application specific not authorized exception
            if the user is not authorized</param>
        </member>
        <member name="T:A5Soft.CARMA.Application.AuthorizedUseCaseBase">
            <summary>
            A base class for all use cases that implement authorization.
            </summary>
            <remarks>Authorization is only meaningful for remote execution.</remarks>
        </member>
        <member name="F:A5Soft.CARMA.Application.AuthorizedUseCaseBase.Authorizer">
            <summary>
            Gets an authorizer for the use case.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.AuthorizedUseCaseBase.#ctor(A5Soft.CARMA.Application.Authorization.IAuthenticationStateProvider,A5Soft.CARMA.Application.Authorization.IAuthorizationProvider,A5Soft.CARMA.Application.DataPortal.IClientDataPortal,A5Soft.CARMA.Domain.Rules.IValidationEngineProvider,A5Soft.CARMA.Domain.Metadata.IMetadataProvider,A5Soft.CARMA.Application.ILogger)">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Application.AuthorizedUseCaseBase.GetIdentityAsync">
            <inheritdoc cref="M:A5Soft.CARMA.Application.IAuthorizedUseCase.GetIdentityAsync" />
        </member>
        <member name="M:A5Soft.CARMA.Application.AuthorizedUseCaseBase.UpdateIdentityAsync(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Updates a current identity of the user.
            </summary>
            <param name="updatedIdentity">an updated identity of the user</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.AuthorizedUseCaseBase.CanInvokeAsync(System.Boolean)">
            <inheritdoc cref="M:A5Soft.CARMA.Application.IAuthorizedUseCase.CanInvokeAsync(System.Boolean)" />
        </member>
        <member name="T:A5Soft.CARMA.Application.CommandUseCaseBase">
            <summary>
            A base use case for a parameterless command operation (that executes a command without any parameters).
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.CommandUseCaseBase.#ctor(A5Soft.CARMA.Application.Authorization.IAuthenticationStateProvider,A5Soft.CARMA.Application.Authorization.IAuthorizationProvider,A5Soft.CARMA.Application.DataPortal.IClientDataPortal,A5Soft.CARMA.Domain.Rules.IValidationEngineProvider,A5Soft.CARMA.Domain.Metadata.IMetadataProvider,A5Soft.CARMA.Application.ILogger)">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Application.CommandUseCaseBase.InvokeAsync">
            <summary>
            Executes the command.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.CommandUseCaseBase.ExecuteAsync">
            <summary>
            Implement this method to execute the command.
            </summary>
            <remarks>At this stage user has already been authorized.
            This method is always executed on server side (if data portal is configured).</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.CommandUseCaseBase.BeforeDataPortalAsync">
            <summary>
            Implement this method for any actions that should be taken before remote invocation.
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.CommandUseCaseBase.AfterDataPortalAsync">
            <summary>
            Implement this method for any actions that should be taken after
            a successful remote invocation. (e.g. clear local cache)
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.CommandUseCaseBase.GetButtonTitle">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetButtonTitle"/>
        </member>
        <member name="M:A5Soft.CARMA.Application.CommandUseCaseBase.GetMenuTitle">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetMenuTitle"/>
        </member>
        <member name="T:A5Soft.CARMA.Application.CommandWithParameterUseCaseBase`1">
            <summary>
            A base use case for a command operation (that executes a command using the parameters provided without a result).
            </summary>
            <typeparam name="TParameter">a type of the command parameter(must be json serializable,
            i.e. either a primitive or a POCO)</typeparam>
        </member>
        <member name="M:A5Soft.CARMA.Application.CommandWithParameterUseCaseBase`1.#ctor(A5Soft.CARMA.Application.Authorization.IAuthenticationStateProvider,A5Soft.CARMA.Application.Authorization.IAuthorizationProvider,A5Soft.CARMA.Application.DataPortal.IClientDataPortal,A5Soft.CARMA.Domain.Rules.IValidationEngineProvider,A5Soft.CARMA.Domain.Metadata.IMetadataProvider,A5Soft.CARMA.Application.ILogger)">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Application.CommandWithParameterUseCaseBase`1.InvokeAsync(`0)">
            <summary>
            Executes the command using the parameter provided.
            </summary>
            <param name="parameter">a parameter for the command</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.CommandWithParameterUseCaseBase`1.ExecuteAsync(`0)">
            <summary>
            Implement this method to execute the command.
            </summary>
            <param name="parameter">a parameter for the command</param>
            <remarks>At this stage user has already been authorized.
            The parameter is NOT guaranteed to be not null (as it could be a valid option).
            This method is always executed on server side (if data portal is configured).</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.CommandWithParameterUseCaseBase`1.BeforeDataPortalAsync(`0)">
            <summary>
            Implement this method for any actions that should be taken before remote invocation.
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.CommandWithParameterUseCaseBase`1.AfterDataPortalAsync(`0)">
            <summary>
            Implement this method for any actions that should be taken after
            a successful remote invocation. (e.g. clear local cache)
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.CommandWithParameterUseCaseBase`1.GetButtonTitle">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetButtonTitle"/>
        </member>
        <member name="M:A5Soft.CARMA.Application.CommandWithParameterUseCaseBase`1.GetMenuTitle">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetMenuTitle"/>
        </member>
        <member name="M:A5Soft.CARMA.Application.CommandWithParameterUseCaseBase`1.GetParameterMetadata">
            <summary>
            Gets metadata for the command parameter.
            Returns null if the parameter is not a class or an interface.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.CommandWithParameterUseCaseBase`1.Validate(`0)">
            <summary>
            Validates a parameter (as a POCO object) and returns a broken rules collection
            that can be used to determine whether the parameter is valid and what are the
            broken rules (if invalid).
            </summary>
            <param name="parameter">parameter to validate</param>
            <remarks>Override this method in order to implement custom validation
            or disable validation by returning a new (empty) <see cref="T:A5Soft.CARMA.Domain.Rules.BrokenRulesCollection"/>.</remarks>
        </member>
        <member name="T:A5Soft.CARMA.Application.ConfigurationBase">
            <summary>
            A base class for app configuration POCO's.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.ConfigurationBase.InterfaceType">
            <summary>
            A type of the configuration interface to add as a singleton service.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.ConfigurationBase.RootSection">
            <summary>
            A root (parent) section of a configuration where the config data is located (if any).
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.ConfigurationBase.Init(System.String,System.Boolean)">
            <summary>
            Override the method to init configuration with calculated values.
            </summary>
            <param name="appPath">a path where the app files are located</param>
            <param name="isDevelopment">whether its a development environment</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.ConfigurationBase.Validate">
            <summary>
            Validates the state of the config data. Throws exception if not valid.
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Application.IAppConfigurationProvider">
            <summary>
            App configuration provider that creates a poco configuration object,
            binds it to the actual app configuration data and adds as a singleton service.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.IAppConfigurationProvider.AddConfigurationFor(System.Type)">
            <summary>
            Creates a poco configuration object of the specified type,
            binds it to the actual app configuration data and adds as a singleton service.
            </summary>
            <param name="configurationType">a type of the poco configuration object to add</param>
        </member>
        <member name="T:A5Soft.CARMA.Application.CreateUseCaseBase`2">
            <summary>
            Creates a new entity based on create criteria and returns either the created entity or its id.
            </summary>
            <typeparam name="TCriteria">type of the create criteria (must be json serializable,
            i.e. either a primitive, a POCO or an interface)</typeparam>
            <typeparam name="TResult">type of the result returned (either the created entity, its id or other result);
            must be serializable</typeparam>
        </member>
        <member name="M:A5Soft.CARMA.Application.CreateUseCaseBase`2.#ctor(A5Soft.CARMA.Application.Authorization.IAuthenticationStateProvider,A5Soft.CARMA.Application.Authorization.IAuthorizationProvider,A5Soft.CARMA.Application.DataPortal.IClientDataPortal,A5Soft.CARMA.Domain.Rules.IValidationEngineProvider,A5Soft.CARMA.Domain.Metadata.IMetadataProvider,A5Soft.CARMA.Application.ILogger)">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Application.CreateUseCaseBase`2.InvokeAsync(`0)">
            <summary>
            Executes the command using the parameter provided.
            </summary>
            <param name="criteria">a parameter for the command</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.CreateUseCaseBase`2.ExecuteAsync(`0)">
            <summary>
            Implement this method to execute the command.
            </summary>
            <param name="criteria">a create criteria</param>
            <remarks>At this stage user has already been authorized.
            The parameter is NOT guaranteed to be not null (as it could be a valid option).
            This method is always executed on server side (if data portal is configured).</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.CreateUseCaseBase`2.GetMetadata">
            <summary>
            Gets metadata for the create criteria.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.CreateUseCaseBase`2.GetButtonTitle">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetButtonTitle"/>
        </member>
        <member name="M:A5Soft.CARMA.Application.CreateUseCaseBase`2.GetMenuTitle">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetMenuTitle"/>
        </member>
        <member name="M:A5Soft.CARMA.Application.CreateUseCaseBase`2.BeforeDataPortalAsync(`0)">
            <summary>
            Implement this method for any actions that should be taken before remote invocation.
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.CreateUseCaseBase`2.AfterDataPortalAsync(`0)">
            <summary>
            Implement this method for any actions that should be taken after
            a successful remote invocation. (e.g. clear local cache)
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Application.DataPortal.ClientDataPortal">
            <summary>
            A default implementation of IClientDataPortal that enables remote method invocation
            for a use case InvokeAsync method with different parameters sets.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.ClientDataPortal.#ctor(A5Soft.CARMA.Application.DataPortal.IDataPortalProxy)">
            <summary>
            constructor for DI
            </summary>
            <param name="dataPortalProxy">remote client portal to use</param>
        </member>
        <member name="P:A5Soft.CARMA.Application.DataPortal.ClientDataPortal.IsRemote">
            <inheritdoc cref="P:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.IsRemote" />
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.ClientDataPortal.FetchAsync``1(System.Type,System.Security.Claims.ClaimsIdentity,System.Threading.CancellationToken)">
            <inheritdoc cref="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.FetchAsync``1(System.Type,System.Security.Claims.ClaimsIdentity,System.Threading.CancellationToken)" />
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.ClientDataPortal.FetchAsync``2(System.Type,``0,System.Security.Claims.ClaimsIdentity,System.Threading.CancellationToken)">
            <inheritdoc cref="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.FetchAsync``2(System.Type,``0,System.Security.Claims.ClaimsIdentity,System.Threading.CancellationToken)" />
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.ClientDataPortal.DownloadAsync``1(System.Type,``0,System.Security.Claims.ClaimsIdentity,System.Threading.CancellationToken)">
            <inheritdoc cref="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.DownloadAsync``1(System.Type,``0,System.Security.Claims.ClaimsIdentity,System.Threading.CancellationToken)" />
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.ClientDataPortal.FetchAsync``3(System.Type,``0,``1,System.Security.Claims.ClaimsIdentity,System.Threading.CancellationToken)">
            <inheritdoc cref="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.FetchAsync``3(System.Type,``0,``1,System.Security.Claims.ClaimsIdentity,System.Threading.CancellationToken)" />
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.ClientDataPortal.FetchAsync``4(System.Type,``0,``1,``2,System.Security.Claims.ClaimsIdentity,System.Threading.CancellationToken)">
            <inheritdoc cref="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.FetchAsync``4(System.Type,``0,``1,``2,System.Security.Claims.ClaimsIdentity,System.Threading.CancellationToken)" />
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.ClientDataPortal.FetchUnauthenticatedAsync``1(System.Type,System.Threading.CancellationToken)">
            <inheritdoc cref="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.FetchUnauthenticatedAsync``1(System.Type,System.Threading.CancellationToken)" />
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.ClientDataPortal.FetchUnauthenticatedAsync``2(System.Type,``0,System.Threading.CancellationToken)">
            <inheritdoc cref="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.FetchUnauthenticatedAsync``2(System.Type,``0,System.Threading.CancellationToken)" />
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.ClientDataPortal.FetchUnauthenticatedAsync``3(System.Type,``0,``1,System.Threading.CancellationToken)">
            <inheritdoc cref="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.FetchUnauthenticatedAsync``3(System.Type,``0,``1,System.Threading.CancellationToken)" />
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.ClientDataPortal.FetchUnauthenticatedAsync``4(System.Type,``0,``1,``2,System.Threading.CancellationToken)">
            <inheritdoc cref="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.FetchUnauthenticatedAsync``4(System.Type,``0,``1,``2,System.Threading.CancellationToken)" />
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.ClientDataPortal.DownloadUnauthenticatedAsync``1(System.Type,``0,System.Threading.CancellationToken)">
            <inheritdoc cref="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.DownloadUnauthenticatedAsync``1(System.Type,``0,System.Threading.CancellationToken)" />
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.ClientDataPortal.InvokeAsync(System.Type,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc cref="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.InvokeAsync(System.Type,System.Security.Claims.ClaimsIdentity)" />
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.ClientDataPortal.InvokeAsync``1(System.Type,``0,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc cref="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.InvokeAsync``1(System.Type,``0,System.Security.Claims.ClaimsIdentity)" />
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.ClientDataPortal.InvokeAsync``2(System.Type,``0,``1,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc cref="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.InvokeAsync``2(System.Type,``0,``1,System.Security.Claims.ClaimsIdentity)" />
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.ClientDataPortal.InvokeAsync``3(System.Type,``0,``1,``2,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc cref="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.InvokeAsync``3(System.Type,``0,``1,``2,System.Security.Claims.ClaimsIdentity)" />
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.ClientDataPortal.InvokeUnauthenticatedAsync(System.Type)">
            <inheritdoc cref="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.InvokeUnauthenticatedAsync(System.Type)" />
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.ClientDataPortal.InvokeUnauthenticatedAsync``1(System.Type,``0)">
            <inheritdoc cref="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.InvokeUnauthenticatedAsync``1(System.Type,``0)" />
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.ClientDataPortal.InvokeUnauthenticatedAsync``2(System.Type,``0,``1)">
            <inheritdoc cref="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.InvokeUnauthenticatedAsync``2(System.Type,``0,``1)" />
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.ClientDataPortal.InvokeUnauthenticatedAsync``3(System.Type,``0,``1,``2)">
            <inheritdoc cref="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.InvokeUnauthenticatedAsync``3(System.Type,``0,``1,``2)" />
        </member>
        <member name="T:A5Soft.CARMA.Application.DataPortal.DataPortalClaim">
            <summary>
            A container for <see cref="T:System.Security.Claims.Claim"/> serialization within <see cref="T:A5Soft.CARMA.Application.DataPortal.DataPortalRequest"/>.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.DataPortalClaim.#ctor">
            <summary>
            new (empty instance)
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.DataPortalClaim.#ctor(System.Security.Claims.Claim)">
            <summary>
            new instance that contains the data of the <paramref name="claim"/>
            </summary>
            <param name="claim">a claim to create a new DataPortalClaim for</param>
        </member>
        <member name="P:A5Soft.CARMA.Application.DataPortal.DataPortalClaim.ClaimType">
            <inheritdoc cref="P:System.Security.Claims.Claim.Type"/>
        </member>
        <member name="P:A5Soft.CARMA.Application.DataPortal.DataPortalClaim.ClaimValue">
            <inheritdoc cref="P:System.Security.Claims.Claim.Value"/>
        </member>
        <member name="P:A5Soft.CARMA.Application.DataPortal.DataPortalClaim.ClaimValueType">
            <inheritdoc cref="P:System.Security.Claims.Claim.ValueType"/>
        </member>
        <member name="P:A5Soft.CARMA.Application.DataPortal.DataPortalClaim.Issuer">
            <inheritdoc cref="P:System.Security.Claims.Claim.Issuer"/>
        </member>
        <member name="P:A5Soft.CARMA.Application.DataPortal.DataPortalClaim.OriginalIssuer">
            <inheritdoc cref="P:System.Security.Claims.Claim.OriginalIssuer"/>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.DataPortalClaim.ToClaim">
            <summary>
            Gets a new <see cref="T:System.Security.Claims.Claim"/> using the serialized data. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.DataPortalClaim.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.DataPortalClaim.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:A5Soft.CARMA.Application.DataPortal.DataPortalParameter">
            <summary>
            Handles remote method parameter serialization.  
            </summary>
            <remarks>For primitive and POCO types serializes values into json strings.
            For interfaces uses JObject extensions to (de)serialize by interface without a concrete class.</remarks>
        </member>
        <member name="P:A5Soft.CARMA.Application.DataPortal.DataPortalParameter.ParameterType">
            <summary>
            Gets or sets a type of the remote method parameter.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.DataPortal.DataPortalParameter.SerializedValue">
            <summary>
            Gets or sets serialized parameter as a json string.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.DataPortalParameter.GetValue">
            <summary>
            Gets a deserialized value of the parameter.
            </summary>
            <returns>a deserialized value of the parameter</returns>
            <remarks>For primitive and POCO types serializes values into json strings.
            For interfaces uses JObject extensions to (de)serialize by interface without a concrete class.</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.DataPortalParameter.GetValue``1">
            <summary>
            Gets a deserialized value of the parameter.
            </summary>
            <typeparam name="T">a requested type of the parameter; must match ParameterType</typeparam>
            <returns>a deserialized value of the parameter</returns>
            <remarks>For primitive and POCO types serializes values into json strings.
            For interfaces uses JObject extensions to (de)serialize by interface without a concrete class.</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.DataPortalParameter.NewParameter``1(``0)">
            <summary>
            Creates an instance of DataPortalParameter for a remote method parameter value.
            </summary>
            <typeparam name="T">a type of the parameter</typeparam>
            <param name="forValue">a value of the parameter</param>
            <returns>an instance of DataPortalParameter for a remote method parameter value</returns>
        </member>
        <member name="T:A5Soft.CARMA.Application.DataPortal.DataPortalRequest">
            <summary>
            A serializable wrapper for the data portal request.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.DataPortal.DataPortalRequest.RemoteServiceInterface">
            <summary>
            Gets or sets a type of the remote service interface (to resolve configured version on server
            and invoke data portal method.)
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.DataPortal.DataPortalRequest.Culture">
            <summary>
            Gets or sets user culture.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.DataPortal.DataPortalRequest.UICulture">
            <summary>
            Gets or sets user UI culture.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.DataPortal.DataPortalRequest.IdentityClaims">
            <summary>
            Gets or sets a list of claims for the user who invokes the remote method.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.DataPortal.DataPortalRequest.AuthenticationType">
            <summary>
            Gets or sets an authentication type for the user who invokes the remote method.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.DataPortal.DataPortalRequest.UseCaseParams">
            <summary>
            Gets or sets a list of (serialized) parameters for remote method invocation.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.DataPortalRequest.GetRemoteMethodSignature">
            <summary>
            Gets a parameter signature for the remote method to invoke.
            </summary>
            <returns>a parameter signature for the remote method to invoke</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.DataPortalRequest.GetRemoteMethodSignatureDescription">
            <summary>
            Gets a description of parameter signature for the remote method to invoke.
            </summary>
            <returns>a description of parameter signature for the remote method to invoke</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.DataPortalRequest.GetRemoteMethodParamCount">
            <summary>
            Gets a number of parameters for the remote method.
            </summary>
            <returns>a number of parameters for the data portal method</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.DataPortalRequest.GetRemoteMethodParamValues">
            <summary>
            Gets parameters for the remote method to invoke (null for no params).
            </summary>
            <returns>parameters for the remote method to invoke (null for no params)</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.DataPortalRequest.GetIdentity">
            <summary>
            Gets a ClaimsIdentity instance with the claims within the request.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.DataPortalRequest.GetRemoteMethod">
            <summary>
            Gets a method of the remote service interface that should be invoked by a server data portal.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.DataPortalRequest.ValidateRequest">
            <summary>
            Throws an ArgumentException if the request is invalid (shall not be
            processed by a server data portal).
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Application.DataPortal.DataPortalResponse">
            <summary>
            A serializable wrapper for the data portal result.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.DataPortal.DataPortalResponse.ProcessingException">
            <summary>
            Gets or sets an exception that was thrown while processing the request on server (if any).
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.DataPortal.DataPortalResponse.Result">
            <summary>
            Gets or sets a result of the method invocation on server (if the method is not void).
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.DataPortal.DataPortalResponse.IdentityClaims">
            <summary>
            Gets or sets a list of claims for the user who invokes the remote method.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.DataPortal.DataPortalResponse.AuthenticationType">
            <summary>
            Gets or sets an authentication type for the user who invokes the remote method.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.DataPortalResponse.GetUpdatedIdentity(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Gets a user identity returned by the use case if it is different from the initial identity.
            </summary>
            <param name="initialIdentity">initial user identity sent by a data portal request</param>
            <returns>a user identity returned by the use case</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.Extensions.Deserialize``1(System.String)">
            <summary>
            Deserializes value from json string. Handles Stream properties.
            If serialized value type is an interface, value is deserialized by proxy.
            </summary>
            <typeparam name="T">a type of the value to deserialize</typeparam>
            <param name="serializedValue">a json string that contains the serialized value</param>
            <returns>deserialized value of the type specified</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.Extensions.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes value from json string. Handles Stream properties.
            If serialized value type is an interface, value is deserialized by proxy.
            </summary>
            <param name="serializedValueType">a type of the value to deserialize</param>
            <param name="serializedValue">a json string that contains the serialized value</param>
            <returns>deserialized value of the type specified</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.Extensions.Serialize``1(``0)">
            <summary>
            Serializes the value to a json string. Handles Stream properties.
            </summary>
            <typeparam name="T">a type of the value to serialize</typeparam>
            <param name="value">a value to serialize</param>
            <returns>json string containing data for the serialized value</returns>
        </member>
        <member name="T:A5Soft.CARMA.Application.DataPortal.IClientDataPortal">
            <summary>
            A base interface for client side data portal implementations.
            Enable remote method execution using single entry point at server.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.IsRemote">
            <summary>
            Gets a value indicating whether the data portal implementation is configured
            for remote invocations. All the methods of a client data portal can only be invoked
            if this property is set to true.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.FetchAsync``1(System.Type,System.Security.Claims.ClaimsIdentity,System.Threading.CancellationToken)">
            <summary>
            Executes method of the use case specified remotely and return the result. 
            </summary>
            <param name="useCaseType">a type of the use case or its interface</param>
            <typeparam name="TResult">a type of result of the method executed (should be binary serializable)</typeparam>
            <param name="identity">identity of the user invoking the method</param>
            <param name="ct">cancellation token (if any)</param>
            <returns>a result of the method executed</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.FetchAsync``2(System.Type,``0,System.Security.Claims.ClaimsIdentity,System.Threading.CancellationToken)">
            <summary>
            Executes method of the use case specified remotely and return the result. 
            </summary>
            <param name="useCaseType">a type of the use case or its interface</param>
            <typeparam name="TArg">a type of the (only) argument for the use case InvokeAsync method
            (should be either an interface (all the way to primitive types), a primitive type
            or a json serializable POCO)</typeparam>
            <typeparam name="TResult">a type of result of the method executed (should be binary serializable)</typeparam>
            <param name="parameter">a value of the (only) argument for the use case InvokeAsync method</param>
            <param name="identity">identity of the user invoking the method</param>
            <param name="ct">cancellation token (if any)</param>
            <returns>a result of the method executed</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.DownloadAsync``1(System.Type,``0,System.Security.Claims.ClaimsIdentity,System.Threading.CancellationToken)">
            <summary>
            Downloads file using data portal.
            </summary>
            <typeparam name="TArg">a type of the (only) argument for the use case InvokeAsync method
            (should be either an interface (all the way to primitive types), a primitive type
            or a json serializable POCO)</typeparam>
            <param name="useCaseType">a type of the use case or its interface</param>
            <param name="parameter">a criteria for the file to download</param>
            <param name="identity">identity of the user invoking the method</param>
            <param name="ct">cancellation token (if any)</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.FetchAsync``3(System.Type,``0,``1,System.Security.Claims.ClaimsIdentity,System.Threading.CancellationToken)">
            <summary>
            Executes method of the use case specified remotely and return the result. 
            </summary>
            <param name="useCaseType">a type of the use case or its interface</param>
            <typeparam name="TArg1">a type of the first argument for the use case InvokeAsync method
            (should be either an interface all the way to primitive types, a primitive type
            or a json serializable POCO)</typeparam>
            <typeparam name="TArg2">a type of the second argument for the use case InvokeAsync method
            (should be either an interface all the way to primitive types, a primitive type
            or a json serializable POCO)</typeparam>
            <typeparam name="TResult">a type of result of the method executed (should be binary serializable)</typeparam>
            <param name="firstParameter">a value of the first argument for the use case InvokeAsync method</param>
            <param name="secondParameter">a value of the second argument for the use case InvokeAsync method</param>
            <param name="identity">identity of the user invoking the method</param>
            <param name="ct">cancellation token (if any)</param>
            <returns>a result of the method executed</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.FetchAsync``4(System.Type,``0,``1,``2,System.Security.Claims.ClaimsIdentity,System.Threading.CancellationToken)">
            <summary>
            Executes method of the use case specified remotely and return the result. 
            </summary>
            <param name="useCaseType">a type of the use case or its interface</param>
            <typeparam name="TArg1">a type of the first argument for the use case InvokeAsync method
            (should be either an interface all the way to primitive types, a primitive type
            or a json serializable POCO)</typeparam>
            <typeparam name="TArg2">a type of the second argument for the use case InvokeAsync method
            (should be either an interface all the way to primitive types, a primitive type
            or a json serializable POCO)</typeparam>
            <typeparam name="TArg3">a type of the third argument for the use case InvokeAsync method
            (should be either an interface all the way to primitive types, a primitive type
            or a json serializable POCO)</typeparam>
            <typeparam name="TResult">a type of result of the method executed (should be binary serializable)</typeparam>
            <param name="firstParameter">a value of the first argument for the use case InvokeAsync method</param>
            <param name="secondParameter">a value of the second argument for the use case InvokeAsync method</param>
            <param name="thirdParameter">a value of the third argument for the use case InvokeAsync method</param>
            <param name="identity">identity of the user invoking the method</param>
            <param name="ct">cancellation token (if any)</param>
            <returns>a result of the method executed</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.FetchUnauthenticatedAsync``1(System.Type,System.Threading.CancellationToken)">
            <summary>
            Executes method of the use case specified remotely and return the result. 
            </summary>
            <param name="useCaseType">a type of the use case or its interface</param>
            <param name="ct">cancellation token (if any)</param>
            <typeparam name="TResult">a type of result of the method executed (should be binary serializable)</typeparam>
            <returns>a result of the method executed</returns> 
            <remarks>Only for methods that do not require authentication and authorization,
            e.g. login, password reset etc.</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.FetchUnauthenticatedAsync``2(System.Type,``0,System.Threading.CancellationToken)">
            <summary>
            Executes method of the use case specified remotely and return the result. 
            </summary>
            <param name="useCaseType">a type of the use case or its interface</param>
            <typeparam name="TArg">a type of the (only) argument for the use case InvokeAsync method
            (should be either an interface (all the way to primitive types), a primitive type
            or a json serializable POCO)</typeparam>
            <typeparam name="TResult">a type of result of the method executed (should be binary serializable)</typeparam>
            <param name="parameter">a value of the (only) argument for the use case InvokeAsync method</param>
            <param name="ct">cancellation token (if any)</param>
            <returns>a result of the method executed</returns>
            <remarks>Only for methods that do not require authentication and authorization,
            e.g. login, password reset etc.</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.FetchUnauthenticatedAsync``3(System.Type,``0,``1,System.Threading.CancellationToken)">
            <summary>
            Executes method of the use case specified remotely and return the result. 
            </summary>
            <param name="useCaseType">a type of the use case or its interface</param>
            <typeparam name="TArg1">a type of the first argument for the use case InvokeAsync method
            (should be either an interface all the way to primitive types, a primitive type
            or a json serializable POCO)</typeparam>
            <typeparam name="TArg2">a type of the second argument for the use case InvokeAsync method
            (should be either an interface all the way to primitive types, a primitive type
            or a json serializable POCO)</typeparam>
            <typeparam name="TResult">a type of result of the method executed (should be binary serializable)</typeparam>
            <param name="firstParameter">a value of the first argument for the use case InvokeAsync method</param>
            <param name="secondParameter">a value of the second argument for the use case InvokeAsync method</param>
            <param name="ct">cancellation token (if any)</param>
            <returns>a result of the method executed</returns> 
            <remarks>Only for methods that do not require authentication and authorization,
            e.g. login, password reset etc.</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.FetchUnauthenticatedAsync``4(System.Type,``0,``1,``2,System.Threading.CancellationToken)">
            <summary>
            Executes method of the use case specified remotely and return the result. 
            </summary>
            <param name="useCaseType">a type of the use case or its interface</param>
            <typeparam name="TArg1">a type of the first argument for the use case InvokeAsync method
            (should be either an interface all the way to primitive types, a primitive type
            or a json serializable POCO)</typeparam>
            <typeparam name="TArg2">a type of the second argument for the use case InvokeAsync method
            (should be either an interface all the way to primitive types, a primitive type
            or a json serializable POCO)</typeparam>
            <typeparam name="TArg3">a type of the third argument for the use case InvokeAsync method
            (should be either an interface all the way to primitive types, a primitive type
            or a json serializable POCO)</typeparam>
            <typeparam name="TResult">a type of result of the method executed (should be binary serializable)</typeparam>
            <param name="firstParameter">a value of the first argument for the use case InvokeAsync method</param>
            <param name="secondParameter">a value of the second argument for the use case InvokeAsync method</param>
            <param name="thirdParameter">a value of the third argument for the use case InvokeAsync method</param>
            <param name="ct">cancellation token (if any)</param>
            <returns>a result of the method executed</returns>
            <remarks>Only for methods that do not require authentication and authorization,
            e.g. login, password reset etc.</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.DownloadUnauthenticatedAsync``1(System.Type,``0,System.Threading.CancellationToken)">
            <summary>
            Downloads file using data portal for an unauthenticated user.
            </summary>
            <typeparam name="TArg">a type of the (only) argument for the use case InvokeAsync method
            (should be either an interface (all the way to primitive types), a primitive type
            or a json serializable POCO)</typeparam>
            <param name="useCaseType">a type of the use case or its interface</param>
            <param name="parameter">a criteria for the file to download</param>
            <param name="ct">cancellation token (if any)</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.InvokeAsync(System.Type,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Executes (void) method of the use case specified remotely and returns identity set by a remote server (if any). 
            </summary>
            <param name="useCaseType">a type of the use case or its interface</param>
            <param name="identity">identity of the user invoking the method</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.InvokeAsync``1(System.Type,``0,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Executes (void) method of the use case specified remotely and returns identity set by a remote server (if any). 
            </summary>
            <param name="useCaseType">a type of the use case or its interface</param>
            <typeparam name="TArg">a type of the (only) argument for the use case InvokeAsync method
            (should be either an interface (all the way to primitive types), a primitive type
            or a json serializable POCO)</typeparam>
            <param name="parameter">a value of the (only) argument for the use case InvokeAsync method</param>
            <param name="identity">identity of the user invoking the method</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.InvokeAsync``2(System.Type,``0,``1,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Executes (void) method of the use case specified remotely and returns identity set by a remote server (if any). 
            </summary>
            <param name="useCaseType">a type of the use case or its interface</param>
            <typeparam name="TArg1">a type of the first argument for the use case InvokeAsync method
            (should be either an interface all the way to primitive types, a primitive type
            or a json serializable POCO)</typeparam>
            <typeparam name="TArg2">a type of the second argument for the use case InvokeAsync method
            (should be either an interface all the way to primitive types, a primitive type
            or a json serializable POCO)</typeparam>
            <param name="firstParameter">a value of the first argument for the use case InvokeAsync method</param>
            <param name="secondParameter">a value of the second argument for the use case InvokeAsync method</param>
            <param name="identity">identity of the user invoking the method</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.InvokeAsync``3(System.Type,``0,``1,``2,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Executes (void) method of the use case specified remotely and returns identity set by a remote server (if any). 
            </summary>
            <param name="useCaseType">a type of the use case or its interface</param>
            <typeparam name="TArg1">a type of the first argument for the use case InvokeAsync method
            (should be either an interface all the way to primitive types, a primitive type
            or a json serializable POCO)</typeparam>
            <typeparam name="TArg2">a type of the second argument for the use case InvokeAsync method
            (should be either an interface all the way to primitive types, a primitive type
            or a json serializable POCO)</typeparam>
            <typeparam name="TArg3">a type of the third argument for the use case InvokeAsync method
            (should be either an interface all the way to primitive types, a primitive type
            or a json serializable POCO)</typeparam>
            <param name="firstParameter">a value of the first argument for the use case InvokeAsync method</param>
            <param name="secondParameter">a value of the second argument for the use case InvokeAsync method</param>
            <param name="thirdParameter">a value of the third argument for the use case InvokeAsync method</param>
            <param name="identity">identity of the user invoking the method</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.InvokeUnauthenticatedAsync(System.Type)">
            <summary>
            Executes (void) method of the use case specified remotely and returns identity set by a remote server (if any). 
            </summary>
            <param name="useCaseType">a type of the use case or its interface</param>
            <remarks>Only for methods that do not require authentication and authorization,
            e.g. login, password reset etc.</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.InvokeUnauthenticatedAsync``1(System.Type,``0)">
            <summary>
            Executes (void) method of the use case specified remotely and returns identity set by a remote server (if any). 
            </summary>
            <param name="useCaseType">a type of the use case or its interface</param>
            <typeparam name="TArg">a type of the (only) argument for the use case InvokeAsync method
            (should be either an interface (all the way to primitive types), a primitive type
            or a json serializable POCO)</typeparam>
            <param name="parameter">a value of the (only) argument for the use case InvokeAsync method</param>
            <remarks>Only for methods that do not require authentication and authorization,
            e.g. login, password reset etc.</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.InvokeUnauthenticatedAsync``2(System.Type,``0,``1)">
            <summary>
            Executes (void) method of the use case specified remotely and returns identity set by a remote server (if any). 
            </summary>
            <param name="useCaseType">a type of the use case or its interface</param>
            <typeparam name="TArg1">a type of the first argument for the use case InvokeAsync method
            (should be either an interface all the way to primitive types, a primitive type
            or a json serializable POCO)</typeparam>
            <typeparam name="TArg2">a type of the second argument for the use case InvokeAsync method
            (should be either an interface all the way to primitive types, a primitive type
            or a json serializable POCO)</typeparam>
            <param name="firstParameter">a value of the first argument for the use case InvokeAsync method</param>
            <param name="secondParameter">a value of the second argument for the use case InvokeAsync method</param>
            <remarks>Only for methods that do not require authentication and authorization,
            e.g. login, password reset etc.</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.IClientDataPortal.InvokeUnauthenticatedAsync``3(System.Type,``0,``1,``2)">
            <summary>
            Executes (void) method of the use case specified remotely and returns identity set by a remote server (if any). 
            </summary>
            <param name="useCaseType">a type of the use case or its interface</param>
            <typeparam name="TArg1">a type of the first argument for the use case InvokeAsync method
            (should be either an interface all the way to primitive types, a primitive type
            or a json serializable POCO)</typeparam>
            <typeparam name="TArg2">a type of the second argument for the use case InvokeAsync method
            (should be either an interface all the way to primitive types, a primitive type
            or a json serializable POCO)</typeparam>
            <typeparam name="TArg3">a type of the third argument for the use case InvokeAsync method
            (should be either an interface all the way to primitive types, a primitive type
            or a json serializable POCO)</typeparam>
            <param name="firstParameter">a value of the first argument for the use case InvokeAsync method</param>
            <param name="secondParameter">a value of the second argument for the use case InvokeAsync method</param>
            <param name="thirdParameter">a value of the third argument for the use case InvokeAsync method</param>
            <remarks>Only for methods that do not require authentication and authorization,
            e.g. login, password reset etc.</remarks>
        </member>
        <member name="T:A5Soft.CARMA.Application.DataPortal.IDataPortalProxy">
            <summary>
            A base interface for remote data portal implementations.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.DataPortal.IDataPortalProxy.IsRemote">
            <summary>
            Gets a value indicating whether the data portal implementation is actually remote.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.IDataPortalProxy.GetResponseAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Calls a remote service (e.g. HTTP server) with the json serialized remote method invocation request
            and returns binary serialized remote invocation response.
            </summary>
            <param name="request">json serialized remote method invocation request</param>
            <returns>binary serialized remote invocation response</returns>
            <remarks>From the implementation point of view the underlying (serialized) types are not important.</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.IDataPortalProxy.DownloadAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Calls a remote service (e.g. HTTP server) with the json serialized remote method invocation request
            and returns response stream for file download.
            </summary>
            <param name="request">json serialized remote method invocation request</param>
            <returns>response stream for file download</returns>
            <remarks>From the implementation point of view the underlying (serialized) types are not important.</remarks>
        </member>
        <member name="T:A5Soft.CARMA.Application.DataPortal.JObjectExtension">
            <summary>
            https://www.lighthouselogic.com/deserialize-json-to-interface-without-concrete-class/
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.JObjectExtension.ToProxy``1(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Converts JToken value to an interface proxy of the type specified.
            </summary>
            <typeparam name="TInterfaceType">a type of the interface to proxy</typeparam>
            <param name="targetObject">a JToken containing data for the interface proxy</param>
            <returns>an interface proxy of the type specified</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.JObjectExtension.ToProxy(Newtonsoft.Json.Linq.JToken,System.Type)">
            <summary>
            Converts JToken value to an interface proxy of the type specified.
            </summary>
            <param name="targetToken">a JToken containing data for the interface proxy</param>
            <param name="interfaceType">a type of the interface to proxy</param>
            <returns>an interface proxy of the type specified</returns>
        </member>
        <member name="T:A5Soft.CARMA.Application.DataPortal.LocalDataPortalProxy">
            <summary>
            Null implementation of IRemoteClientPortal for use by DI whn no remote server is required.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.DataPortal.LocalDataPortalProxy.IsRemote">
            <inheritdoc cref="P:A5Soft.CARMA.Application.DataPortal.IDataPortalProxy.IsRemote" />
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.LocalDataPortalProxy.GetResponseAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:A5Soft.CARMA.Application.DataPortal.IDataPortalProxy.GetResponseAsync(System.String,System.Threading.CancellationToken)" />
        </member>
        <member name="T:A5Soft.CARMA.Application.DataPortal.ServerDataPortalBase">
            <summary>
            a base class for a server data portal
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Application.DataPortal.ServerDataPortalBase.Logger">
            <summary>
            Logger.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.ServerDataPortalBase.#ctor(A5Soft.CARMA.Application.ILogger)">
            <summary>
            Creates a new ServerDataPortal instance.
            </summary>
            <param name="logger">logger for DI</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.ServerDataPortalBase.HandleRequest(System.String,System.Func{System.Type,System.Object},System.Action{System.Security.Claims.ClaimsIdentity})">
            <inheritdoc cref="!:IServerDataPortal.HandleRequest"/>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.ServerDataPortalBase.SetCulture(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Override this method to set culture for the request processing.
            </summary>
            <param name="culture"></param>
            <param name="uiCulture"></param>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.ServerDataPortalBase.ValidateIdentity(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Override this method to validate user identity for the request.
            (only invoked if the user is authenticated)
            </summary>
            <param name="user">a request identity to validate</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.DataPortal.ServerDataPortalBase.GetExceptionForUser(System.Exception)">
            <summary>
            Override this method to hide technical exceptions from user.
            </summary>
            <param name="actualException"></param>
        </member>
        <member name="T:A5Soft.CARMA.Application.DownloadFileUseCaseBase`1">
            <summary>
            A base use case for a file download.
            </summary>
            <typeparam name="T">a type of criteria for file (must be json serializable,
            i.e. either a primitive, an interface or a POCO)</typeparam>
        </member>
        <member name="M:A5Soft.CARMA.Application.DownloadFileUseCaseBase`1.#ctor(A5Soft.CARMA.Application.Authorization.IAuthenticationStateProvider,A5Soft.CARMA.Application.Authorization.IAuthorizationProvider,A5Soft.CARMA.Application.DataPortal.IClientDataPortal,A5Soft.CARMA.Domain.Rules.IValidationEngineProvider,A5Soft.CARMA.Domain.Metadata.IMetadataProvider,A5Soft.CARMA.Application.ILogger)">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Application.DownloadFileUseCaseBase`1.DownloadAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Downloads a file.
            </summary>
            <param name="criteria">a criteria for file</param>
            <param name="ct">cancellation token (if any)</param>
            <returns>a stream to download the file content</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.DownloadFileUseCaseBase`1.DoDownloadAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Implement this method to download the file.
            </summary>
            <param name="criteria">a criteria for the file to download</param>
            <remarks>At this stage user has already been authorized
            and the criteria param is guaranteed to be not null.
            This method is always executed on server side (if data portal is configured).</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.DownloadFileUseCaseBase`1.BeforeDataPortalAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Implement this method for any actions that should be taken before remote invocation.
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.DownloadFileUseCaseBase`1.AfterDataPortalAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Implement this method for any actions that should be taken after
            a successful remote invocation. (e.g. clear local cache)
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.DownloadFileUseCaseBase`1.GetButtonTitle">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetButtonTitle"/>
        </member>
        <member name="M:A5Soft.CARMA.Application.DownloadFileUseCaseBase`1.GetMenuTitle">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetMenuTitle"/>
        </member>
        <member name="T:A5Soft.CARMA.Application.FetchDomainEntityUseCaseBase`1">
            <summary>
            A base use case for a domain entity fetch operation (that gets a domain entity by its identity).
            </summary>
            <typeparam name="T">a type of domain entity to fetch (must be binary serializable)</typeparam>
        </member>
        <member name="M:A5Soft.CARMA.Application.FetchDomainEntityUseCaseBase`1.#ctor(A5Soft.CARMA.Application.Authorization.IAuthenticationStateProvider,A5Soft.CARMA.Application.Authorization.IAuthorizationProvider,A5Soft.CARMA.Application.DataPortal.IClientDataPortal,A5Soft.CARMA.Domain.Rules.IValidationEngineProvider,A5Soft.CARMA.Domain.Metadata.IMetadataProvider,A5Soft.CARMA.Application.ILogger)">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Application.FetchDomainEntityUseCaseBase`1.FetchAsync(A5Soft.CARMA.Domain.DomainEntityIdentity{`0},System.Threading.CancellationToken)">
            <summary>
            Gets a domain entity by its identity.
            </summary>
            <param name="id">an identity of the entity to fetch</param>
            <param name="ct">cancellation token (if any)</param>
            <returns>a domain entity</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.FetchDomainEntityUseCaseBase`1.DoFetchAsync(A5Soft.CARMA.Domain.DomainEntityIdentity{`0},System.Threading.CancellationToken)">
            <summary>
            Implement this method to fetch a domain entity instance.
            </summary>
            <param name="id">an identity of the entity to fetch</param>
            <returns>a domain entity</returns>
            <remarks>At this stage user has already been authorized
            and the id param is guaranteed to be not null.
            This method is always executed on server side (if data portal is configured).</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.FetchDomainEntityUseCaseBase`1.BeforeDataPortalAsync(A5Soft.CARMA.Domain.DomainEntityIdentity{`0},System.Threading.CancellationToken)">
            <summary>
            Implement this method for any actions that should be taken before remote invocation.
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.FetchDomainEntityUseCaseBase`1.AfterDataPortalAsync(A5Soft.CARMA.Domain.DomainEntityIdentity{`0},`0,System.Threading.CancellationToken)">
            <summary>
            Implement this method for any actions that should be taken after
            a successful remote invocation. (e.g. clear local cache)
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.FetchDomainEntityUseCaseBase`1.GetMetadata">
            <summary>
            Gets metadata for the entity fetched.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.FetchDomainEntityUseCaseBase`1.GetMenuTitle">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetMenuTitle"/>
        </member>
        <member name="T:A5Soft.CARMA.Application.FetchDomainSingletonUseCaseBase`1">
            <summary>
            A base use case for a domain singleton fetch operation
            (that gets a domain entity that only has one instance per domain, e.g. company settings).
            </summary>
            <typeparam name="T">a type of the domain singleton to fetch (must be binary serializable)</typeparam>
        </member>
        <member name="M:A5Soft.CARMA.Application.FetchDomainSingletonUseCaseBase`1.#ctor(A5Soft.CARMA.Application.Authorization.IAuthenticationStateProvider,A5Soft.CARMA.Application.Authorization.IAuthorizationProvider,A5Soft.CARMA.Application.DataPortal.IClientDataPortal,A5Soft.CARMA.Domain.Rules.IValidationEngineProvider,A5Soft.CARMA.Domain.Metadata.IMetadataProvider,A5Soft.CARMA.Application.ILogger)">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Application.FetchDomainSingletonUseCaseBase`1.FetchAsync(System.Threading.CancellationToken)">
            <summary>
            Fetches a domain singleton, i.e. a domain entity that only has one instance per domain,
            e.g. company settings. 
            </summary>
            <param name="ct">cancellation token (if any)</param>
            <returns>a domain singleton</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.FetchDomainSingletonUseCaseBase`1.DoFetchAsync(System.Threading.CancellationToken)">
            <summary>
            Implement this method to fetch a domain singleton instance.
            </summary>
            <returns>a domain singleton instance</returns>
            <remarks>At this stage user has already been authorized.
            This method is always executed on server side (if data portal is configured).</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.FetchDomainSingletonUseCaseBase`1.BeforeDataPortalAsync(System.Threading.CancellationToken)">
            <summary>
            Implement this method for any actions that should be taken before remote invocation.
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.FetchDomainSingletonUseCaseBase`1.AfterDataPortalAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Implement this method for any actions that should be taken after
            a successful remote invocation. (e.g. clear local cache)
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.FetchDomainSingletonUseCaseBase`1.GetMetadata">
            <summary>
            Gets metadata for the entity fetched.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.FetchDomainSingletonUseCaseBase`1.GetMenuTitle">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetMenuTitle"/>
        </member>
        <member name="T:A5Soft.CARMA.Application.IAuthorizedUseCase">
            <summary>
            Base interface for all use cases that implement authorization.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.IAuthorizedUseCase.GetIdentityAsync">
            <summary>
            Gets a current identity of the user.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.IAuthorizedUseCase.CanInvokeAsync(System.Boolean)">
            <summary>
            Gets a value indicating whether the current user is authorized to invoke the use case.
            </summary>
            <param name="throwOnNotAuthorized">whether to throw a (security) exception
            if the user is not authorized</param>
            <returns>a value indicating whether the user is authorized to invoke the use case</returns>
        </member>
        <member name="T:A5Soft.CARMA.Application.ILogger">
            <summary>
            Interface for a logger to use for the application.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.ILogger.LogCritical(System.Exception,System.Object[])">
            <summary>
            Logs a critical application exception.
            </summary>
            <param name="exception">an exception that caused the critical failure</param>
            <param name="args">any data that needs to be logged along the exception</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.ILogger.LogError(System.Exception,System.Object[])">
            <summary>
            Logs an application exception that is not critical.
            </summary>
            <param name="exception">an exception that caused the failure</param>
            <param name="args">any data that needs to be logged along the exception</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.ILogger.LogWarning(System.Exception,System.Object[])">
            <summary>
            Logs an application exception that could be handled by the application
            yet might indicate an application bug.
            </summary>
            <param name="exception">an exception to log</param>
            <param name="args">any data that needs to be logged along the exception</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.ILogger.LogWarning(System.String,System.Object[])">
            <summary>
            Logs an application event that could be handled by the application
            yet might indicate an application bug.
            </summary>
            <param name="message">an event description to log</param>
            <param name="args">any data that needs to be logged along the event description</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.ILogger.LogInfo(System.String,System.Object[])">
            <summary>
            Logs an application event that could be of general interest, e.g. user loggen in.
            </summary>
            <param name="message">an event description to log</param>
            <param name="args">any data that needs to be logged along the event description</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.ILogger.LogDebug(System.Exception,System.Object[])">
            <summary>
            Logs an application exception (typically business logic related),
            that could be safely handled either by the application or by the user,
            yet could be useful for debugging. 
            </summary>
            <param name="exception">an exception to log</param>
            <param name="args">any data that needs to be logged along the exception</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.ILogger.LogDebug(System.String,System.Object[])">
            <summary>
            Logs an application event that could be useful for debugging.
            </summary>
            <param name="message">an event description to log</param>
            <param name="args">any data that needs to be logged along the event description</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.ILogger.LogMethodEntry(System.Type,System.String,System.Object[])">
            <summary>
            Logs method entry data for debugging.
            </summary>
            <param name="ownerType">a type that declares the method</param>
            <param name="methodName">a name of the method</param>
            <param name="methodParams">parameter values that has been passed to the method</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.ILogger.LogMethodExit(System.Type,System.String,System.Object)">
            <summary>
            Logs method (successful) exit data for debugging.
            </summary>
            <param name="ownerType">a type that declares the method</param>
            <param name="methodName">a name of the method</param>
            <param name="returnValue">a value returned by the method</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.ILogger.LogSecurityIssue(System.Exception,System.Object[])">
            <summary>
            Logs a security related application exception (e.g. forged credentials),
            that could be safely handled either by the application or by the user,
            yet could be useful for managing app security. 
            </summary>
            <param name="exception">a security related exception to log</param>
            <param name="args">any data that needs to be logged along the exception</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.ILogger.LogSecurityIssue(System.String,System.Object[])">
            <summary>
            Logs a security related event (e.g. failed login attempt)
            that could be safely handled either by the application or by the user,
            yet could be useful for managing app security.
            </summary>
            <param name="message">a security related event description to log</param>
            <param name="args">any data that needs to be logged along the event description</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.ILogger.BeginScope``1(``0)">
            <summary>
            Begins a logical operation scope.
            </summary>
            <typeparam name="TState">Begins a logical operation scope.</typeparam>
            <param name="state">The identifier for the scope.</param>
            <returns>A disposable object that ends the logical operation scope on dispose.</returns>
        </member>
        <member name="T:A5Soft.CARMA.Application.IoC">
            <summary>
            Extension methods for IoC containers.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.IoC.GetApplicationServices(A5Soft.CARMA.Domain.BuildConfiguration,System.Reflection.Assembly[])">
            <summary>
            Gets a list of default service implementations that are defined in the assemblies specified.
            </summary>
            <param name="assemblies"></param>
            <param name="forBuildConfiguration">application build configuration (client/server)
            to get service implementations for</param>
        </member>
        <member name="T:A5Soft.CARMA.Application.IUseCase">
            <summary>
            Base interface to mark all use cases.
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Application.LookupListServiceBase`1">
            <summary>
            Base class for service that fetches a list of lookup values). 
            </summary>
            <typeparam name="TLookup">a type of the managed lookup value</typeparam>
            <remarks>Lookups (e.g. list of persons to be displayed in dropdowns) contain
            sensitive personal and/or business data. However there is no reasonable way
            to manage access authorization as the need of a particular lookup
            is defined by business entities that the user has access to.
            I.e. if a user has write access to invoices he needs a lookup for persons.
            Therefore we need a service that is only accessible by use cases
            which transfers authorization responsibility to them.
            E.g. save invoice use case shall be responsible for providing all the necessary lookups
            for a user in order to edit an invoice.</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.LookupListServiceBase`1.GetIdentityAsync">
            <inheritdoc cref="M:A5Soft.CARMA.Application.IAuthorizedUseCase.GetIdentityAsync" />
        </member>
        <member name="P:A5Soft.CARMA.Application.LookupListServiceBase`1.AuthorizationProvider">
            <summary>
            Gets an authorization provider.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.LookupListServiceBase`1.FetchAsync(System.Type)">
            <summary>
            Gets a lookup value.
            </summary>
            <param name="requesterType">a type of the use case that requests the lookup</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.LookupListServiceBase`1.GetValueFromLocalCache">
            <summary>
            Implement this method to get a requested value from a local cache (if used/configured).
            </summary>
            <remarks>Do not configure local cache for shared environments even if a remote data portal is used.
            The data portal will return only lookups for the user, which will render the
            shared cache invalid. Data portal cannot return lookup values that are not meant for the user
            as it will compromise its security.</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.LookupListServiceBase`1.SetLocalCacheValue(System.Collections.Generic.List{`0})">
            <summary>
            Implement this method to add fetched lookup value to a local cache (if used/configured).
            </summary>
            <remarks>Only invoked if a remote data portal is used.
            Do not configure local cache for shared environments even if a remote data portal is used.
            The data portal might return only lookups for the user, which will render the
            shared cache invalid. Data portal cannot return lookup values that are not meant for the user
            as it will compromise its security.</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.LookupListServiceBase`1.DoFetchAsync">
            <summary>
            Implement this method to fetch lookup value from a database or a server side cache.
            </summary>
            <remarks>If required, filter out the returned lookup values for the <see cref="!:User"/>.</remarks>
        </member>
        <member name="T:A5Soft.CARMA.Application.LookupServiceBase`1">
            <summary>
            Base class for service that fetches lookup values (or lists of values). 
            </summary>
            <typeparam name="TLookup">a type of the managed lookup value</typeparam>
            <remarks>Lookups (e.g. list of persons to be displayed in dropdowns) contain
            sensitive personal and/or business data. However there is no reasonable way
            to manage access authorization as the need of a particular lookup
            is defined by business entities that the user has access to.
            I.e. if a user has write access to invoices he needs a lookup for persons.
            Therefore we need a service that is only accessible by use cases
            which transfers authorization responsibility to them.
            E.g. save invoice use case shall be responsible for providing all the necessary lookups
            for a user in order to edit an invoice.</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.LookupServiceBase`1.GetIdentityAsync">
            <inheritdoc cref="M:A5Soft.CARMA.Application.IAuthorizedUseCase.GetIdentityAsync" />
        </member>
        <member name="P:A5Soft.CARMA.Application.LookupServiceBase`1.AuthorizationProvider">
            <summary>
            Gets an authorization provider.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.LookupServiceBase`1.FetchAsync(System.Type)">
            <summary>
            Gets a lookup value.
            </summary>
            <param name="requesterType">a type of the use case that requests the lookup</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.LookupServiceBase`1.GetValueFromLocalCache">
            <summary>
            Implement this method to get a requested value from a local cache (if used/configured).
            </summary>
            <remarks>Do not configure local cache for shared environments even if a remote data portal is used.
            The data portal will return only lookups for the user, which will render the
            shared cache invalid. Data portal cannot return lookup values that are not meant for the user
            as it will compromise its security.</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.LookupServiceBase`1.SetLocalCacheValue(`0)">
            <summary>
            Implement this method to add fetched lookup value to a local cache (if used/configured).
            </summary>
            <remarks>Only invoked if a remote data portal is used.
            Do not configure local cache for shared environments even if a remote data portal is used.
            The data portal might return only lookups for the user, which will render the
            shared cache invalid. Data portal cannot return lookup values that are not meant for the user
            as it will compromise its security.</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.LookupServiceBase`1.DoFetchAsync">
            <summary>
            Implement this method to fetch lookup value from a database or a server side cache.
            </summary>
            <remarks>If required, filter out the returned lookup values for the <see cref="!:User"/>.</remarks>
        </member>
        <member name="T:A5Soft.CARMA.Application.Navigation.FetchMainMenuUseCaseBase">
            <summary>
            A base use case for app main menu fetch operation.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.Navigation.FetchMainMenuUseCaseBase.GetIdentityAsync">
            <summary>
            Gets a current user.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.Navigation.FetchMainMenuUseCaseBase.AuthorizationProvider">
            <summary>
            Gets an authorization service.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.Navigation.FetchMainMenuUseCaseBase.MetadataProvider">
            <summary>
            Gets a metadata provider service.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.Navigation.FetchMainMenuUseCaseBase.FetchAsync">
            <summary>
            Fetches a main menu for the current user. 
            </summary>
            <returns>a main menu for the current user</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.Navigation.FetchMainMenuUseCaseBase.GetBaseMainMenu">
            <summary>
            Implement this method to create a base app menu, i.e. ignoring plugins.
            </summary>
            <returns>a <see cref="T:A5Soft.CARMA.Application.Navigation.MainMenu"/> for base app functionality</returns>
            <remarks>This method is always executed on server side (if data portal is configured).</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.Navigation.FetchMainMenuUseCaseBase.GetPluginMenuItemsAsync">
            <summary>
            Implement this method to fetch a list of menu items for each relevant plugin.
            </summary>
            <remarks>This method is always executed on server side (if data portal is configured).</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.Navigation.FetchMainMenuUseCaseBase.GetReplacedUseCaseInterfaceTypesAsync">
            <summary>
            Implement this method to fetch a dictionary of replaced use case interfaces for each relevant plugin.
            </summary>
            <remarks>This method is always executed on server side (if data portal is configured).
            Plugins may wish to change how the base menu behaves,
            e.g. to create a new invoice using plugin use case instead of the base one.</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.Navigation.MainMenu.AddMainMenuTopGroup(System.String,System.String,System.Type,System.String)">
            <summary>
            Adds a top menu group.
            </summary>
            <param name="name">a name of the menu item (should be unique within main menu for group items)</param>
            <param name="displayName">a resource key string for <see cref="!:MenuItem.DisplayName"/></param>
            <param name="resourceType"><see cref="T:System.Type"/> that contains the resources
            for <see cref="!:MenuItem.DisplayName"/> and <see cref="!:MenuItem.Description"/></param>
            <param name="icon">Icon of the menu item if exists.</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.Navigation.MainMenu.AddMainMenuTopItem(A5Soft.CARMA.Domain.Metadata.IMetadataProvider,System.Type,System.String)">
            <summary>
            Adds a top leaf menu item.
            </summary>
            <param name="metadataProvider">a metadata provider for use case localized descriptions</param>
            <param name="icon">Icon of the menu item if exists.</param>
            <param name="useCaseType">A type of the (main) use case that handles action
            associated with the menu item. E.g. create invoice use case handles menu item "New Invoice".</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.Navigation.MainMenu.GetMenuGroup(System.String)">
            <summary>
            Gets a menu group item (submenu) that has the name requested.
            </summary>
            <param name="name">a name of the menu group item (submenu) to find</param>
            <returns>a menu group item (submenu) that has the name requested; null if no such menu group</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.Navigation.MainMenu.ResetEnabledForMenuGroups">
            <summary>
            Resets group menus (submenus) enabled state after (if) a GUI app adds its own menu items.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.Navigation.MenuItem.#ctor">
            <summary>
            overload to create a separator menu item
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.Navigation.MenuItem.#ctor(A5Soft.CARMA.Domain.Metadata.IMetadataProvider,System.Type,System.String)">
            <summary>
            overload for common leaf menu item
            </summary>
            <param name="metadataProvider">a metadata provider for use case localized description</param>
            <param name="icon">Icon of the menu item if exists.</param>
            <param name="useCaseType">A type of the (main) use case that handles action
            associated with the menu item. E.g. create invoice use case handles menu item "New Invoice".</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.Navigation.MenuItem.#ctor(System.String,System.String,System.Type,System.String)">
            <summary>
            overload for group menu item
            </summary>
            <param name="name">a name of the menu item (should be unique within main menu for group items)</param>
            <param name="displayName">a resource key string for <see cref="M:A5Soft.CARMA.Application.Navigation.MenuItem.GetDisplayName"/></param>
            <param name="resourceType"><see cref="T:System.Type"/> that contains the resources
            for <see cref="M:A5Soft.CARMA.Application.Navigation.MenuItem.GetDisplayName"/></param>
            <param name="icon">Icon of the menu item if exists.</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.Navigation.MenuItem.#ctor(System.String,System.String,System.Type,System.Action{A5Soft.CARMA.Application.Navigation.MenuItem},System.Object,System.String)">
            <summary>
            overload for GUI app defined leaf menu item
            </summary>
            <param name="name">a name of the menu item (should be unique within main menu for group items)</param>
            <param name="displayName">a resource key string for <see cref="!:DisplayName"/></param>
            <param name="resourceType"><see cref="T:System.Type"/> that contains the resources
            for <see cref="!:DisplayName"/> and <see cref="!:Description"/></param>
            <param name="icon">Icon of the menu item if exists.</param>
            <param name="onClick">an action that shall be executed when a user clicks the menu item</param>
            <param name="tag">an arbitrary object associated with the menu item.
            E.g. company info for login selector</param>
        </member>
        <member name="P:A5Soft.CARMA.Application.Navigation.MenuItem.Name">
            <summary>
            Gets a name of the menu item (should be unique within main menu).
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.Navigation.MenuItem.ResourceType">
            <summary>
            Gets the <see cref="T:System.Type"/> that contains the resources for <see cref="!:DisplayName"/>
            and <see cref="!:Description"/>.
            Using <see cref="P:A5Soft.CARMA.Application.Navigation.MenuItem.ResourceType"/> along with these Key properties, allows the <see cref="M:A5Soft.CARMA.Application.Navigation.MenuItem.GetDisplayName"/>
            and <see cref="!:GetDescription"/> methods to return localized values.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.Navigation.MenuItem.Icon">
            <summary>
            Icon of the menu item if exists. Optional.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.Navigation.MenuItem.IsEnabled">
            <summary>
            Gets a value indicating whether the menu item can be invoked by the user.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.Navigation.MenuItem.ItemType">
            <summary>
            Gets a type of the menu item.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.Navigation.MenuItem.UseCaseType">
            <summary>
            Gets a type of the (main) use case that handles action associated with the menu item.
            E.g. create invoice use case handles menu item "New Invoice".
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.Navigation.MenuItem.Items">
            <summary>
            Sub items of this menu item. Optional.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.Navigation.MenuItem.OnClick">
            <summary>
            Gets or sets an action that shall be executed when a user clicks the menu item.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.Navigation.MenuItem.Tag">
            <summary>
            Gets or sets an arbitrary object associated with the menu item.
            E.g. company info for login selector.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.Navigation.MenuItem.GetDisplayName">
            <summary>
            Gets the UI display string for DisplayName.
            <para>
            This can be either a literal, non-localized string provided to <see cref="!:DisplayName"/> or the
            localized string found when <see cref="P:A5Soft.CARMA.Application.Navigation.MenuItem.ResourceType"/> has been specified and <see cref="!:DisplayName"/>
            represents a resource key within that resource type.
            </para>
            </summary>
            <returns>
            When <see cref="P:A5Soft.CARMA.Application.Navigation.MenuItem.ResourceType"/> has not been specified, the value of
            <see cref="!:DisplayName"/> will be returned.
            <para>
            When <see cref="P:A5Soft.CARMA.Application.Navigation.MenuItem.ResourceType"/> has been specified and <see cref="!:DisplayName"/>
            represents a resource key within that resource type, then the localized value will be returned.
            </para>
            </returns>
            <exception cref="T:System.InvalidOperationException">
            After setting both the <see cref="P:A5Soft.CARMA.Application.Navigation.MenuItem.ResourceType"/> property and the <see cref="!:DisplayName"/> property,
            but a public static property with a name matching the <see cref="!:DisplayName"/> value couldn't be found
            on the <see cref="P:A5Soft.CARMA.Application.Navigation.MenuItem.ResourceType"/>.
            </exception>
        </member>
        <member name="M:A5Soft.CARMA.Application.Navigation.MenuItem.InvokeOnClick">
            <summary>
            Invokes on click action for the menu item.
            Throws InvalidOperationException if <see cref="P:A5Soft.CARMA.Application.Navigation.MenuItem.OnClick"/> handler is not set
            or it is a <see cref="F:A5Soft.CARMA.Application.Navigation.MenuItemType.Submenu"/> or it is a <see cref="F:A5Soft.CARMA.Application.Navigation.MenuItemType.Separator"/>.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.Navigation.MenuItem.CanInvokeOnClick">
            <summary>
            Gets a value indicating whether it's possible to invoke <see cref="P:A5Soft.CARMA.Application.Navigation.MenuItem.OnClick"/> handler,
            i.e. it is not a <see cref="F:A5Soft.CARMA.Application.Navigation.MenuItemType.Submenu"/> or a <see cref="F:A5Soft.CARMA.Application.Navigation.MenuItemType.Separator"/>
            and the <see cref="P:A5Soft.CARMA.Application.Navigation.MenuItem.OnClick"/> handler is set. 
            </summary>
            <returns>a value indicating whether it's possible to invoke <see cref="P:A5Soft.CARMA.Application.Navigation.MenuItem.OnClick"/> handler,
            i.e. it is not a <see cref="F:A5Soft.CARMA.Application.Navigation.MenuItemType.Submenu"/> or a <see cref="F:A5Soft.CARMA.Application.Navigation.MenuItemType.Separator"/>
            and the <see cref="P:A5Soft.CARMA.Application.Navigation.MenuItem.OnClick"/> handler is set</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.Navigation.MenuItem.AddSeparator">
            <summary>
            Adds a menu group separator to child items.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.Navigation.MenuItem.AddMenuGroup(System.String,System.String,System.Type,System.String)">
            <summary>
            Adds a menu group to child items.
            </summary>
            <param name="name">a name of the menu item (should be unique within main menu for group items)</param>
            <param name="displayName">a resource key string for <see cref="!:DisplayName"/></param>
            <param name="resourceType"><see cref="T:System.Type"/> that contains the resources
            for <see cref="!:DisplayName"/> and <see cref="!:Description"/></param>
            <param name="icon">Icon of the menu item if exists.</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.Navigation.MenuItem.AddLeaf(A5Soft.CARMA.Domain.Metadata.IMetadataProvider,System.Type,System.String)">
            <summary>
            Adds a leaf menu item to child items.
            </summary>
            <param name="name">a name of the menu item (should be unique within main menu for group items)</param>
            <param name="displayName">a resource key string for <see cref="!:DisplayName"/></param>
            <param name="description">a resource key string for <see cref="!:Description"/></param>
            <param name="resourceType"><see cref="T:System.Type"/> that contains the resources
            for <see cref="!:DisplayName"/> and <see cref="!:Description"/></param>
            <param name="icon">Icon of the menu item if exists.</param>
            <param name="useCaseType">A type of the (main) use case that handles action
            associated with the menu item. E.g. create invoice use case handles menu item "New Invoice".</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.Navigation.MenuItem.AddGuiAppDefinedLeaf(System.String,System.String,System.Type,System.Action{A5Soft.CARMA.Application.Navigation.MenuItem},System.Object,System.String)">
            <summary>
            Adds a GUI app defined leaf menu item (e.g. app settings that are specific to winforms app).
            </summary>
            <param name="name">a name of the menu item (should be unique within main menu for group items)</param>
            <param name="displayName">a resource key string for <see cref="!:DisplayName"/></param>
            <param name="resourceType"><see cref="T:System.Type"/> that contains the resources
            for <see cref="!:DisplayName"/></param>
            <param name="icon">Icon of the menu item if exists.</param>
            <param name="onClick">an action that shall be executed when a user clicks the menu item</param>
            <param name="tag">an arbitrary object associated with the menu item.
            E.g. company info for login selector</param>
        </member>
        <member name="F:A5Soft.CARMA.Application.Navigation.MenuItemType.Submenu">
            <summary>
            a collection of child menu items
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Application.Navigation.MenuItemType.Separator">
            <summary>
            a graphical separator for menu items within a single (sub)menu
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Application.Navigation.MenuItemType.UseCase">
            <summary>
            a menu item that has an associated use case interface type
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Application.Navigation.MenuItemType.GuiAppItem">
            <summary>
            a menu item added by a GUI app (e.g. settings for winforms app)
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Application.QueryListUseCaseBase`1">
            <summary>
            A base use case for a query operation without a criteria when the result is a list of query results.
            </summary>
            <typeparam name="TResult">a type of the query result (list item; must be binary serializable)</typeparam>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryListUseCaseBase`1.#ctor(A5Soft.CARMA.Application.Authorization.IAuthenticationStateProvider,A5Soft.CARMA.Application.Authorization.IAuthorizationProvider,A5Soft.CARMA.Application.DataPortal.IClientDataPortal,A5Soft.CARMA.Domain.Rules.IValidationEngineProvider,A5Soft.CARMA.Domain.Metadata.IMetadataProvider,A5Soft.CARMA.Application.ILogger)">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryListUseCaseBase`1.QueryAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a query result (that does not depend on any criteria).
            </summary>
            <param name="ct">cancellation token (if any)</param>
            <returns>a query result</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryListUseCaseBase`1.DoQueryAsync(System.Threading.CancellationToken)">
            <summary>
            Implement this method to fetch a query result.
            </summary>
            <returns>a query result</returns>
            <remarks>At this stage user has already been authorized.
            This method is always executed on server side (if data portal is configured).</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryListUseCaseBase`1.BeforeDataPortalAsync(System.Threading.CancellationToken)">
            <summary>
            Implement this method for any actions that should be taken before remote invocation.
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryListUseCaseBase`1.AfterDataPortalAsync(System.Collections.Generic.List{`0},System.Threading.CancellationToken)">
            <summary>
            Implement this method for any actions that should be taken after
            a successful remote invocation. (e.g. clear local cache)
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryListUseCaseBase`1.GetMetadata">
            <summary>
            Gets metadata for the entity fetched.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryListUseCaseBase`1.GetMenuTitle">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetMenuTitle"/>
        </member>
        <member name="T:A5Soft.CARMA.Application.QueryListWithCriteriaUseCaseBase`2">
            <summary>
            A base use case for a query operation that gets a list of query results.
            </summary>
            <typeparam name="TResult">a type of the query result (must be binary serializable)</typeparam>
            <typeparam name="TCriteria">a type of the query parameter (must be json serializable,
            i.e. either a primitive or a POCO)</typeparam>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryListWithCriteriaUseCaseBase`2.#ctor(A5Soft.CARMA.Application.Authorization.IAuthenticationStateProvider,A5Soft.CARMA.Application.Authorization.IAuthorizationProvider,A5Soft.CARMA.Application.DataPortal.IClientDataPortal,A5Soft.CARMA.Domain.Rules.IValidationEngineProvider,A5Soft.CARMA.Domain.Metadata.IMetadataProvider,A5Soft.CARMA.Application.ILogger)">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryListWithCriteriaUseCaseBase`2.QueryAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Gets a query result list using query criteria provided.
            </summary>
            <param name="criteria">a criteria for the query</param>
            <param name="ct">cancellation token (if any)</param>
            <returns>a query result</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryListWithCriteriaUseCaseBase`2.DoQueryAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Implement this method to fetch a query result.
            </summary>
            <param name="criteria">a criteria for the query</param>
            <returns>a query result</returns>
            <remarks>At this stage user has already been authorized.
            The criteria param is NOT guaranteed to be not null (as it could be a valid option).
            This method is always executed on server side (if data portal is configured).</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryListWithCriteriaUseCaseBase`2.BeforeDataPortalAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Implement this method for any actions that should be taken before remote invocation.
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryListWithCriteriaUseCaseBase`2.AfterDataPortalAsync(`1,System.Collections.Generic.List{`0},System.Threading.CancellationToken)">
            <summary>
            Implement this method for any actions that should be taken after
            a successful remote invocation. (e.g. clear local cache)
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryListWithCriteriaUseCaseBase`2.GetMetadata">
            <summary>
            Gets metadata for the entity fetched.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryListWithCriteriaUseCaseBase`2.GetCriteriaMetadata">
            <summary>
            Gets metadata for the query criteria.
            Returns null if the criteria is not a class or an interface.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryListWithCriteriaUseCaseBase`2.GetMenuTitle">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetMenuTitle"/>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryListWithCriteriaUseCaseBase`2.Validate(`1)">
            <summary>
            Validates a criteria (as a POCO object) and returns a broken rules collection
            that can be used to determine whether the criteria is valid and what are the
            broken rules (if invalid).
            </summary>
            <param name="criteria">criteria to validate</param>
            <remarks>Override this method in order to implement custom validation
            or disable validation by returning a new (empty) <see cref="T:A5Soft.CARMA.Domain.Rules.BrokenRulesCollection"/>.</remarks>
        </member>
        <member name="T:A5Soft.CARMA.Application.QueryUseCaseBase`1">
            <summary>
            A base use case for a query operation without a criteria
            (that gets a query result that is not dependent on any criteria).
            </summary>
            <typeparam name="TResult">a type of the query result (must be binary serializable)</typeparam>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryUseCaseBase`1.#ctor(A5Soft.CARMA.Application.Authorization.IAuthenticationStateProvider,A5Soft.CARMA.Application.Authorization.IAuthorizationProvider,A5Soft.CARMA.Application.DataPortal.IClientDataPortal,A5Soft.CARMA.Domain.Rules.IValidationEngineProvider,A5Soft.CARMA.Domain.Metadata.IMetadataProvider,A5Soft.CARMA.Application.ILogger)">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryUseCaseBase`1.QueryAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a query result (that does not depend on any criteria).
            </summary>
            <param name="ct">cancellation token (if any)</param>
            <returns>a query result</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryUseCaseBase`1.DoQueryAsync(System.Threading.CancellationToken)">
            <summary>
            Implement this method to fetch a query result.
            </summary>
            <returns>a query result</returns>
            <remarks>At this stage user has already been authorized.
            This method is always executed on server side (if data portal is configured).</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryUseCaseBase`1.BeforeDataPortalAsync(System.Threading.CancellationToken)">
            <summary>
            Implement this method for any actions that should be taken before remote invocation.
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryUseCaseBase`1.AfterDataPortalAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Implement this method for any actions that should be taken after
            a successful remote invocation. (e.g. clear local cache)
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryUseCaseBase`1.GetMetadata">
            <summary>
            Gets metadata for the entity fetched.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryUseCaseBase`1.GetMenuTitle">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetMenuTitle"/>
        </member>
        <member name="T:A5Soft.CARMA.Application.QueryWithCriteriaUseCaseBase`2">
            <summary>
            A base use case for a query operation (that gets a query result using query criteria provided).
            </summary>
            <typeparam name="TResult">a type of the query result (must be binary serializable)</typeparam>
            <typeparam name="TCriteria">a type of the query parameter (must be json serializable,
            i.e. either a primitive or a POCO)</typeparam>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryWithCriteriaUseCaseBase`2.#ctor(A5Soft.CARMA.Application.Authorization.IAuthenticationStateProvider,A5Soft.CARMA.Application.Authorization.IAuthorizationProvider,A5Soft.CARMA.Application.DataPortal.IClientDataPortal,A5Soft.CARMA.Domain.Rules.IValidationEngineProvider,A5Soft.CARMA.Domain.Metadata.IMetadataProvider,A5Soft.CARMA.Application.ILogger)">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryWithCriteriaUseCaseBase`2.QueryAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Gets a query result using query criteria provided.
            </summary>
            <param name="criteria">a criteria for the query</param>
            <param name="ct">cancellation token (if any)</param>
            <returns>a query result</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryWithCriteriaUseCaseBase`2.DoQueryAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Implement this method to fetch a query result.
            </summary>
            <param name="criteria">a criteria for the query</param>
            <returns>a query result</returns>
            <remarks>At this stage user has already been authorized.
            The criteria param is NOT guaranteed to be not null (as it could be a valid option).
            This method is always executed on server side (if data portal is configured).</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryWithCriteriaUseCaseBase`2.BeforeDataPortalAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Implement this method for any actions that should be taken before remote invocation.
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryWithCriteriaUseCaseBase`2.AfterDataPortalAsync(`1,`0,System.Threading.CancellationToken)">
            <summary>
            Implement this method for any actions that should be taken after
            a successful remote invocation. (e.g. clear local cache)
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryWithCriteriaUseCaseBase`2.GetMetadata">
            <summary>
            Gets metadata for the entity fetched.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryWithCriteriaUseCaseBase`2.GetCriteriaMetadata">
            <summary>
            Gets metadata for the query criteria.
            Returns null if the criteria is not a class or an interface.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryWithCriteriaUseCaseBase`2.Validate(`1)">
            <summary>
            Validates a criteria (as a POCO object) and returns a broken rules collection
            that can be used to determine whether the criteria is valid and what are the
            broken rules (if invalid).
            </summary>
            <param name="criteria">criteria to validate</param>
            <remarks>Override this method in order to implement custom validation
            or disable validation by returning a new (empty) <see cref="T:A5Soft.CARMA.Domain.Rules.BrokenRulesCollection"/>.</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.QueryWithCriteriaUseCaseBase`2.GetMenuTitle">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetMenuTitle"/>
        </member>
        <member name="T:A5Soft.CARMA.Application.RemoteMethodAttribute">
            <summary>
            Used to designate a service (use case or other) interface method that should be invoked remotely.
            There could only be one remote method per remote service interface.
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Application.RemoteServiceAttribute">
            <summary>
            Used to designate a service (use case or other) interface that has a remote method.
            There could only be one remote method per remote service interface.
            A service implementation can only have one remote interface.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.RemoteServiceAttribute.#ctor(A5Soft.CARMA.Domain.ServiceLifetime,System.Boolean)">
            <summary>
            Default constructor for RemoteServiceAttribute.
            </summary>
            <param name="lifetime">a lifetime of the service within an IoC container</param>
            <param name="allowMultipleImplementations">whether multiple implementations of the service are allowed (not only a single)</param>
        </member>
        <member name="T:A5Soft.CARMA.Application.RemoteUseCaseBase">
            <summary>
            A base class for use cases that support remote execution.
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Application.RemoteUseCaseBase.DataPortal">
            <summary>
            data portal
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.RemoteUseCaseBase.#ctor(A5Soft.CARMA.Application.DataPortal.IClientDataPortal,A5Soft.CARMA.Domain.Rules.IValidationEngineProvider,A5Soft.CARMA.Domain.Metadata.IMetadataProvider,A5Soft.CARMA.Application.ILogger)">
            <inheritdoc />
        </member>
        <member name="T:A5Soft.CARMA.Application.Retry.DoNotRetryPolicy">
            <summary>
            A retry policy requiring NOT to do retry.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.Retry.DoNotRetryPolicy.RetryAttempts">
            <inheritdoc cref="P:A5Soft.CARMA.Application.Retry.IRetryPolicy.RetryAttempts"/>
        </member>
        <member name="M:A5Soft.CARMA.Application.Retry.DoNotRetryPolicy.GetDelayForRetry(System.Int32)">
            <inheritdoc cref="M:A5Soft.CARMA.Application.Retry.IRetryPolicy.GetDelayForRetry(System.Int32)"/>
        </member>
        <member name="T:A5Soft.CARMA.Application.Retry.ExponentialBackoffWithJitterRetryPolicy">
            <summary>
            A retry policy using exponential backoff (retry intervals grow exponentially)
            and jitter (randomized delays help avoid thundering herd problems).
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.Retry.ExponentialBackoffWithJitterRetryPolicy.#ctor(System.Int32,System.TimeSpan,System.TimeSpan,System.Double)">
            <summary>
            Creates a new policy instance.
            </summary>
            <param name="retryAttempts">How many retry attempts to take (min 1, max 20).</param>
            <param name="baseDelay">Base delay (e.g., 2 seconds).</param>
            <param name="maxDelay">Maximum delay allowed (e.g., 1 minute).</param>
            <param name="backoffFactor">Multiplier per attempt (base of the exponent).</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.Retry.ExponentialBackoffWithJitterRetryPolicy.#ctor(System.Int32)">
            <summary>
            Creates a new policy instance for default parameters:
            <see cref="P:A5Soft.CARMA.Application.Retry.ExponentialBackoffWithJitterRetryPolicy.BaseDelay"/> - 2 sec.
            <see cref="P:A5Soft.CARMA.Application.Retry.ExponentialBackoffWithJitterRetryPolicy.MaxDelay"/> - 1 min.
            <see cref="P:A5Soft.CARMA.Application.Retry.ExponentialBackoffWithJitterRetryPolicy.BackoffFactor"/> - 2.0.
            </summary>
            <param name="retryAttempts">How many retry attempts to take (min 1, max 20).</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.Retry.ExponentialBackoffWithJitterRetryPolicy.#ctor">
            <summary>
            Creates a new policy instance for default parameters:
            <see cref="P:A5Soft.CARMA.Application.Retry.ExponentialBackoffWithJitterRetryPolicy.RetryAttempts"/> - 3
            <see cref="P:A5Soft.CARMA.Application.Retry.ExponentialBackoffWithJitterRetryPolicy.BaseDelay"/> - 2 sec.
            <see cref="P:A5Soft.CARMA.Application.Retry.ExponentialBackoffWithJitterRetryPolicy.MaxDelay"/> - 1 min.
            <see cref="P:A5Soft.CARMA.Application.Retry.ExponentialBackoffWithJitterRetryPolicy.BackoffFactor"/> - 2.0.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.Retry.ExponentialBackoffWithJitterRetryPolicy.RetryAttempts">
            <summary>
            How many retry attempts to take (min 1, max 20).
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.Retry.ExponentialBackoffWithJitterRetryPolicy.BaseDelay">
            <summary>
            Base delay (e.g., 2 seconds).
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.Retry.ExponentialBackoffWithJitterRetryPolicy.MaxDelay">
            <summary>
            Maximum delay allowed (e.g., 1 minute).
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.Retry.ExponentialBackoffWithJitterRetryPolicy.BackoffFactor">
            <summary>
            Multiplier per attempt (base of the exponent).
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.Retry.ExponentialBackoffWithJitterRetryPolicy.GetDelayForRetry(System.Int32)">
            <inheritdoc cref="M:A5Soft.CARMA.Application.Retry.IRetryPolicy.GetDelayForRetry(System.Int32)"/>
        </member>
        <member name="T:A5Soft.CARMA.Application.Retry.Extensions">
            <summary>
            Extension methods for retry functionality.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.Retry.Extensions.ExecuteAsync(A5Soft.CARMA.Application.Retry.IRetryPolicy,System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Executes a <paramref name="method"/> using <paramref name="policy"/>.
            </summary>
            <param name="policy">a retry policy to use</param>
            <param name="method">a method to execute</param>
            <remarks><paramref name="method"/> is expected to throw <see cref="T:A5Soft.CARMA.Application.Retry.TransiantException"/>
            if the error cause is transiant</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.Retry.Extensions.ExecuteAsync(A5Soft.CARMA.Application.Retry.IRetryPolicy,A5Soft.CARMA.Application.Retry.ITransientExceptionValidator,System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Executes a <paramref name="method"/> using <paramref name="policy"/>
            and <paramref name="validator"/>.
            </summary>
            <param name="policy">a retry policy to use</param>
            <param name="validator">a validator to use</param>
            <param name="method">a method to execute</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.Retry.Extensions.IsTransiantException(System.Exception)">
            <summary>
            Traverses the exception hierarchy and returns true if there is any
            <see cref="T:A5Soft.CARMA.Application.Retry.TransiantException"/> in the exception hierarchy.
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:A5Soft.CARMA.Application.Retry.Extensions.ToTransiantException(System.Exception)">
            <summary>
            Traverses the exception hierarchy and returns the first exception of type
            <see cref="T:A5Soft.CARMA.Application.Retry.TransiantException"/>. If no such exception, returns null.
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:A5Soft.CARMA.Application.Retry.Extensions.IsTransiantException(System.Exception,A5Soft.CARMA.Application.Retry.ITransientExceptionValidator)">
            <summary>
            Traverses the exception hierarchy and returns true if there is any
            transient error in the exception hierarchy.
            </summary>
            <param name="ex">an exception to inspect</param>
            <param name="validator">a validator to use</param>
        </member>
        <member name="T:A5Soft.CARMA.Application.Retry.FibonacciBackoffRetryPolicy">
            <summary>
            A retry policy using the Fibonacci sequence to determine retry delays.
            Each retry delay is the sum of the two previous delays.
            It grows slower than exponential backoff but faster than linear,
            which can be useful when you want gentle retry escalation without going "too big too fast".
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.Retry.FibonacciBackoffRetryPolicy.#ctor(System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Creates a new policy instance for the parameters provided.
            </summary>
            <param name="retryAttempts">How many retry attempts to take (min 1, max 20).</param>
            <param name="timeUnit">Time unit for Fibonacci steps (e.g., seconds, minutes).</param>
            <param name="maxDelay">Maximum delay allowed (e.g., 1 minute).</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.Retry.FibonacciBackoffRetryPolicy.#ctor(System.Int32)">
            <summary>
            Creates a new policy instance for the default parameters:
            <see cref="P:A5Soft.CARMA.Application.Retry.FibonacciBackoffRetryPolicy.TimeUnit"/> - 1 sec.
            <see cref="P:A5Soft.CARMA.Application.Retry.FibonacciBackoffRetryPolicy.MaxDelay"/> - 5 min.
            </summary>
            <param name="retryAttempts">How many retry attempts to take (min 1, max 20).</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.Retry.FibonacciBackoffRetryPolicy.#ctor">
            <summary>
            Creates a new policy instance for the default parameters:
            <see cref="P:A5Soft.CARMA.Application.Retry.FibonacciBackoffRetryPolicy.RetryAttempts"/> - 3
            <see cref="P:A5Soft.CARMA.Application.Retry.FibonacciBackoffRetryPolicy.TimeUnit"/> - 1 sec.
            <see cref="P:A5Soft.CARMA.Application.Retry.FibonacciBackoffRetryPolicy.MaxDelay"/> - 5 min.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.Retry.FibonacciBackoffRetryPolicy.RetryAttempts">
            <summary>
            How many retry attempts to take (min 1, max 20).
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.Retry.FibonacciBackoffRetryPolicy.TimeUnit">
            <summary>
            Time unit for Fibonacci steps (e.g., seconds, minutes).
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.Retry.FibonacciBackoffRetryPolicy.MaxDelay">
            <summary>
            Maximum delay allowed (e.g., 1 minute).
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.Retry.FibonacciBackoffRetryPolicy.GetDelayForRetry(System.Int32)">
            <inheritdoc cref="M:A5Soft.CARMA.Application.Retry.IRetryPolicy.GetDelayForRetry(System.Int32)"/>
        </member>
        <member name="T:A5Soft.CARMA.Application.Retry.IRetryPolicy">
            <summary>
            Policy settings for retry behaviour.
            </summary>
        </member>
        <member name="P:A5Soft.CARMA.Application.Retry.IRetryPolicy.RetryAttempts">
            <summary>
            How many retry attempts to take.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.Retry.IRetryPolicy.GetDelayForRetry(System.Int32)">
            <summary>
            Gets a delay for the retry attempt.
            </summary>
            <param name="attempt">no of the attempt to get a dalay for</param>
            <returns>a delay for the retry attempt</returns>
        </member>
        <member name="T:A5Soft.CARMA.Application.Retry.ITransientExceptionValidator">
            <summary>
            Base interface for transient exception validation,
            i.e. deciding whether a particular exception is transient.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.Retry.ITransientExceptionValidator.IsTransient(System.Exception)">
            <summary>
            Gets a value indicating whether the exception specified is transient.
            </summary>
            <param name="ex">an exception to validate (not null)</param>
            <returns>a value indicating whether the exception specified is transient</returns>
        </member>
        <member name="T:A5Soft.CARMA.Application.Retry.TransiantException">
            <summary>
            Wrapper for transient exceptions (e.g. remote database, mail or web server temporarily offline).
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Application.SaveUseCaseBase`2">
            <summary>
            A base use case for domain entity save operation (insert a new entity or update an existing one).
            </summary>
            <typeparam name="TDomObject">a type of domain entity (must be binary serializable)</typeparam>
            <typeparam name="TDomInterface">a type of business interface</typeparam>
            <remarks>Every entity is saved by passing its business only data by interface
            to make sure that inner state of the entity is not tampered in any way.</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.SaveUseCaseBase`2.#ctor(A5Soft.CARMA.Application.Authorization.IAuthenticationStateProvider,A5Soft.CARMA.Application.Authorization.IAuthorizationProvider,A5Soft.CARMA.Application.DataPortal.IClientDataPortal,A5Soft.CARMA.Domain.Rules.IValidationEngineProvider,A5Soft.CARMA.Domain.Metadata.IMetadataProvider,A5Soft.CARMA.Application.ILogger)">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Application.SaveUseCaseBase`2.SaveAsync(`1)">
            <summary>
            Saves (persists) a domain entity data provided by interface,
            i.e. either creates a new domain entity or updates an existing entity.
            </summary>
            <param name="domainDto">business data for the domain entity to save</param>
            <returns>a domain entity that has been saved (persisted)</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.SaveUseCaseBase`2.GetMetadata">
            <summary>
            Gets metadata for the entity saved.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.SaveUseCaseBase`2.DoSaveAsync(`1)">
            <summary>
            Implement this method to load the business data to a new or existing domain entity,
            validate and save it (if valid).
            If required, implement any post save actions as well, e.g. resetting cache for relevant lookups,
            sending notifications etc.
            </summary>
            <param name="domainDto">business data for the domain entity to save</param>
            <returns>a domain entity that has been saved (persisted)</returns>
            <remarks>At this stage user has already been authorized
            and the domainDto param is guaranteed to be not null.
            However if the authorization depends on the entity data,
            appropriate authorization shall be applied in this method.
            This method is always executed on server side (if data portal is configured).</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.SaveUseCaseBase`2.BeforeDataPortalAsync(`1)">
            <summary>
            Implement this method for any actions that should be taken before remote invocation.
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.SaveUseCaseBase`2.AfterDataPortalAsync(`1,`0)">
            <summary>
            Implement this method for any actions that should be taken after
            a successful remote invocation. (e.g. clear local cache)
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.SaveUseCaseBase`2.GetButtonTitle">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetButtonTitle"/>
        </member>
        <member name="M:A5Soft.CARMA.Application.SaveUseCaseBase`2.GetMenuTitle">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetMenuTitle"/>
        </member>
        <member name="T:A5Soft.CARMA.Application.SaveWithOptionsUseCaseBase`3">
            <summary>
            A base use case for domain entity save operation (insert a new entity or update an existing one)
            with extra options (that affect save method behaviour, e.g. optionally send invoice to client).
            </summary>
            <typeparam name="TDomObject">a type of domain entity (must be binary serializable)</typeparam>
            <typeparam name="TDomInterface">a type of business interface</typeparam>
            <typeparam name="TOptions">a type of the save options (must be json serializable,
            i.e. either a primitive or a POCO)</typeparam>
            <remarks>Every entity is saved by passing its business only data by interface
            to make sure that inner state of the entity is not tampered in any way.</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.SaveWithOptionsUseCaseBase`3.#ctor(A5Soft.CARMA.Application.Authorization.IAuthenticationStateProvider,A5Soft.CARMA.Application.Authorization.IAuthorizationProvider,A5Soft.CARMA.Application.DataPortal.IClientDataPortal,A5Soft.CARMA.Domain.Rules.IValidationEngineProvider,A5Soft.CARMA.Domain.Metadata.IMetadataProvider,A5Soft.CARMA.Application.ILogger)">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Application.SaveWithOptionsUseCaseBase`3.SaveAsync(`1,`2)">
            <summary>
            Saves (persists) a domain entity data provided by interface,
            i.e. either creates a new domain entity or updates an existing entity.
            </summary>
            <param name="domainDto">business data for the domain entity to save</param>
            <param name="options">options that affect save method behaviour, e.g. optionally send invoice to client</param>
            <returns>a domain entity that has been saved (persisted)</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.SaveWithOptionsUseCaseBase`3.DoSaveAsync(`1,`2)">
            <summary>
            Implement this method to load the business data to a new or existing domain entity,
            validate and save it (if valid).
            If required, implement any post save actions as well, e.g. resetting cache for relevant lookups,
            sending notifications etc.
            </summary>
            <param name="domainDto">business data for the domain entity to save</param> 
            <param name="options">options that affect save method behaviour, e.g. optionally send invoice to client</param>
            <returns>a domain entity that has been saved (persisted)</returns>
            <remarks>At this stage user has already been authorized
            and the domainDto param are guaranteed to be not null.
            The options param is NOT guaranteed to be not null (as it could be a valid value).
            However if the authorization depends on the entity data,
            appropriate authorization shall be applied in this method.
            This method is always executed on server side (if data portal is configured).</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.SaveWithOptionsUseCaseBase`3.BeforeDataPortalAsync(`1,`2)">
            <summary>
            Implement this method for any actions that should be taken before remote invocation.
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.SaveWithOptionsUseCaseBase`3.AfterDataPortalAsync(`1,`2,`0)">
            <summary>
            Implement this method for any actions that should be taken after
            a successful remote invocation. (e.g. clear local cache)
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.SaveWithOptionsUseCaseBase`3.GetOptionsMetadata">
            <summary>
            Gets metadata for the save options.
            Returns null if the save options is not a class or an interface.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.SaveWithOptionsUseCaseBase`3.Validate(`2)">
            <summary>
            Validates save options (as a POCO object) and returns a broken rules collection
            that can be used to determine whether the options are valid and what are the
            broken rules (if invalid).
            </summary>
            <param name="options">save options to validate</param>
            <remarks>Override this method in order to implement custom validation
            or disable validation by returning a new (empty) <see cref="T:A5Soft.CARMA.Domain.Rules.BrokenRulesCollection"/>.</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.SaveWithOptionsUseCaseBase`3.GetButtonTitle">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetButtonTitle"/>
        </member>
        <member name="M:A5Soft.CARMA.Application.SaveWithOptionsUseCaseBase`3.GetMenuTitle">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetMenuTitle"/>
        </member>
        <member name="T:A5Soft.CARMA.Application.UnauthenticatedCommandWithParameterUseCaseBase`1">
            <summary>
            A base use case for an unauthenticated command operation (that executes a command
            by an unauthenticated user using the parameters provided without a result).
            E.g. reset password, signup etc.
            </summary>
            <typeparam name="TParameter">a type of the command parameter(must be json serializable,
            i.e. either a primitive or a POCO)</typeparam>
        </member>
        <member name="M:A5Soft.CARMA.Application.UnauthenticatedCommandWithParameterUseCaseBase`1.#ctor(A5Soft.CARMA.Application.DataPortal.IClientDataPortal,A5Soft.CARMA.Domain.Rules.IValidationEngineProvider,A5Soft.CARMA.Domain.Metadata.IMetadataProvider,A5Soft.CARMA.Application.ILogger)">
            <inheritdoc />
        </member>
        <member name="M:A5Soft.CARMA.Application.UnauthenticatedCommandWithParameterUseCaseBase`1.InvokeAsync(`0)">
            <summary>
            Executes the command using the parameter provided.
            </summary>
            <param name="parameter">a parameter for the command</param>
        </member>
        <member name="M:A5Soft.CARMA.Application.UnauthenticatedCommandWithParameterUseCaseBase`1.ExecuteAsync(`0)">
            <summary>
            Implement this method to execute the command.
            </summary>
            <param name="parameter">a parameter for the command</param>
            <remarks>The parameter is NOT guaranteed to be not null (as it could be a valid option).
            This method is always executed on server side (if data portal is configured).</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.UnauthenticatedCommandWithParameterUseCaseBase`1.BeforeDataPortalAsync(`0)">
            <summary>
            Implement this method for any actions that should be taken before remote invocation.
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.UnauthenticatedCommandWithParameterUseCaseBase`1.AfterDataPortalAsync(`0)">
            <summary>
            Implement this method for any actions that should be taken after
            a successful remote invocation. 
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.UnauthenticatedCommandWithParameterUseCaseBase`1.GetParameterMetadata">
            <summary>
            Gets metadata for the command parameter.
            Returns null if the parameter is not a class or an interface.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.UnauthenticatedCommandWithParameterUseCaseBase`1.Validate(`0)">
            <summary>
            Validates a parameter (as a POCO object) and returns a broken rules collection
            that can be used to determine whether the parameter is valid and what are the
            broken rules (if invalid).
            </summary>
            <param name="parameter">parameter to validate</param>
            <remarks>Override this method in order to implement custom validation
            or disable validation by returning a new (empty) <see cref="T:A5Soft.CARMA.Domain.Rules.BrokenRulesCollection"/>.</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.UnauthenticatedCommandWithParameterUseCaseBase`1.GetButtonTitle">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetButtonTitle"/>
        </member>
        <member name="M:A5Soft.CARMA.Application.UnauthenticatedCommandWithParameterUseCaseBase`1.GetMenuTitle">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetMenuTitle"/>
        </member>
        <member name="T:A5Soft.CARMA.Application.UnauthenticatedQueryUseCaseBase`1">
            <summary>
            A base use case for an unauthenticated query operation (that gets a query result
            for an unauthenticated user without a query criteria).
            E.g. create signup request use case returns a new sign up request instance
            preinitialized with the profile values.
            </summary>
            <typeparam name="TResult">a type of the query result (must be binary serializable)</typeparam>
        </member>
        <member name="M:A5Soft.CARMA.Application.UnauthenticatedQueryUseCaseBase`1.InvokeAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a query result.
            </summary>
            <param name="ct">cancellation token (if any)</param>
            <returns>a query result</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.UnauthenticatedQueryUseCaseBase`1.QueryIntAsync(System.Threading.CancellationToken)">
            <summary>
            Implement this method to fetch a query result.
            </summary>
            <returns>a query result</returns>
            <remarks>This method is always executed on server side (if data portal is configured).</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.UnauthenticatedQueryUseCaseBase`1.BeforeDataPortalAsync(System.Threading.CancellationToken)">
            <summary>
            Implement this method for any actions that should be taken before remote invocation.
            Only invoked if a remote data portal is used.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.UnauthenticatedQueryUseCaseBase`1.AfterDataPortalAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Implement this method for any actions that should be taken after
            a successful remote invocation.
            Only invoked if a remote data portal is used.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.UnauthenticatedQueryUseCaseBase`1.GetMetadata">
            <summary>
            Gets metadata for the entity fetched.
            Returns null if the entity is not a class or an interface.
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Application.UnauthenticatedQueryWithCriteriaUseCaseBase`2">
            <summary>
            A base use case for an unauthenticated query operation (that gets a query result
            for an unauthenticated user using query criteria provided).
            E.g. login use case returns ClaimsIdentity.
            </summary>
            <typeparam name="TResult">a type of the query result (must be binary serializable)</typeparam>
            <typeparam name="TCriteria">a type of the query parameter (must be json serializable,
            i.e. either a primitive or a POCO)</typeparam>
        </member>
        <member name="M:A5Soft.CARMA.Application.UnauthenticatedQueryWithCriteriaUseCaseBase`2.#ctor(A5Soft.CARMA.Application.DataPortal.IClientDataPortal,A5Soft.CARMA.Domain.Rules.IValidationEngineProvider,A5Soft.CARMA.Domain.Metadata.IMetadataProvider,A5Soft.CARMA.Application.Authorization.IAuthenticationStateProvider,A5Soft.CARMA.Application.ILogger)">
            <inheritdoc />
        </member>
        <member name="P:A5Soft.CARMA.Application.UnauthenticatedQueryWithCriteriaUseCaseBase`2.UseDefaultLogging">
            <summary>
            Whether to use a default logging for method entry and exit.
            Disabled by default as the use case is commonly used for authentication
            while sensitive data shall not be logged.
            Does not affect exception logging.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.UnauthenticatedQueryWithCriteriaUseCaseBase`2.InvokeAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Gets a query result using query criteria provided.
            </summary>
            <param name="criteria">a criteria for the query</param>
            <param name="ct">cancellation token (if any)</param>
            <returns>a query result</returns>
        </member>
        <member name="M:A5Soft.CARMA.Application.UnauthenticatedQueryWithCriteriaUseCaseBase`2.QueryIntAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Implement this method to fetch a query result.
            </summary>
            <param name="criteria">a criteria for the query</param>
            <returns>a query result</returns>
            <remarks>The criteria param is NOT guaranteed to be not null (as it could be a valid option).
            This method is always executed on server side (if data portal is configured).</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.UnauthenticatedQueryWithCriteriaUseCaseBase`2.BeforeDataPortalAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Implement this method for any actions that should be taken before remote invocation.
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.UnauthenticatedQueryWithCriteriaUseCaseBase`2.AfterDataPortalAsync(`1,`0,System.Threading.CancellationToken)">
            <summary>
            Implement this method for any actions that should be taken after
            a successful remote invocation. 
            Only invoked if a remote data portal is used. 
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.UnauthenticatedQueryWithCriteriaUseCaseBase`2.GetMetadata">
            <summary>
            Gets metadata for the entity fetched.
            Returns null if the entity is not a class or an interface.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.UnauthenticatedQueryWithCriteriaUseCaseBase`2.GetCriteriaMetadata">
            <summary>
            Gets metadata for the query criteria.
            Returns null if the criteria is not a class or an interface.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.UnauthenticatedQueryWithCriteriaUseCaseBase`2.Validate(`1)">
            <summary>
            Validates a criteria (as a POCO object) and returns a broken rules collection
            that can be used to determine whether the criteria is valid and what are the
            broken rules (if invalid).
            </summary>
            <param name="criteria">criteria to validate</param>
            <remarks>Override this method in order to implement custom validation
            or disable validation by returning a new (empty) <see cref="T:A5Soft.CARMA.Domain.Rules.BrokenRulesCollection"/>.</remarks>
        </member>
        <member name="M:A5Soft.CARMA.Application.UnauthenticatedQueryWithCriteriaUseCaseBase`2.GetButtonTitle">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetButtonTitle"/>
        </member>
        <member name="M:A5Soft.CARMA.Application.UnauthenticatedQueryWithCriteriaUseCaseBase`2.GetMenuTitle">
            <inheritdoc cref="M:A5Soft.CARMA.Domain.Metadata.IUseCaseMetadata.GetMenuTitle"/>
        </member>
        <member name="T:A5Soft.CARMA.Application.UseCaseAttribute">
            <summary>
            Used to designate a use case interface that should be added to IoC container.
            </summary>
        </member>
        <member name="M:A5Soft.CARMA.Application.UseCaseAttribute.#ctor(A5Soft.CARMA.Domain.ServiceLifetime,System.Type[])">
            <summary>
            Default constructor for UseCaseAttribute.
            </summary>
            <param name="name">the Name attribute property, which may be a resource key string</param>
            <param name="description">the Description attribute property, which may be a resource key string</param>
            <param name="resourceType">the <see cref="T:System.Type"/> that contains the resources for
            <see cref="!:Name"/> and <see cref="!:Description"/></param>
            <param name="lifetime">a lifetime of the use case within an IoC container</param>
            <param name="requiredLookups">types of lookups that the user needs (to access)
            in order to use this use case</param>
        </member>
        <member name="P:A5Soft.CARMA.Application.UseCaseAttribute.LookupTypes">
            <summary>
            Gets types of lookup values that the use case can request.
            </summary>
        </member>
        <member name="T:A5Soft.CARMA.Application.UseCaseBase">
            <summary>
            A base class for all use cases.
            </summary>
            <remarks>
            All use cases need logging.
            Pretty much all use cases deal with business entities and require
            validation and metadata access for that purpose.</remarks>
        </member>
        <member name="F:A5Soft.CARMA.Application.UseCaseBase.ValidationProvider">
            <summary>
            validation provider
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Application.UseCaseBase.MetadataProvider">
            <summary>
            metadata provider
            </summary>
        </member>
        <member name="F:A5Soft.CARMA.Application.UseCaseBase.Logger">
            <summary>
            logger
            </summary>
        </member>
    </members>
</doc>
